<?xml version="1.0" encoding="utf-8"?>
<DBUpdate>
  <Version number="1.0.0.0">
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_BatchTypes](
                      [BatchType] [varchar](255) NULL,
                      [License] [varchar](255) NULL,
                      [Sequence] [int] NULL,
                      [ApproveSP] [varchar](255) NULL,
                      [ApproveStatus] [varchar](50) NULL,
                      [ProcessSP] [varchar](255) NULL,
                      [ProcessStatus] [varchar](50) NULL,
                      [HeadRowSetupSP] [varchar](255) NULL,
                      [LineRowSetupSP] [varchar](255) NULL,
                      [DistrRowSetupSP] [varchar](255) NULL,
                      [HeadRowSelectSP] [varchar](255) NULL,
                      [LineRowSelectSP] [varchar](255) NULL,
                      [DistrRowSelectSP] [varchar](255) NULL,
                      [HeadValidationSP] [varchar](255) NULL,
                      [LinesValidationSP] [varchar](255) NULL,
                      [DistrValidationSP] [varchar](255) NULL,
                      [AfterCloseLinesSP] [varchar](255) NULL,
                      [AfterCloseDistrSP] [varchar](255) NULL,
                      [HeadValue1Descr] [varchar](50) NULL,
                      [HeadValue2Descr] [varchar](50) NULL,
                      [HeadValue3Descr] [varchar](50) NULL,
                      [HeadValue4Descr] [varchar](50) NULL,
                      [LineValue1Descr] [varchar](50) NULL,
                      [LineValue2Descr] [varchar](50) NULL,
                      [LineValue3Descr] [varchar](50) NULL,
                      [LineValue4Descr] [varchar](50) NULL,
                      [DistrValue1Descr] [varchar](50) NULL,
                      [DistrValue2Descr] [varchar](50) NULL,
                      [DistrValue3Descr] [varchar](50) NULL,
                      [DistrValue4Descr] [varchar](50) NULL
                ) ON [PRIMARY]
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [HeadValidationStatus] [varchar](50) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [LinesValidationStatus] [varchar](50) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [DistrValidationStatus] [varchar](50) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [HeadCalculationSP] [varchar](255) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [HeadCalculationStatus] [varchar](50) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [LinesCalculationSP] [varchar](255) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [LinesCalculationStatus] [varchar](50) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [DistrCalculationSP] [varchar](255) NULL
                ALTER TABLE [dbo].[BI_BatchTypes] ADD [DistrCalculationStatus] [varchar](50) NULL</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Tables](
                      [BatchType] [varchar](50) NOT NULL,
                      [Table] [varchar](100) NOT NULL,
                      [Approve Batch] [varchar](100) NULL,
                      [Process Batch] [varchar](100) NULL
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Roles](
                      [RoleId] [varchar](50) NOT NULL,
                      [RoleDescr] [varchar](150) NULL,
                 CONSTRAINT [PK_BI_Roles] PRIMARY KEY CLUSTERED 
                (
                      [RoleId] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_RPTCategories](
                      [RptCategoryID] [varchar](50) NOT NULL,
                      [RptCategoryDescr] [varchar](200) NULL,
                      [Sequence] [int] NULL,
                      [BatchReport] [bit] NULL,
                      [BatchType] [varchar](50) NULL,
                      [BatchLevel] [char](1) NULL,
                 CONSTRAINT [PK_BI_RPTCategories] PRIMARY KEY CLUSTERED 
                (
                      [RptCategoryID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Access](
                      [AccessId] [varchar](50) NOT NULL,
                      [AccessDescr] [varchar](150) NULL,
                 CONSTRAINT [PK_BI_Access] PRIMARY KEY CLUSTERED 
                (
                      [AccessId] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Filters](
                      [FilterID] [int] IDENTITY(1,1) NOT NULL,
                      [BatchType] [varchar](50) NOT NULL,
                      [BatchLevel] [char](1) NOT NULL,
                      [FilterOwner] [varchar](255) NULL,
                      [FilterDescr] [varchar](255) NOT NULL,
                      [FilterSQL] [varchar](max) NOT NULL,
                 CONSTRAINT [PK_BI_Filters] PRIMARY KEY CLUSTERED 
                (
                      [FilterID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Columns](
                      [BatchType] [varchar](50) NOT NULL,
                      [BatchLevel] [char](1) NOT NULL,
                      [Table] [varchar](100) NOT NULL,
                      [Column] [varchar](100) NOT NULL,
                      [Rename To] [varchar](100) NULL,
                      [Sequence] [int] NOT NULL,
                      [LookUp_SP] [varchar](100) NULL,
                      [Select_SP] [varchar](100) NULL,
                      [Validation_SP] [varchar](100) NULL,
                      [Hide] [bit] NULL,
                      [ReadOnly] [bit] NULL,
                      [ReadOnly Existing] [bit] NULL,
                      [Filter On] [bit] NULL,
                      [Required] [bit] NULL,
                      [Batch ID] [bit] NULL,
                      [Line ID] [bit] NULL,
                      [Distr ID] [bit] NULL,
                      [Status Col] [bit] NULL
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Options](
                      [RowID] [int] IDENTITY(1,1) NOT NULL,
                      [Option_Type] [nvarchar](50) NOT NULL,
                      [Option_Value] [nvarchar](50) NOT NULL,
                      [Option_Text] [nvarchar](256) NOT NULL,
                      [Sequence] [int] NULL,
                 CONSTRAINT [PK_BI_Options] PRIMARY KEY CLUSTERED 
                (
                      [RowID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_RoleAccess](
                      [RoleId] [varchar](50) NOT NULL,
                      [AccessId] [varchar](50) NOT NULL,
                 CONSTRAINT [PK_BI_RoleAccess] PRIMARY KEY CLUSTERED 
                (
                      [RoleId] ASC,
                      [AccessId] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Users](
                      [UserId] [varchar](255) NOT NULL,
                      [FirstName] [varchar](255) NULL,
                      [SurName] [varchar](255) NULL,
                      [RoleId] [varchar](50) NOT NULL,
                 CONSTRAINT [PK_BI_Users] PRIMARY KEY CLUSTERED 
                (
                      [UserId] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_Reports](
                      [ReportName] [varchar](100) NOT NULL,
                      [RptCategoryID] [varchar](50) NOT NULL,
                      [ReportURL] [varchar](500) NOT NULL,
                      [Sequence] [int] NULL,
                 CONSTRAINT [PK_BI_Reports] PRIMARY KEY CLUSTERED 
                (
                      [ReportName] ASC,
                      [RptCategoryID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_FilterCriteria](
                      [FilterID] [int] NOT NULL,
                      [SearchID] [int] NOT NULL,
                      [SearchField] [varchar](255) NOT NULL,
                      [SearchCondition] [varchar](50) NOT NULL,
                      [SearchValue] [varchar](255) NOT NULL,
                      [SearchJoin] [varchar](50) NULL,
                 CONSTRAINT [PK_BI_FilterCriteria] PRIMARY KEY CLUSTERED 
                (
                      [FilterID] ASC,
                      [SearchID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_FilterAssigned](
                      [FilterID] [int] NOT NULL,
                      [AssignID] [int] NOT NULL,
                      [AssignToRole] [varchar](50) NULL,
                      [RoleDefault] [int] NULL,
                      [AssignToUser] [varchar](255) NULL,
                      [UserDefault] [int] NULL,
                 CONSTRAINT [PK_BI_FilterAssigned] PRIMARY KEY CLUSTERED 
                (
                      [FilterID] ASC,
                      [AssignID] ASC
                )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
                ) ON [PRIMARY]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_FilterAssigned]  WITH CHECK ADD  CONSTRAINT [FK_BI_FilterAssigned_BI_Filters] FOREIGN KEY([FilterID])
                REFERENCES [dbo].[BI_Filters] ([FilterID])</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_FilterAssigned] CHECK CONSTRAINT [FK_BI_FilterAssigned_BI_Filters]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_FilterCriteria]  WITH CHECK ADD  CONSTRAINT [FK_BI_FilterCriteria_BI_Filters] FOREIGN KEY([FilterID])
                REFERENCES [dbo].[BI_Filters] ([FilterID])</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_FilterCriteria] CHECK CONSTRAINT [FK_BI_FilterCriteria_BI_Filters]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_Reports]  WITH CHECK ADD  CONSTRAINT [FK_BI_Reports_BI_Reports] FOREIGN KEY([RptCategoryID])
                REFERENCES [dbo].[BI_RPTCategories] ([RptCategoryID])</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_Reports] CHECK CONSTRAINT [FK_BI_Reports_BI_Reports]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_RoleAccess]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY([AccessId])
                REFERENCES [dbo].[BI_Access] ([AccessId])</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_RoleAccess] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_RoleAccess]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_Roles] FOREIGN KEY([RoleId])
                REFERENCES [dbo].[BI_Roles] ([RoleId])</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_RoleAccess] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Roles]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_Users]  WITH CHECK ADD  CONSTRAINT [FK_BI_Users_BI_Roles] FOREIGN KEY([RoleId])
                REFERENCES [dbo].[BI_Roles] ([RoleId])</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE [dbo].[BI_Users] CHECK CONSTRAINT [FK_BI_Users_BI_Roles]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- ===================================================================================
                -- Author:        R. Blomstrand
                -- Create date: 18/08/2008
                -- Description:   Used by Batch-It
                --              Returns -1 if invalid SP. Else returns number of parameters used by SP
                -- ===================================================================================
                      CREATE PROCEDURE [dbo].[a_sp_BI_Validate_SP]
                      (
                            @SP varchar(100)
                      )
                      AS
                
                    DECLARE @Count INT
                
                      SELECT @Count = COUNT(*) - 1 
                        FROM sys.procedures 
                      WHERE object_id = OBJECT_ID(@SP)
                
                    IF @Count &gt;= 0 BEGIN
                            SELECT @Count = COUNT(*)  
                                  FROM ModelwareBatchProcessing.eConnect.a_tbl_eConnect_SP_ParamterInfo 
                                  WHERE SPName = @SP 
                      END
                
                    SELECT @Count NumParams</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- =============================================
                -- Author:        R. Blomstrand
                -- Create date: 18/08/2008
                -- Description:   Used by Batch-It
                -- =============================================
                CREATE PROCEDURE [dbo].[a_sp_BI_Get_Tables]
                AS
                      SELECT ' ' name
                      UNION
                      SELECT name FROM sys.tables ORDER BY name</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- =============================================
                -- Author:        R. Blomstrand
                -- Create date: 25/10/2008
                -- Description:   Used by Batch-It to identify datatypes for columns
                -- =============================================
                CREATE PROCEDURE [dbo].[a_sp_BI_Get_ColumnDataTypes]
                (
                      @Tablename varchar(255)
                )
                AS
                
                      SELECT name, TYPE_NAME(user_type_id) datatype
                      FROM sys.columns 
                      WHERE object_id = OBJECT_ID(@Tablename)
                      ORDER BY column_id</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>-- =============================================
                -- Author:        Robert Blomstrand
                -- Create date: 22/10/2008
                -- Description:   Create search table data
                -- =============================================
                CREATE PROCEDURE [dbo].[a_sp_BI_SearchTable] 
                      -- Add the parameters for the stored procedure here
                      @SearchOptionID INT = 0, 
                      @SearchTable VARCHAR(256) = NULL
                AS
                BEGIN
                      
                      -- SET NOCOUNT ON added to prevent extra result sets from
                      -- interfering with SELECT statements.
                      SET NOCOUNT ON;
                
                    -- Insert statements for procedure here
                      SELECT @SearchOptionID, @SearchTable
                END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_FilterCriteria_Delete] 
                    @FilterID int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_FilterCriteria]
                      WHERE  [FilterID] = @FilterID
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Filters_Delete] 
                    @FilterID int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_Filters]
                      WHERE  [FilterID] = @FilterID
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_FilterCriteria_Select] 
                    @FilterID INT
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [FilterID], [SearchID], [SearchField], [SearchCondition], [SearchValue], 
                                  [SearchJoin]
                      FROM   [dbo].[BI_FilterCriteria] 
                      WHERE  ([FilterID] = @FilterID OR @FilterID IS NULL) 
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- =============================================
                -- Author:        R. Blomstrand
                -- Create date: 05/09/2008
                -- Description:   Used by Batch-It
                -- =============================================
                CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypes_Select]
                      (
                            @LicensedOnly char(1)
                      )
                AS
                      IF @LicensedOnly = 'Y' BEGIN
                            SELECT [BatchType],
                                     [License],
                                     [Sequence]
                                  FROM BI_BatchTypes 
                                  WHERE License IS NOT NULL
                            ORDER BY Sequence
                      END
                      ELSE BEGIN
                            SELECT [BatchType],
                                     [License],
                                     [Sequence]
                                  FROM BI_BatchTypes 
                            ORDER BY Sequence
                      END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- ===========================================================
                -- Author:        R. Blomstrand
                -- Create date: 05/09/2008
                -- Description:   Used by Batch-It to update Approve and Process
                --              SPs defined against a batch type
                -- ===========================================================
                CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypes_Update]
                      (
                            @BatchType varchar(255),
                            @License   varchar(255),
                            @Sequence  int
                      )
                AS
                      SET NOCOUNT OFF;
                      
                      UPDATE BI_BatchTypes
                            SET License = @License, 
                                  Sequence = @Sequence
                      WHERE BatchType = @BatchType
                
                      IF @@ERROR &gt; 0 BEGIN
                                  RAISERROR ('Update BI_BatchTypes Failed',16,1)
                                  ROLLBACK TRANSACTION
                                  RETURN 1
                      END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- ===================================================================================
                -- Author:        R. Blomstrand
                -- Create date: 18/08/2008
                -- Description:   Used by Batch-It to return valid stored procedures 
                -- ===================================================================================
                      CREATE PROCEDURE [dbo].[a_sp_BI_Get_SPs]
                          @SELECTITEM_SP_Name VARCHAR(50)
                      AS
                            SELECT name as [value], name as [text] FROM sys.procedures 
                                  WHERE (@SELECTITEM_SP_Name = '' or name like @SELECTITEM_SP_Name)
                            ORDER BY name</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- ===========================================================
                -- Author:        R. Blomstrand
                -- Create date: 23/09/2008
                -- Description:   Used by Batch-It to Insert batch types
                -- ===========================================================
                CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypes_Insert]
                      (
                            @BatchType varchar(255),
                            @License   varchar(255),
                            @Sequence  int
                      )
                AS
                      SET NOCOUNT OFF;
                      
                      INSERT INTO [dbo].[BI_BatchTypes]
                                     ([BatchType]
                                     ,[License]
                                     ,[Sequence])
                             VALUES
                                     (@BatchType
                                     ,@License
                                     ,@Sequence)
                
                      IF @@ERROR &gt; 0 BEGIN
                                  RAISERROR ('Insert BI_BatchTypes Failed',16,1)
                                  ROLLBACK TRANSACTION
                                  RETURN 1
                      END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- ===========================================================
                -- Author:        R. Blomstrand
                -- Create date: 23/09/2008
                -- Description:   Used by Batch-It to delete batch types
                -- ===========================================================
                CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypes_Delete]
                      (
                            @BatchType varchar(255)
                      )
                AS
                      SET NOCOUNT OFF;
                      
                      DELETE [dbo].[BI_BatchTypes]
                            WHERE [BatchType] = @BatchType
                
                      IF @@ERROR &gt; 0 BEGIN
                                  RAISERROR ('Delete BI_BatchTypes Failed',16,1)
                                  ROLLBACK TRANSACTION
                                  RETURN 1
                      END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- =============================================
                -- Author:        R. Blomstrand
                -- Create date: 05/09/2008
                -- Description:   Used by Batch-It
                -- =============================================
                CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypesSetup_Select]
                (
                      @BatchType  varchar(255)
                )
                AS
                      SELECT [BatchType],
                               [ApproveSP],
                           [ApproveStatus],
                               [ProcessSP],
                           [ProcessStatus],
                               [HeadRowSetupSP],
                               [LineRowSetupSP],
                               [DistrRowSetupSP],
                               [HeadRowSelectSP],
                               [LineRowSelectSP],
                               [DistrRowSelectSP],
                               [HeadValidationSP],
                               [LinesValidationSP],
                               [DistrValidationSP],
                               [AfterCloseLinesSP],
                               [AfterCloseDistrSP],
                           [HeadValue1Descr],
                           [HeadValue2Descr],
                           [HeadValue3Descr],
                           [HeadValue4Descr],
                           [LineValue1Descr],
                           [LineValue2Descr],
                           [LineValue3Descr],
                           [LineValue4Descr],
                           [DistrValue1Descr],
                           [DistrValue2Descr],
                           [DistrValue3Descr],
                           [DistrValue4Descr],
                           [HeadValidationStatus],
                           [LinesValidationStatus],
                           [DistrValidationStatus],
                           [HeadCalculationSP],
                           [HeadCalculationStatus],
                           [LinesCalculationSP],
                           [LinesCalculationStatus],
                           [DistrCalculationSP],
                           [DistrCalculationStatus]
                            FROM BI_BatchTypes 
                            WHERE BatchType = @BatchType
                      ORDER BY Sequence</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- =============================================================
                -- Author:        R. Blomstrand
                -- Create date: 05/09/2008
                -- Description:   Used by Batch-It to update the various SPs and
                --              other setup entries defined against a batch type
                -- =============================================================
                CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypesSetup_Update]
                      (
                            @BatchType                    varchar(255),
                            @ApproveSP                    varchar(255),
                            @ApproveStatus                varchar(50),
                            @ProcessSP                    varchar(255),
                            @ProcessStatus                varchar(50),
                            @HeadRowSetupSP               varchar(255),
                            @LineRowSetupSP               varchar(255),
                            @DistrRowSetupSP        varchar(255),
                            @HeadRowSelectSP        varchar(255),
                            @LineRowSelectSP        varchar(255),
                            @DistrRowSelectSP       varchar(255),
                            @HeadValidationSP       varchar(255),
                            @LinesValidationSP            varchar(255),
                            @DistrValidationSP            varchar(255),
                            @AfterCloseLinesSP            varchar(255),
                            @AfterCloseDistrSP            varchar(255),
                        @HeadValue1Descr            varchar(50),
                        @HeadValue2Descr            varchar(50),
                        @HeadValue3Descr            varchar(50),
                        @HeadValue4Descr            varchar(50),
                        @LineValue1Descr            varchar(50),
                        @LineValue2Descr            varchar(50),
                        @LineValue3Descr            varchar(50),
                        @LineValue4Descr            varchar(50),
                        @DistrValue1Descr           varchar(50),
                        @DistrValue2Descr           varchar(50),
                        @DistrValue3Descr           varchar(50),
                        @DistrValue4Descr           varchar(50),
                            @HeadValidationStatus   varchar(50),
                            @LinesValidationStatus  varchar(50),
                            @DistrValidationStatus  varchar(50),
                            @HeadCalculationSP            varchar(255),
                            @HeadCalculationStatus  varchar(50),
                            @LinesCalculationSP           varchar(255),
                            @LinesCalculationStatus varchar(50),
                            @DistrCalculationSP           varchar(255),
                            @DistrCalculationStatus varchar(50)
                )
                AS
                      SET NOCOUNT OFF;
                      
                      UPDATE BI_BatchTypes
                            SET ApproveSP                       = @ApproveSP, 
                                  ApproveStatus                 = @ApproveStatus,
                                  ProcessSP                     = @ProcessSP,
                                  ProcessStatus                 = @ProcessStatus,
                                  HeadRowSetupSP                = @HeadRowSetupSP,
                                  LineRowSetupSP                = @LineRowSetupSP,
                                  DistrRowSetupSP               = @DistrRowSetupSP,
                                  HeadRowSelectSP               = @HeadRowSelectSP,
                                  LineRowSelectSP               = @LineRowSelectSP,
                                  DistrRowSelectSP        = @DistrRowSelectSP,
                                HeadValidationSP          = @HeadValidationSP,
                                LinesValidationSP         = @LinesValidationSP,
                                DistrValidationSP         = @DistrValidationSP,
                                AfterCloseLinesSP         = @AfterCloseLinesSP,
                                  AfterCloseDistrSP       = @AfterCloseDistrSP,
                              HeadValue1Descr             = @HeadValue1Descr,
                                HeadValue2Descr                 = @HeadValue2Descr,
                                  HeadValue3Descr               = @HeadValue3Descr,
                                  HeadValue4Descr               = @HeadValue4Descr,
                              LineValue1Descr             = @LineValue1Descr,
                                LineValue2Descr                 = @LineValue2Descr,
                                  LineValue3Descr               = @LineValue3Descr,
                                  LineValue4Descr               = @LineValue4Descr,
                              DistrValue1Descr            = @DistrValue1Descr,
                                DistrValue2Descr          = @DistrValue2Descr,
                                  DistrValue3Descr        = @DistrValue3Descr,
                                  DistrValue4Descr        = @DistrValue4Descr,
                                  HeadValidationStatus    = @HeadValidationStatus,
                                  LinesValidationStatus   = @LinesValidationStatus,
                                  DistrValidationStatus   = @DistrValidationStatus,
                                  HeadCalculationSP       = @HeadCalculationSP,
                                  HeadCalculationStatus   = @HeadCalculationStatus,
                                  LinesCalculationSP            = @LinesCalculationSP,
                                  LinesCalculationStatus  = @LinesCalculationStatus,
                                  DistrCalculationSP            = @DistrCalculationSP,
                                  DistrCalculationStatus  = @DistrCalculationStatus
                      WHERE BatchType = @BatchType
                
                      IF @@ERROR &gt; 0 BEGIN
                                  RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
                                  ROLLBACK TRANSACTION
                                  RETURN 1
                      END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Setup_New_Access] 
                -- This stored procedure is used to re-create all access permutations
                -- To run: EXEC a_sp_BI_Setup_New_Access
                AS 
                SET NOCOUNT ON;
                SET XACT_ABORT ON;
                BEGIN
                      BEGIN TRANSACTION;
                
                      ALTER TABLE [dbo].[BI_RoleAccess] DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access] 
                      
                      -- Delete existing access
                      DELETE [dbo].[BI_Access]
                
                       ----------------------------------------------------------
                      -- Insert Access not related to customizable batch screens
                      ----------------------------------------------------------
                      INSERT INTO [dbo].[BI_Access]([AccessId], [AccessDescr])
                      SELECT 'menuConfiguration', 'Configuration Menu Function' UNION ALL
                      SELECT 'menuBatchTypes', 'Batch Types Access Menu Option' UNION ALL
                      SELECT 'menuBatchScreenSetup', 'Batch Screen Setup Menu Option' UNION ALL
                      SELECT 'menuBatchEntry', 'Batch Entry Menu Option' UNION ALL
                      SELECT 'menuReports', 'Report Menu Option' UNION ALL
                      SELECT 'Batch Types Update', 'Batch Types - Update license' UNION ALL
                      SELECT 'menuAccess', 'Security Access Menu Option' UNION ALL
                      SELECT 'Batch Screen Setup Update', 'Batch Screen Setup - Update existing entries'
                
                      ------------------------------
                      -- Insert Access per BatchType
                      ------------------------------
                      INSERT INTO [dbo].[BI_Access]([AccessId], [AccessDescr])
                      SELECT BatchType, BatchType + ' Access Screen' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Add', BatchType + ' - Add new entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Delete', BatchType + ' - Delete existing entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Update', BatchType + ' - Update existing entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' tsbOpen', BatchType + ' - Open Lines Screen' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' tsbCalculate', BatchType + ' - Calculate Batches' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' tsbValidate', BatchType + ' - Validate Batches' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' tsbApprove', BatchType + ' - Approve Batches' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' tsbProcess', BatchType + ' - Process Batches' from BI_BatchTypes UNION ALL
                
                      SELECT BatchType + ' Lines Add', BatchType + ' Lines - Add new entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Lines Delete', BatchType + ' Lines - Delete existing entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Lines Update', BatchType + ' Lines - Update existing entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Lines tsbOpen', BatchType + ' Lines - Open Distribution Screen' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Lines tsbCalculate', BatchType + ' Lines - Calculate Lines' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Lines tsbValidate', BatchType + ' Lines - Validate Lines' from BI_BatchTypes UNION ALL
                
                      SELECT BatchType + ' Distributions Add', BatchType + ' Distributions - Add new entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Distributions Delete', BatchType + ' Distributions - Delete existing entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Distributions Update', BatchType + ' Distributions - Update existing entries' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Distributions tsbCalculate', BatchType + ' Distributions - Calculate Distributions' from BI_BatchTypes UNION ALL
                      SELECT BatchType + ' Distributions tsbValidate', BatchType + ' Distributions - Validate Distributions' from BI_BatchTypes UNION ALL
                
                      SELECT 'Rpt Cat ' + RptCategoryID, 'Report Category - ' + RptCategoryDescr from BI_RPTCategories
                
                      -- Delete existing roles referring to access
                      DELETE [dbo].[BI_RoleAccess]
                            WHERE NOT EXISTS (SELECT 'x' FROM [dbo].[BI_Access] a where a.[AccessId] = [dbo].[BI_RoleAccess].[AccessId])
                
                      ALTER TABLE [dbo].[BI_RoleAccess]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY([AccessId])
                      REFERENCES [dbo].[BI_Access] ([AccessId])
                      
                      ALTER TABLE [dbo].[BI_RoleAccess] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
                      
                
                      COMMIT;
                      RAISERROR (N'[dbo].[BI_Access]: Insert all access: 1.....Done!', 10, 1) WITH NOWAIT;
                END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Roles_Select] 
                    @RoleId VARCHAR(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [RoleId], [RoleDescr] 
                      FROM   [dbo].[BI_Roles] 
                      WHERE  ([RoleId] = @RoleId OR @RoleId IS NULL)
                      ORDER BY [RoleDescr]
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Roles_Insert] 
                    @RoleId varchar(50),
                    @RoleDescr varchar(150)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      INSERT INTO [dbo].[BI_Roles] ([RoleId], [RoleDescr])
                      SELECT @RoleId, @RoleDescr
                      
                      -- Begin Return Select - do not remove
                      SELECT [RoleId], [RoleDescr]
                      FROM   [dbo].[BI_Roles]
                      WHERE  [RoleId] = @RoleId
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Roles_Update] 
                    @RoleId varchar(50),
                    @RoleDescr varchar(150)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      UPDATE [dbo].[BI_Roles]
                      SET    [RoleId] = @RoleId, [RoleDescr] = @RoleDescr
                      WHERE  [RoleId] = @RoleId
                      
                      -- Begin Return Select - do not remove
                      SELECT [RoleId], [RoleDescr]
                      FROM   [dbo].[BI_Roles]
                      WHERE  [RoleId] = @RoleId     
                      -- End Return Select - do not remove
                
                      COMMIT TRAN</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Roles_Delete] 
                    @RoleId varchar(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_Roles]
                      WHERE  [RoleId] = @RoleId
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Select] 
                    @RptCategoryID      VARCHAR(50),
                      @BatchReport      BIT,
                      @BatchType        VARCHAR(50),
                      @BatchLevel       CHAR(1)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT      [RptCategoryID], [RptCategoryDescr], [Sequence], 
                                  [BatchReport], [BatchType], [BatchLevel]
                      FROM   [dbo].[BI_RPTCategories] 
                      WHERE  (@RptCategoryID IS NULL OR [RptCategoryID] = @RptCategoryID)
                      AND  [BatchReport] = @BatchReport
                      AND  (@BatchType IS NULL OR [BatchType] = @BatchType)
                      AND  (@BatchLevel IS NULL OR [BatchLevel] = @BatchLevel)
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Insert] 
                    @RptCategoryID varchar(50),
                    @RptCategoryDescr varchar(200),
                    @Sequence int,
                    @BatchReport bit,
                    @BatchType varchar(50),
                    @BatchLevel char(1)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      INSERT INTO [dbo].[BI_RPTCategories] ([RptCategoryID], [BatchLevel], [BatchReport], [BatchType], [RptCategoryDescr], [Sequence])
                      SELECT @RptCategoryID, @BatchLevel, @BatchReport, @BatchType, @RptCategoryDescr, @Sequence
                      
                      -- Begin Return Select - do not remove
                      SELECT      [RptCategoryID], [RptCategoryDescr], [Sequence], 
                                  [BatchReport], [BatchType], [BatchLevel]
                      FROM   [dbo].[BI_RPTCategories] 
                      WHERE  [RptCategoryID] = @RptCategoryID
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Update] 
                    @RptCategoryID varchar(50),
                    @RptCategoryDescr varchar(200),
                    @Sequence int,
                    @BatchReport bit,
                    @BatchType varchar(50),
                    @BatchLevel char(1)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      UPDATE [dbo].[BI_RPTCategories]
                      SET    [RptCategoryID] = @RptCategoryID, [BatchLevel] = @BatchLevel, [BatchReport] = @BatchReport, [BatchType] = @BatchType, [RptCategoryDescr] = @RptCategoryDescr, [Sequence] = @Sequence
                      WHERE  [RptCategoryID] = @RptCategoryID
                      
                      -- Begin Return Select - do not remove
                      SELECT      [RptCategoryID], [RptCategoryDescr], [Sequence], 
                                  [BatchReport], [BatchType], [BatchLevel]
                      FROM   [dbo].[BI_RPTCategories]
                      WHERE  [RptCategoryID] = @RptCategoryID   
                      -- End Return Select - do not remove
                
                      COMMIT TRAN</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Delete] 
                    @RptCategoryID varchar(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_RPTCategories]
                      WHERE  [RptCategoryID] = @RptCategoryID
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Access_Select] 
                    @AccessId VARCHAR(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [AccessId], [AccessDescr] 
                      FROM   [dbo].[BI_Access] 
                      WHERE  ([AccessId] = @AccessId OR @AccessId IS NULL) 
                      ORDER BY [AccessDescr]
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>-- =============================================
                -- Author:        Robert Blomstrand
                -- Create date: 24/10/2008
                -- Description:   Select filter information (with defaults if requested)
                -- =============================================
                CREATE PROCEDURE [dbo].[a_sp_BI_FiltersDefault_Select] 
                      @BatchType varchar(50),
                      @BatchLevel char(1),
                      @GetMyDefault int = 0, 
                      @MineOnly int = 0, 
                      @InclAssigned int = 0
                AS
                BEGIN
                
                
                      -- SET NOCOUNT ON added to prevent extra result sets from
                      -- interfering with SELECT statements.
                      SET NOCOUNT ON;
                      DECLARE @MyRole varchar(50)
                
                      IF @GetMyDefault = 1 BEGIN
                            -- Get my role ID (use in criteria)
                            SELECT @MyRole = max(RoleID) 
                                  FROM BI_Users 
                            WHERE UserId = SYSTEM_USER
                
                            -- Select all filters that are defaults for user or users role
                            -- Note! Ordering to ensure that filters against user comes
                            -- before filters against users role
                            SELECT      DISTINCT f.[FilterID], f.[BatchType], f.[BatchLevel], f.[FilterDescr], f.[FilterSQL], 
                                        ISNULL(fa.[AssignToRole], NULL) [AssignToRole], ISNULL(fa.[RoleDefault],0) [RoleDefault], 
                                        ISNULL(fa.[AssignToUser], NULL) [AssignToUser], ISNULL(fa.[UserDefault],0) [UserDefault]
                                  FROM [BI_Filters] f 
                                        JOIN [BI_FilterAssigned] fa ON (fa.FilterID = f.FilterID)
                            WHERE f.[BatchType] = @BatchType AND
                                        f.[BatchLevel] = @BatchLevel AND
                                        ((fa.[AssignToRole] = @MyRole AND fa.RoleDefault = 1)
                                        OR 
                                        (fa.[AssignToUser] = SYSTEM_USER AND fa.UserDefault = 1))
                            ORDER BY [UserDefault] desc
                      END
                      ELSE BEGIN
                            -- Not just selecting my default SQL
                            IF @MineOnly = 0 BEGIN
                                  IF @InclAssigned = 1 BEGIN
                                        -- INCLUDE ASSIGNED, ALL (NOT JUST MY) FILTERS
                                        SELECT      DISTINCT f.[FilterID], f.[BatchType], f.[BatchLevel], f.[FilterDescr], f.[FilterSQL], 
                                                    ISNULL(fa.[AssignToRole], NULL) [AssignToRole], ISNULL(fa.[RoleDefault],0) [RoleDefault], 
                                                    ISNULL(fa.[AssignToUser], NULL) [AssignToUser], ISNULL(fa.[UserDefault],0) [UserDefault]
                                              FROM [BI_Filters] f 
                                                    LEFT OUTER JOIN [BI_FilterAssigned] fa ON (fa.FilterID = f.FilterID)
                                        WHERE f.[BatchType] = @BatchType AND
                                                    f.[BatchLevel] = @BatchLevel
                                        ORDER BY f.[FilterDescr]
                                  END
                                  ELSE BEGIN
                                        -- DO NOT INCLUDE ASSIGNED, ALL (NOT JUST MY) FILTERS
                                        SELECT      DISTINCT f.[FilterID], f.[BatchType], f.[BatchLevel], f.[FilterDescr], f.[FilterSQL], 
                                                    NULL [AssignToRole], 0 [RoleDefault], 
                                                    NULL [AssignToUser], 0 [UserDefault]
                                              FROM [BI_Filters] f
                                        WHERE f.[BatchType] = @BatchType AND
                                                    f.[BatchLevel] = @BatchLevel
                                        ORDER BY f.[FilterDescr]
                                  END
                            END
                            ELSE BEGIN
                                  -- Get my role ID (use in criteria)
                                  SELECT @MyRole = max(RoleID) 
                                        FROM BI_Users 
                                  WHERE UserId = SYSTEM_USER
                
                                  IF @InclAssigned = 1 BEGIN
                                        -- INCLUDE ASSIGNED, JUST MY FILTERS
                                        SELECT      DISTINCT f.[FilterID], f.[BatchType], f.[BatchLevel], f.[FilterDescr], f.[FilterSQL], 
                                                    ISNULL(fa.[AssignToRole], NULL) [AssignToRole], ISNULL(fa.[RoleDefault],0) [RoleDefault], 
                                                    ISNULL(fa.[AssignToUser], NULL) [AssignToUser], ISNULL(fa.[UserDefault],0) [UserDefault]
                                              FROM [BI_Filters] f 
                                                    LEFT OUTER JOIN [BI_FilterAssigned] fa ON (fa.FilterID = f.FilterID)
                                        WHERE f.[BatchType] = @BatchType AND
                                                    f.[BatchLevel] = @BatchLevel AND
                                                    (fa.[AssignToRole] = @MyRole OR fa.[AssignToUser] = SYSTEM_USER)
                                        ORDER BY f.[FilterDescr]
                                  END
                                  ELSE BEGIN
                                        -- DO NOT INCLUDE ASSIGNED, JUST MY FILTERS
                                        SELECT      DISTINCT f.[FilterID], f.[BatchType], f.[BatchLevel], f.[FilterDescr], f.[FilterSQL], 
                                                    NULL [AssignToRole], 0 [RoleDefault], 
                                                    NULL [AssignToUser], 0 [UserDefault]
                                              FROM [BI_Filters] f 
                                                    JOIN [BI_FilterAssigned] fa ON (fa.FilterID = f.FilterID)
                                        WHERE f.[BatchType] = @BatchType AND
                                                    f.[BatchLevel] = @BatchLevel AND
                                                    (fa.[AssignToRole] = @MyRole OR fa.[AssignToUser] = SYSTEM_USER)
                                        ORDER BY f.[FilterDescr]
                                  END
                            END
                      END
                END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Filters_Insert]
                      @OldFilterID int,
                      @BatchType varchar(50),
                      @BatchLevel char(1),
                    @FilterDescr varchar(255),
                      @FilterOwner varchar(255),
                    @FilterSQL varchar(MAX)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      IF @OldFilterID = 0 BEGIN
                            INSERT INTO [dbo].[BI_Filters] ([BatchType], [BatchLevel], [FilterDescr], [FilterOwner], [FilterSQL])
                            SELECT @BatchType, @BatchLevel, @FilterDescr, SYSTEM_USER, @FilterSQL
                
                            SELECT [FilterID], [BatchType], [BatchLevel], [FilterDescr], [FilterOwner], [FilterSQL] 
                            FROM   [dbo].[BI_Filters] 
                            WHERE [FilterID] = SCOPE_IDENTITY()
                      END
                      ELSE BEGIN
                            UPDATE [dbo].[BI_Filters]
                            SET         [FilterDescr] = @FilterDescr,
                                        [FilterSQL] = @FilterSQL
                            WHERE  [FilterID] = @OldFilterID
                
                            SELECT [FilterID], [BatchType], [BatchLevel], [FilterDescr], [FilterOwner], [FilterSQL] 
                            FROM   [dbo].[BI_Filters] 
                            WHERE [FilterID] = @OldFilterID
                      END
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Filters_Select] 
                    @FilterID INT
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [FilterID], [BatchType], [BatchLevel], [FilterDescr], [FilterOwner], [FilterSQL] 
                      FROM   [dbo].[BI_Filters] 
                      WHERE  ([FilterID] = @FilterID OR @FilterID IS NULL) 
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Reports_Select] 
                    @ReportName VARCHAR(100),
                    @RptCategoryID VARCHAR(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [ReportName], [RptCategoryID], [ReportURL], [Sequence] 
                      FROM   [dbo].[BI_Reports] 
                      WHERE  ([ReportName] = @ReportName OR @ReportName IS NULL) 
                             AND ([RptCategoryID] = @RptCategoryID OR @RptCategoryID IS NULL) 
                      ORDER BY [Sequence]
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Reports_Insert] 
                    @ReportName varchar(100),
                    @RptCategoryID varchar(50),
                    @ReportURL varchar(500),
                    @Sequence int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      INSERT INTO [dbo].[BI_Reports] ([ReportName], [RptCategoryID], [ReportURL], [Sequence])
                      SELECT @ReportName, @RptCategoryID, @ReportURL, @Sequence
                      
                      -- Begin Return Select - do not remove
                      SELECT [ReportName], [RptCategoryID], [ReportURL], [Sequence]
                      FROM   [dbo].[BI_Reports]
                      WHERE  [ReportName] = @ReportName
                             AND [RptCategoryID] = @RptCategoryID
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Reports_Update] 
                    @ReportName varchar(100),
                    @RptCategoryID varchar(50),
                    @ReportURL varchar(500),
                    @Sequence int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      UPDATE [dbo].[BI_Reports]
                      SET    [ReportName] = @ReportName, [RptCategoryID] = @RptCategoryID, [ReportURL] = @ReportURL, [Sequence] = @Sequence
                      WHERE  [ReportName] = @ReportName
                             AND [RptCategoryID] = @RptCategoryID
                      
                      -- Begin Return Select - do not remove
                      SELECT [ReportName], [RptCategoryID], [ReportURL], [Sequence]
                      FROM   [dbo].[BI_Reports]
                      WHERE  [ReportName] = @ReportName
                             AND [RptCategoryID] = @RptCategoryID     
                      -- End Return Select - do not remove
                
                      COMMIT TRAN</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Reports_Delete] 
                    @ReportName varchar(100),
                    @RptCategoryID varchar(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_Reports]
                      WHERE  [ReportName] = @ReportName
                             AND [RptCategoryID] = @RptCategoryID
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RoleAccess_Select] 
                    @AccessId VARCHAR(50),
                    @RoleId VARCHAR(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [AccessId], [RoleId] 
                      FROM   [dbo].[BI_RoleAccess] 
                      WHERE  ([AccessId] = @AccessId OR @AccessId IS NULL) 
                             AND ([RoleId] = @RoleId OR @RoleId IS NULL) 
                      ORDER BY [AccessId], [RoleId]
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RoleAccess_Insert] 
                    @AccessId varchar(50),
                    @RoleId varchar(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      INSERT INTO [dbo].[BI_RoleAccess] ([AccessId], [RoleId])
                      SELECT @AccessId, @RoleId
                      
                      -- Begin Return Select - do not remove
                      SELECT [AccessId], [RoleId]
                      FROM   [dbo].[BI_RoleAccess]
                      WHERE  [AccessId] = @AccessId
                             AND [RoleId] = @RoleId
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RoleAccess_Delete] 
                    @AccessId varchar(50),
                    @RoleId varchar(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_RoleAccess]
                      WHERE  ([AccessId] = @AccessId OR @AccessId IS NULL) 
                             AND ([RoleId] = @RoleId OR @RoleId IS NULL) 
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Check_Access] 
                    @AccessId     VARCHAR(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      DECLARE @CountAccessUsers INT
                
                      -- Initialize count of users who can get to security access screen
                      SELECT @CountAccessUsers = 999
                
                      -- Count users who can get to security access screen (both Configuration
                      -- menu option and Access screen
                      IF @AccessId = 'menuConfiguration' OR @AccessId = 'menuAccess' BEGIN
                            SELECT @CountAccessUsers = COUNT(*)
                                  FROM BI_Users u, BI_RoleAccess ra
                            WHERE ra.RoleId = u.RoleId AND
                                        ra.AccessId = 'menuConfiguration'
                
                            IF @CountAccessUsers &gt; 0 BEGIN
                                  SELECT @CountAccessUsers = COUNT(*)
                                        FROM BI_Users u, BI_RoleAccess ra
                                  WHERE ra.RoleId = u.RoleId AND
                                              ra.AccessId = 'menuAccess'
                            END
                      END
                
                      IF @CountAccessUsers = 0 BEGIN
                            -- If checking for access to Configuration menu option or to
                            -- Access screen, and if no other users have access to both of
                            -- these, then grant the user access to both of these.
                            -- Purpose is to allow initial users access to this security
                            -- screen until somebody has been set up as the administrator
                            -- of this.
                            SELECT SYSTEM_USER UserId, 1 AccessGranted
                      END
                      ELSE BEGIN
                            -- Either not checking access to Configuration menu option / Access
                            -- screen, or else other users have access to these.
                            SELECT SYSTEM_USER UserId, COUNT(*) AccessGranted
                                  FROM BI_Users u, BI_RoleAccess ra
                            WHERE ra.RoleId = u.RoleId AND
                                        ra.AccessId = @AccessId AND
                                        u.UserId = SYSTEM_USER
                      END
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>-- =======================================================================
                -- Author:        Robert Blomstrand
                -- Create date: 01/09/2008
                -- Description:   Obtain user details either of logged on user, all users or
                --              specified user depending on parameter
                -- =======================================================================
                CREATE PROCEDURE [dbo].[a_sp_BI_UserDetails] 
                    @SelectFor varchar(50)
                AS
                BEGIN
                      -- SET NOCOUNT ON added to prevent extra result sets from
                      -- interfering with SELECT statements.
                      SET NOCOUNT ON;
                
                      IF @SelectFor = 'ME' BEGIN
                            -- Return user details of current user
                            SELECT [UserId]
                                    ,[FirstName]
                                    ,[SurName]
                                    ,[RoleId]
                              FROM [BI_Users]
                            WHERE [UserId] = SYSTEM_USER
                      END
                      ELSE IF @SelectFor = 'ALL' BEGIN
                            -- Return user details of all users
                            SELECT [UserId]
                                    ,[FirstName]
                                    ,[SurName]
                                    ,[RoleId]
                              FROM [BI_Users]
                      END
                      ELSE BEGIN
                            -- Return user details of specified user
                            SELECT [UserId]
                                    ,[FirstName]
                                    ,[SurName]
                                    ,[RoleId]
                              FROM [BI_Users]
                            WHERE [UserId] = @SelectFor
                      END
                END</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Users_Insert] 
                    @UserId varchar(255),
                    @FirstName varchar(255),
                    @RoleId varchar(50),
                    @SurName varchar(255)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      INSERT INTO [dbo].[BI_Users] ([UserId], [FirstName], [RoleId], [SurName])
                      SELECT @UserId, @FirstName, @RoleId, @SurName
                      
                      -- Begin Return Select - do not remove
                      SELECT [UserId], [FirstName], [RoleId], [SurName]
                      FROM   [dbo].[BI_Users]
                      WHERE  [UserId] = @UserId
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Users_Update] 
                    @UserId varchar(255),
                    @FirstName varchar(255),
                    @RoleId varchar(50),
                    @SurName varchar(255)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      UPDATE [dbo].[BI_Users]
                      SET    [UserId] = @UserId, [FirstName] = @FirstName, [RoleId] = @RoleId, [SurName] = @SurName
                      WHERE  [UserId] = @UserId
                      
                      -- Begin Return Select - do not remove
                      SELECT [UserId], [FirstName], [RoleId], [SurName]
                      FROM   [dbo].[BI_Users]
                      WHERE  [UserId] = @UserId     
                      -- End Return Select - do not remove
                
                      COMMIT TRAN</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Users_Delete] 
                    @UserId varchar(255)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_Users]
                      WHERE  [UserId] = @UserId
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Users_Select] 
                    @UserId VARCHAR(255)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [UserId], [FirstName], [RoleId], [SurName] 
                      FROM   [dbo].[BI_Users] 
                      WHERE  ([UserId] = @UserId OR @UserId IS NULL) 
                      ORDER BY [UserId]
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Users_Select_Name] 
                    @UserId VARCHAR(255)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [UserId], LTRIM([FirstName] + ' ' + [SurName]) [Name]
                      FROM   [dbo].[BI_Users] 
                      ORDER BY [Name]
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_FilterCriteria_Insert] 
                    @FilterID int,
                    @SearchID int,
                    @SearchField varchar(255),
                    @SearchCondition varchar(50),
                    @SearchValue varchar(255),
                    @SearchJoin varchar(10)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                      
                      INSERT INTO [dbo].[BI_FilterCriteria] ([FilterID], [SearchID], [SearchField], [SearchCondition], [SearchValue], [SearchJoin])
                      SELECT @FilterID, @SearchID, @SearchField, @SearchCondition, @SearchValue, @SearchJoin
                      
                      -- Begin Return Select - do not remove
                      SELECT [FilterID], [SearchID], [SearchField], [SearchCondition], [SearchValue], [SearchJoin]
                      FROM   [dbo].[BI_FilterCriteria]
                      WHERE  [FilterID] = @FilterID
                             AND [SearchID] = @SearchID
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_FilterAssigned_Select] 
                    @FilterID int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT [FilterID], [AssignID], [AssignToRole], [AssignToUser], [RoleDefault], [UserDefault] 
                      FROM   [dbo].[BI_FilterAssigned] 
                      WHERE  [FilterID] = @FilterID
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_FilterAssigned_Insert] 
                    @FilterID int,
                    @AssignID int,
                    @AssignToRole varchar(50),
                    @AssignToUser varchar(255),
                    @RoleDefault int,
                    @UserDefault int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      INSERT INTO [dbo].[BI_FilterAssigned] ([AssignID], [FilterID], [AssignToRole], [AssignToUser], [RoleDefault], [UserDefault])
                      SELECT @AssignID, @FilterID, @AssignToRole, @AssignToUser, @RoleDefault, @UserDefault
                      
                      -- Begin Return Select - do not remove
                      SELECT [FilterID], [AssignID], [AssignToRole], [AssignToUser], [RoleDefault], [UserDefault] 
                      FROM   [dbo].[BI_FilterAssigned]
                      WHERE  [AssignID] = @AssignID
                             AND [FilterID] = @FilterID
                      -- End Return Select - do not remove
                               
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_FilterAssigned_Delete] 
                    @FilterID int
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                      
                      BEGIN TRAN
                
                      DELETE
                      FROM   [dbo].[BI_FilterAssigned]
                      WHERE  [FilterID] = @FilterID
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>/*************************************/
                /************* PROCEDURES ************/
                /*************************************/
                -- =============================================
                -- Author:        R. Blomstrand
                -- Create date: 18/08/2008
                -- Description:   Used by Batch-It
                -- =============================================
                      CREATE PROCEDURE [dbo].[a_sp_BI_Get_Columns]
                      (
                            @BatchType varchar(50),
                            @BatchLevel char(1),
                            @Table varchar(100)
                      )
                      AS
                
                      -- If no table specified (because just entered form and user not yet selected from drop-down)
                      -- then get the table name used for existing setup (if any)
                      IF LTRIM(@Table) = '' BEGIN
                      SELECT @Table = max([Table]) 
                                  FROM BI_Columns bic
                          WHERE bic.BatchType = @BatchType
                            AND bic.[BatchLevel] = @BatchLevel
                      END
                
                      SELECT @BatchType BatchType, @BatchLevel BatchLevel, @Table [Table],
                             name [Column], null [Rename To], column_id [Sequence], 
                           null [LookUp_SP], null [Select_SP], null [Validation_SP],
                               0 [Hide], 0 [ReadOnly], 0 [ReadOnly Existing], 0 [Filter On],
                           0 [Required], 0 [Batch ID], 0 [Line ID], 0 [Distr ID], 
                               0 [Status Col]
                          FROM sys.columns sc
                        WHERE object_id = OBJECT_ID(@Table)
                          AND NOT EXISTS (SELECT 'x' FROM BI_Columns bic
                                            WHERE bic.BatchType = @BatchType
                                            AND bic.[BatchLevel] = @BatchLevel
                                              AND bic.[Table] = @Table
                                              AND bic.[Column] = sc.name)
                      UNION
                      SELECT BatchType, [BatchLevel], [Table], [Column], [Rename To], [Sequence], 
                               [LookUp_SP], [Select_SP], [Validation_SP],
                           [Hide], [ReadOnly], [ReadOnly Existing], [Filter On], [Required],
                           [Batch ID], [Line ID], [Distr ID], 
                               [Status Col]
                          FROM BI_Columns bic
                        WHERE BatchType = @BatchType
                        AND [BatchLevel] = @BatchLevel
                          AND [Table] = @Table
                            AND EXISTS (SELECT 'x' FROM sys.columns sc
                                      WHERE object_id = OBJECT_ID(bic.[Table])
                                        AND name = bic.[Column])
                      ORDER BY BatchType, [Table], [Sequence]</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_Columns_Delete]
                (
                      @BatchType varchar(50),
                      @BatchLevel char(1)
                )
                AS
                      DELETE [dbo].[BI_Columns]
                      WHERE BatchType = @BatchType
                        AND BatchLevel = @BatchLevel;</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Options_Select] 
                    @Option_Type VARCHAR(50)
                AS 
                      SET NOCOUNT ON 
                      SET XACT_ABORT ON  
                
                      BEGIN TRAN
                
                      SELECT Option_Value [Value], Option_Text [Text]
                      FROM BI_options
                      WHERE Option_Type = @Option_Type
                      ORDER BY Sequence
                
                      COMMIT</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_Columns_Insert]
                (
                      @BatchType varchar(50),
                    @BatchLevel char(1),
                      @Table varchar(100),
                      @Column varchar(100),
                      @RenameTo varchar(100),
                    @Sequence int,
                      @Lookup_SP varchar(100),
                      @Select_SP varchar(100),
                      @Validation_SP varchar(100),
                    @Hide bit,
                      @ReadOnly bit,
                    @ReadOnlyExisting bit,
                      @FilterOn bit,
                      @Required bit,
                      @BatchID bit,
                      @LineID bit,
                      @DistrID bit,
                      @StatusCol bit
                )
                AS
                      SET NOCOUNT OFF;
                      INSERT INTO [dbo].[BI_Columns] 
                      (
                        BatchType, 
                        [BatchLevel], 
                        [Table], 
                        [Column], 
                        [Rename To], 
                        [Sequence], 
                            [LookUp_SP],
                            [Select_SP],
                            [Validation_SP],
                        [Hide],
                            [ReadOnly],
                        [ReadOnly Existing],
                            [Filter On],
                            [Required],
                            [Batch ID],
                            [Line ID],
                            [Distr ID],
                            [Status Col]
                      ) 
                      VALUES 
                      (
                            @BatchType,
                        @BatchLevel,
                            @Table,
                        @Column,
                        @RenameTo,
                        @Sequence,
                            @LookUp_SP,
                            @Select_SP,
                            @Validation_SP,
                        @Hide,
                            @ReadOnly,
                        @ReadOnlyExisting,
                            @FilterOn,
                            @Required,
                            @BatchID,
                            @LineID,
                            @DistrID,
                            @StatusCol
                      )
                
                      IF @@ERROR &gt; 0 BEGIN
                            RAISERROR ('Insert BI_Columns Failed',16,1) WITH LOG
                            ROLLBACK TRANSACTION
                            RETURN 1
                      END
                            
                      EXEC [a_sp_BI_Get_Columns] @BatchType, @Table, @BatchLevel</commandtext>
      <comment>Original Create Batch Objects</comment>
    </command>
  </Version>
  <Version number="1.0.0.1" />
  <Version number="1.0.0.2" />
  <Version number="1.0.0.3" />
  <Version number="1.0.0.4" />
  <Version number="1.0.0.5" />
  <Version number="1.0.0.6">
    <command>
      <commandtext>IF EXISTS(SELECT * FROM sys.tables WHERE NAME = 'BI_Tables')
				BEGIN
				    DROP TABLE [dbo].[BI_Tables]
				END</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [BI_Tables](
					[BatchType] [varchar](50) NOT NULL,
					[BatchLevel] [char](1) NOT NULL,
					[Table] [varchar](100) NOT NULL,
					[Qualifier] [varchar](2000) NULL
				) ON [PRIMARY]</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
    <command>
      <commandtext>INSERT INTO BI_TABLES ([BatchType], [BatchLevel], [Table], [Qualifier])
					SELECT DISTINCT [BatchType], [BatchLevel], [Table], NULL Qualifier FROM [BI_Columns]</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
    <command>
      <commandtext>IF EXISTS(SELECT * FROM sys.procedures WHERE NAME = 'a_sp_BI_Tables_Select')
				BEGIN
				    DROP PROCEDURE [dbo].[a_sp_BI_Tables_Select]
				END</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_Tables_Select]
				(
					@BatchType varchar(50),
					@BatchLevel char(1)
				)
				AS
					IF @BatchLevel IS NULL OR @BatchLevel = '' BEGIN
						SELECT [BatchLevel],
							   [Table],
							   [Qualifier]
						  FROM [dbo].[BI_Tables]
						 WHERE [BatchType]= @BatchType
					END
					ELSE BEGIN
						SELECT [BatchLevel],
							   [Table],
							   [Qualifier]
						  FROM [dbo].[BI_Tables]
						 WHERE [BatchType]= @BatchType
			               AND [BatchLevel] = @BatchLevel
					END</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
    <command>
      <commandtext>IF EXISTS(SELECT * FROM sys.procedures WHERE NAME = 'a_sp_BI_Tables_Update')
				BEGIN
				    DROP PROCEDURE [dbo].[a_sp_BI_Tables_Update]
				END</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_Tables_Update]
				     (
				      @BatchType  varchar(50),
				      @BatchLevel char(1),
				      @Table      varchar(100),
				      @Qualifier  varchar(2000)
				     )
				    AS
				     UPDATE [dbo].[BI_Tables]
				        SET [Table] = @Table,
				         [Qualifier] = @Qualifier
				      WHERE [BatchType]= @BatchType
				        AND [BatchLevel] = @BatchLevel
					
					 IF @@ROWCOUNT = 0 BEGIN
				         INSERT INTO [dbo].[BI_Tables]
							([BatchType], [BatchLevel], [Table], [Qualifier])
							VALUES
							(@BatchType, @BatchLevel, @Table, @Qualifier)
					 END</commandtext>
      <comment>Cater for Qualifier on header/lines/distribution</comment>
    </command>
  </Version>
  <Version number="1.0.0.7" />
  <Version number="1.0.0.8" />
  <Version number="1.0.0.9">
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_RoleAccess_Delete] 
				    @AccessId varchar(255),
				    @RoleId varchar(50)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN

					DELETE
					FROM   [dbo].[BI_RoleAccess]
					WHERE  ([AccessId] = @AccessId OR @AccessId IS NULL) 
					       AND ([RoleId] = @RoleId OR @RoleId IS NULL) 

					COMMIT</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_RoleAccess_Insert] 
				    @AccessId varchar(255),
				    @RoleId varchar(50)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN
					
					INSERT INTO [dbo].[BI_RoleAccess] ([AccessId], [RoleId])
					SELECT @AccessId, @RoleId
					
					SELECT [AccessId], [RoleId]
					FROM   [dbo].[BI_RoleAccess]
					WHERE  [AccessId] = @AccessId
					       AND [RoleId] = @RoleId
				               
					COMMIT</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_RoleAccess_Select] 
				    @AccessId VARCHAR(255),
				    @RoleId VARCHAR(50)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  

					BEGIN TRAN

					SELECT [AccessId], [RoleId] 
					FROM   [dbo].[BI_RoleAccess] 
					WHERE  ([AccessId] = @AccessId OR @AccessId IS NULL) 
					       AND ([RoleId] = @RoleId OR @RoleId IS NULL) 
					ORDER BY [AccessId], [RoleId]

					COMMIT</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_Check_Access] 
				    @AccessId	VARCHAR(255)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  

					BEGIN TRAN

					DECLARE @CountAccessUsers INT

					-- Initialize count of users who can get to security access screen
					SELECT @CountAccessUsers = 999

					-- Count users who can get to security access screen (both Configuration
					-- menu option and Access screen
					IF @AccessId = 'menuConfiguration' OR @AccessId = 'menuAccess' BEGIN
						SELECT @CountAccessUsers = COUNT(*)
							FROM BI_Users u, BI_RoleAccess ra
						WHERE	ra.RoleId = u.RoleId AND
								ra.AccessId = 'menuConfiguration'

						IF @CountAccessUsers &gt; 0 BEGIN
							SELECT @CountAccessUsers = COUNT(*)
								FROM BI_Users u, BI_RoleAccess ra
							WHERE	ra.RoleId = u.RoleId AND
									ra.AccessId = 'menuAccess'
						END
					END

					IF @CountAccessUsers = 0 BEGIN
						-- If checking for access to Configuration menu option or to
						-- Access screen, and if no other users have access to both of
						-- these, then grant the user access to both of these.
						-- Purpose is to allow initial users access to this security
						-- screen until somebody has been set up as the administrator
						-- of this.
						SELECT SYSTEM_USER UserId, 1 AccessGranted
					END
					ELSE BEGIN
						-- Either not checking access to Configuration menu option / Access
						-- screen, or else other users have access to these.
						SELECT SYSTEM_USER UserId, COUNT(*) AccessGranted
							FROM BI_Users u, BI_RoleAccess ra
						WHERE	ra.RoleId = u.RoleId AND
								ra.AccessId = @AccessId AND
								u.UserId = SYSTEM_USER
					END
					COMMIT</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_Access_Select] 
					@AccessId VARCHAR(255)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  

					BEGIN TRAN

					SELECT [AccessId], [AccessDescr] 
					FROM   [dbo].[BI_Access] 
					WHERE  ([AccessId] = @AccessId OR @AccessId IS NULL) 
					ORDER BY [AccessDescr]

					COMMIT</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_RoleAccess
					DROP CONSTRAINT FK_BI_RoleAccess_BI_Roles</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE dbo.Tmp_BI_Access
						(
						AccessId varchar(255) NOT NULL,
						AccessDescr varchar(255) NULL
						)  ON [PRIMARY]</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>IF EXISTS(SELECT * FROM dbo.BI_Access)
					 EXEC('INSERT INTO dbo.Tmp_BI_Access (AccessId, AccessDescr)
						SELECT AccessId, AccessDescr FROM dbo.BI_Access WITH (HOLDLOCK TABLOCKX)')</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_RoleAccess
					DROP CONSTRAINT FK_BI_RoleAccess_BI_Access</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>DROP TABLE dbo.BI_Access</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>EXECUTE sp_rename N'dbo.Tmp_BI_Access', N'BI_Access', 'OBJECT'</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_Access ADD CONSTRAINT
					PK_BI_Access PRIMARY KEY CLUSTERED 
					(
					AccessId
					) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE dbo.Tmp_BI_RoleAccess
					(
					RoleId varchar(50) NOT NULL,
					AccessId varchar(255) NOT NULL
					)  ON [PRIMARY]</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>IF EXISTS(SELECT * FROM dbo.BI_RoleAccess)
					 EXEC('INSERT INTO dbo.Tmp_BI_RoleAccess (RoleId, AccessId)
						SELECT RoleId, AccessId FROM dbo.BI_RoleAccess WITH (HOLDLOCK TABLOCKX)')</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>DROP TABLE dbo.BI_RoleAccess</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>EXECUTE sp_rename N'dbo.Tmp_BI_RoleAccess', N'BI_RoleAccess', 'OBJECT'</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_RoleAccess ADD CONSTRAINT
					PK_BI_RoleAccess PRIMARY KEY CLUSTERED 
					(
					RoleId,
					AccessId
					) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_RoleAccess ADD CONSTRAINT
					FK_BI_RoleAccess_BI_Access FOREIGN KEY
					(
					AccessId
					) REFERENCES dbo.BI_Access
					(
					AccessId
					) ON UPDATE  NO ACTION 
					 ON DELETE  NO ACTION</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_RoleAccess ADD CONSTRAINT
					FK_BI_RoleAccess_BI_Roles FOREIGN KEY
					(
					RoleId
					) REFERENCES dbo.BI_Roles
					(
					RoleId
					) ON UPDATE  NO ACTION 
					 ON DELETE  NO ACTION</commandtext>
      <comment>Cater for larger Access ID to cater for larger batch names</comment>
    </command>
  </Version>
  <Version number="1.0.0.10">
    <command>
      <commandtext>IF NOT EXISTS (select * from sysobjects WHERE id=OBJECT_ID('[dbo].[BI_BatchCategory]'))
					CREATE TABLE [dbo].[BI_BatchCategory](
						[BatchCatCd] [varchar](10) NOT NULL,
						[BatchCatDescr] [varchar](80) NOT NULL,
					 CONSTRAINT [PK_BI_BatchCategory] PRIMARY KEY CLUSTERED 
					(
						[BatchCatCd] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (select * from syscolumns WHERE name = 'BatchCatCd' AND id=OBJECT_ID('[dbo].[BI_BatchTypes]'))
				ALTER TABLE dbo.BI_BatchTypes ADD
					BatchCatCd varchar(10) NULL</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (select * from sysconstraints WHERE constid=OBJECT_ID('FK_BI_BatchTypes_BI_BatchCategory'))
				ALTER TABLE dbo.BI_BatchTypes ADD CONSTRAINT
					FK_BI_BatchTypes_BI_BatchCategory FOREIGN KEY
					(
					BatchCatCd
					) REFERENCES dbo.BI_BatchCategory
					(
					BatchCatCd
					) ON UPDATE  NO ACTION 
					 ON DELETE  NO ACTION</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_BatchCategorySelect]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_BatchCategorySelect] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_BatchCategorySelect] 
				    @BatchCatCd VARCHAR(10)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  

					BEGIN TRAN

					SELECT [BatchCatCd], [BatchCatDescr] 
					FROM   [dbo].[BI_BatchCategory] 
					WHERE  ([BatchCatCd] = @BatchCatCd OR @BatchCatCd IS NULL) 
					ORDER BY [BatchCatCd]

					COMMIT</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_BatchCategoryInsert]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_BatchCategoryInsert] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_BatchCategoryInsert] 
				    @BatchCatCd varchar(10),
				    @BatchCatDescr varchar(80)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN
					
					INSERT INTO [dbo].[BI_BatchCategory] ([BatchCatCd], [BatchCatDescr])
					SELECT @BatchCatCd, @BatchCatDescr
					
					SELECT [BatchCatCd], [BatchCatDescr]
					FROM   [dbo].[BI_BatchCategory]
					WHERE  [BatchCatCd] = @BatchCatCd
				               
					COMMIT</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_BatchCategoryUpdate]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_BatchCategoryUpdate] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_BatchCategoryUpdate] 
				    @BatchCatCd varchar(10),
				    @BatchCatDescr varchar(80)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN

					UPDATE [dbo].[BI_BatchCategory]
					SET    [BatchCatCd] = @BatchCatCd, [BatchCatDescr] = @BatchCatDescr
					WHERE  [BatchCatCd] = @BatchCatCd
					
					SELECT [BatchCatCd], [BatchCatDescr]
					FROM   [dbo].[BI_BatchCategory]
					WHERE  [BatchCatCd] = @BatchCatCd	

					COMMIT TRAN</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_BatchCategoryDelete]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_BatchCategoryDelete] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_BatchCategoryDelete] 
				    @BatchCatCd varchar(10)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN

					DELETE
					FROM   [dbo].[BI_BatchCategory]
					WHERE  [BatchCatCd] = @BatchCatCd

					COMMIT</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypes_Select]
					(
						@LicensedOnly char(1),
						@BatchCatCd   varchar(10)
					)
				AS
					IF @LicensedOnly = 'Y' BEGIN
						SELECT [BatchType],
							   [License],
							   [Sequence]
							FROM BI_BatchTypes 
							WHERE License IS NOT NULL
							  AND (@BatchCatCd IS NULL OR batchcatcd = @BatchCatCd)
						ORDER BY Sequence
					END
					ELSE BEGIN
						SELECT [BatchType],
							   [License],
							   [Sequence]
							FROM BI_BatchTypes 
							WHERE (@BatchCatCd IS NULL OR batchcatcd = @BatchCatCd)
						ORDER BY Sequence
					END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypes_Select]
					(
						@LicensedOnly char(1),
						@BatchCatCd   varchar(10)
					)
				AS
					IF @LicensedOnly = 'Y' BEGIN
						SELECT [BatchType],
							   [License],
							   [Sequence],
							   [BatchCatCd] = ISNULL([BatchCatCd],'(None)')
							FROM BI_BatchTypes 
							WHERE License IS NOT NULL
				              AND (@BatchCatCd IS NULL OR batchcatcd = @BatchCatCd)
						ORDER BY Sequence
					END
					ELSE BEGIN
						SELECT [BatchType],
							   [License],
							   [Sequence],
							   [BatchCatCd] = ISNULL([BatchCatCd],'(None)')
							FROM BI_BatchTypes 
				            WHERE (@BatchCatCd IS NULL OR batchcatcd = @BatchCatCd)
						ORDER BY Sequence
					END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypes_Insert]
					(
						@BatchType  varchar(255),
						@License    varchar(255),
						@Sequence   int,
						@BatchCatCd varchar(255)
					)
				AS
					SET NOCOUNT OFF;
					
					IF @BatchCatCd = '(None)' BEGIN
				        SELECT @BatchCatCd = NULL
				    END

					INSERT INTO [dbo].[BI_BatchTypes]
							   ([BatchType]
							   ,[License]
							   ,[Sequence]
							   ,[BatchCatCd])
						 VALUES
							   (@BatchType
							   ,@License
							   ,@Sequence
							   ,@BatchCatCd)

					IF @@ERROR &gt; 0 BEGIN
							RAISERROR ('Insert BI_BatchTypes Failed',16,1)
							ROLLBACK TRANSACTION
							RETURN 1
					END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypes_Update]
					(
						@BatchType  varchar(255),
						@License    varchar(255),
						@Sequence   int,
						@BatchCatCd varchar(255)
					)
				AS
					SET NOCOUNT OFF;
					
					IF @BatchCatCd = '(None)' BEGIN
				        SELECT @BatchCatCd = NULL
				    END

					UPDATE BI_BatchTypes
						SET License = @License, 
							Sequence = @Sequence,
							BatchCatCd = @BatchCatCd
					WHERE BatchType = @BatchType

					IF @@ERROR &gt; 0 BEGIN
							RAISERROR ('Update BI_BatchTypes Failed',16,1)
							ROLLBACK TRANSACTION
							RETURN 1
					END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_RPTCategories_Select]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_RPTCategories_Select] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Select] 
				    @RptCategoryID	VARCHAR(50),
					@BatchReport	BIT,
					@BatchType		VARCHAR(50),
					@BatchLevel		CHAR(1)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  

					BEGIN TRAN

					SELECT	[RptCategoryID], [RptCategoryDescr], [Sequence], 
							[BatchReport], [BatchType], [BatchLevel]
					FROM   [dbo].[BI_RPTCategories] 
					WHERE  (@RptCategoryID IS NULL OR [RptCategoryID] = @RptCategoryID)
				      AND  (@BatchReport IS NULL OR [BatchReport] = @BatchReport)
				      AND  (@BatchType IS NULL OR [BatchType] = @BatchType)
				      AND  (@BatchLevel IS NULL OR [BatchLevel] = @BatchLevel)

					COMMIT</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_RPTCategories_Update]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_RPTCategories_Update] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Update] 
				    @RptCategoryID varchar(50),
				    @RptCategoryDescr varchar(200),
				    @Sequence int,
				    @BatchReport bit,
				    @BatchType varchar(50),
				    @BatchLevel char(1)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN

					UPDATE [dbo].[BI_RPTCategories]
					SET    [RptCategoryID] = @RptCategoryID, 
						   [BatchLevel] = @BatchLevel, 
						   [BatchReport] = ISNULL(@BatchReport,0), 
						   [BatchType] = @BatchType, 
						   [RptCategoryDescr] = @RptCategoryDescr,
						   [Sequence] = @Sequence
					WHERE  [RptCategoryID] = @RptCategoryID
					
					-- Begin Return Select - do not remove
					SELECT	[RptCategoryID], [RptCategoryDescr], [Sequence], 
							[BatchReport], [BatchType], [BatchLevel]
					FROM   [dbo].[BI_RPTCategories]
					WHERE  [RptCategoryID] = @RptCategoryID	
					-- End Return Select - do not remove

					COMMIT TRAN</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_RPTCategories_Insert]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_RPTCategories_Insert] 
				END</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_RPTCategories_Insert] 
				    @RptCategoryID varchar(50),
				    @RptCategoryDescr varchar(200),
				    @Sequence int,
				    @BatchReport bit,
				    @BatchType varchar(50),
				    @BatchLevel char(1)
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN
					
					INSERT INTO [dbo].[BI_RPTCategories] ([RptCategoryID], 
														  [BatchLevel], 
														  [BatchReport], 
														  [BatchType], 
														  [RptCategoryDescr], 
														  [Sequence])
					SELECT @RptCategoryID, 
						   @BatchLevel, 
						   ISNULL(@BatchReport,0), 
						   @BatchType, 
						   @RptCategoryDescr, 
						   @Sequence
					
					-- Begin Return Select !- do not remove
					SELECT	[RptCategoryID], [RptCategoryDescr], [Sequence], 
							[BatchReport], [BatchType], [BatchLevel]
					FROM   [dbo].[BI_RPTCategories] 
					WHERE  [RptCategoryID] = @RptCategoryID
					-- End Return Select !- do not remove
				               
					COMMIT</commandtext>
      <comment>Cater for categorizing batches</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_Reports_Update] 
				    @ReportName varchar(100),
				    @RptCategoryID varchar(50),
				    @ReportURL varchar(500),
				    @Sequence int
				AS 
					SET NOCOUNT ON 
					SET XACT_ABORT ON  
					
					BEGIN TRAN

					UPDATE [dbo].[BI_Reports]
					SET    [ReportName] = @ReportName, [RptCategoryID] = @RptCategoryID, [ReportURL] = @ReportURL, [Sequence] = @Sequence
					WHERE  [ReportName] = @ReportName
					
					-- Begin Return Select !- do not remove
					SELECT [ReportName], [RptCategoryID], [ReportURL], [Sequence]
					FROM   [dbo].[BI_Reports]
					WHERE  [ReportName] = @ReportName
					-- End Return Select !- do not remove

					COMMIT TRAN</commandtext>
      <comment>Enable changing of category assigned to report</comment>
    </command>
  </Version>
  <Version number="1.0.0.11">
    <command>
      <commandtext>ALTER TABLE dbo.BI_Columns ALTER COLUMN	LookUp_SP varchar(255) NULL</commandtext>
      <comment>Cater for longer stored procedure names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_Columns ALTER COLUMN	Select_SP varchar(255) NULL</commandtext>
      <comment>Cater for longer stored procedure names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_Columns ALTER COLUMN	Validation_SP varchar(255) NULL</commandtext>
      <comment>Cater for longer stored procedure names</comment>
    </command>
  </Version>
  <Version number="1.0.0.12">
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Get_Tables]
				AS
					SELECT ' ' name
					UNION
					SELECT name FROM sys.tables
					WHERE Substring(name,1,3) &lt;&gt; 'BI_'
							AND name &lt;&gt; 'sysdiagrams'
						 ORDER BY name</commandtext>
      <comment>Exclude standard batch-it from list of tables presented for header, line and detail</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BIW_Tables_UpdateInsert]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BIW_Tables_UpdateInsert] 
				END</commandtext>
      <comment>Cater for integration with Batch-IT Configuration Wizard.</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BIW_Tables_UpdateInsert]
					@BatchType varchar(50)
					, @BatchLevel varchar(3)
					, @Table varchar(50)
					, @Qualifier varchar(50)
				AS
				BEGIN
					BEGIN TRANSACTION
					BEGIN TRY
						IF EXISTS(SELECT 1 FROM BI_Tables WHERE BatchType = @BatchType AND BatchLevel = @BatchLevel)
						BEGIN
							UPDATE BI_Tables SET
								 [Table] = @Table
								, Qualifier = @Qualifier
							WHERE
								BatchType = @BatchType
							AND BatchLevel = @BatchLevel			
						END
						ELSE BEGIN
							INSERT INTO BI_Tables
							(BatchType, BatchLevel, [Table], Qualifier)
							VALUES
							(@BatchType, @BatchLevel, @Table, @Qualifier)
						END
					END TRY
					BEGIN CATCH
						ROLLBACK TRANSACTION
						RAISERROR('Error occured in a_sp_BIW_Tables_UpdateInsert',1,1)
					END CATCH
					COMMIT TRANSACTION
				END</commandtext>
      <comment>Cater for integration with Batch-IT Configuration Wizard.</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_CheckIfRunWizard]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_CheckIfRunWizard] 
				END</commandtext>
      <comment>Cater for integration with Batch-IT Configuration Wizard.</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_CheckIfRunWizard] 
			        AS 
			        SET NOCOUNT ON 

			     -- Declare variables to use
			        DECLARE @Message VARCHAR(1000)
			        DECLARE @AccessExists CHAR
			        DECLARE @BatchTypesExist CHAR

			     -- Default values for variables
			     SELECT @Message = '', 
			            @AccessExists = 'N',
			            @BatchTypesExist = 'N'

			        -- Check if any access granted
			     IF EXISTS (SELECT *
			           FROM BI_Users u, BI_RoleAccess ra
			          WHERE ra.RoleId = u.RoleId AND
			            ra.AccessId IN ('menuConfiguration', 'menuAccess')) BEGIN
			            SELECT @AccessExists = 'Y'
			        END

			     -- Check if any batch types set up
			     IF EXISTS (SELECT *
			           FROM BI_BatchTypes) BEGIN
			            SELECT @BatchTypesExist = 'Y'
			        END

			     -- Set up error message
			        IF @AccessExists = 'N' BEGIN
			            IF @Message &lt;&gt; '' BEGIN
			                SELECT @Message = @Message + 'and no access has been granted'
			            END
			            ELSE BEGIN
			                SELECT @Message = @Message + 'No access has been granted'
			            END
			        END
			        IF @BatchTypesExist = 'N' BEGIN
			            IF @Message &lt;&gt; '' BEGIN
			                SELECT @Message = @Message + 'and no batch types have been set up'
			            END
			            ELSE BEGIN
			                SELECT @Message = @Message + 'No batch types have been set up'
			            END
			        END

			     -- Return message (if any). If blank then Wizard is not required.
			     SELECT Check_Message = @Message</commandtext>
      <comment>Cater for integration with Batch-IT Configuration Wizard.</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_Setup_New_Access] 
				-- This stored procedure is used to re-create all access permutations
				-- To run: EXEC a_sp_BI_Setup_New_Access
				AS 
				SET NOCOUNT ON;
				SET XACT_ABORT ON;
				BEGIN
					BEGIN TRANSACTION;

					ALTER TABLE [dbo].[BI_RoleAccess] DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access] 
					
					-- Delete existing access
					DELETE [dbo].[BI_Access]

					 ----------------------------------------------------------
					-- Insert Access not related to customizable batch screens
					----------------------------------------------------------
					INSERT INTO [dbo].[BI_Access]([AccessId], [AccessDescr])
					SELECT 'menuConfiguration', 'Configuration Menu Function' UNION ALL
					SELECT 'menuBatchTypes', 'Batch Types Access Menu Option' UNION ALL
					SELECT 'menuBatchScreenSetup', 'Batch Screen Setup Menu Option' UNION ALL
					SELECT 'menuBatchEntry', 'Batch Entry Menu Option' UNION ALL
					SELECT 'menuReports', 'Report Menu Option' UNION ALL
					SELECT 'Batch Types Update', 'Batch Types - Update license' UNION ALL
					SELECT 'menuAccess', 'Security Access Menu Option' UNION ALL
					SELECT 'Batch Screen Setup Update', 'Batch Screen Setup - Update existing entries' UNION ALL
					SELECT 'menuBatchCategories', 'Batch Categories - Maintain' UNION ALL
					SELECT 'menuReportCategories', 'Report Categories - Maintain' UNION ALL
					SELECT 'menuReportItems', 'Report Items - Maintain' UNION ALL
					SELECT 'menuWizard','Configuration Wizard Facility'

					------------------------------
					-- Insert Access per BatchType
					------------------------------
					INSERT INTO [dbo].[BI_Access]([AccessId], [AccessDescr])
					SELECT BatchType, BatchType + ' Access Screen' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Add', BatchType + ' - Add new entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Delete', BatchType + ' - Delete existing entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Update', BatchType + ' - Update existing entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' tsbOpen', BatchType + ' - Open Lines Screen' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' tsbCalculate', BatchType + ' - Calculate Batches' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' tsbValidate', BatchType + ' - Validate Batches' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' tsbApprove', BatchType + ' - Approve Batches' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' tsbProcess', BatchType + ' - Process Batches' from BI_BatchTypes UNION ALL

					SELECT BatchType + ' Lines Add', BatchType + ' Lines - Add new entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Lines Delete', BatchType + ' Lines - Delete existing entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Lines Update', BatchType + ' Lines - Update existing entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Lines tsbOpen', BatchType + ' Lines - Open Distribution Screen' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Lines tsbCalculate', BatchType + ' Lines - Calculate Lines' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Lines tsbValidate', BatchType + ' Lines - Validate Lines' from BI_BatchTypes UNION ALL

					SELECT BatchType + ' Distributions Add', BatchType + ' Distributions - Add new entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Distributions Delete', BatchType + ' Distributions - Delete existing entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Distributions Update', BatchType + ' Distributions - Update existing entries' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Distributions tsbCalculate', BatchType + ' Distributions - Calculate Distributions' from BI_BatchTypes UNION ALL
					SELECT BatchType + ' Distributions tsbValidate', BatchType + ' Distributions - Validate Distributions' from BI_BatchTypes UNION ALL

					SELECT 'Rpt Cat ' + RptCategoryID, 'Report Category - ' + RptCategoryDescr from BI_RPTCategories UNION ALL

					SELECT 'Batch Cat ' + BatchCatCd, 'Batch Category - ' + BatchCatDescr from BI_BatchCategory

					-- Delete existing roles referring to access
					DELETE [dbo].[BI_RoleAccess]
						WHERE NOT EXISTS (SELECT 'x' FROM [dbo].[BI_Access] a where a.[AccessId] = [dbo].[BI_RoleAccess].[AccessId])

					ALTER TABLE [dbo].[BI_RoleAccess]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY([AccessId])
					REFERENCES [dbo].[BI_Access] ([AccessId])
					
					ALTER TABLE [dbo].[BI_RoleAccess] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
					

					COMMIT;
					RAISERROR (N'[dbo].[BI_Access]: Insert all access: 1.....Done!', 10, 1) WITH NOWAIT;
				END</commandtext>
      <comment>Cater for access to Wizard</comment>
    </command>
    <command>
      <commandtext>EXEC a_sp_BI_Setup_New_Access</commandtext>
      <comment>Execute procedure to create new access</comment>
    </command>
  </Version>
  <Version number="1.0.0.13">
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Validate_SP]
				(
				    @SP varchar(100)
				)
				AS
				BEGIN
				    DECLARE @Count INT

					SELECT @Count = COUNT(*) 
				        FROM sys.procedures 
				      WHERE object_id = OBJECT_ID(@SP)

				    IF @Count = 0 BEGIN
				        SELECT parameter = 'INVALID SP'
				    END
				    ELSE BEGIN
						SELECT parameter = ParameterName + ' (' + RTRIM(TypeName + ' ' + CAST(ParameterSize AS VARCHAR)) + ')' 
							FROM ModelwareBatchProcessing.eConnect.a_tbl_eConnect_SP_ParamterInfo 
							WHERE SPName = @SP
							ORDER BY ParameterID
				    END
				END</commandtext>
      <comment>Cater for showing parameters expected by stored procedure</comment>
    </command>
  </Version>
  <Version number="1.0.0.14">
    <command>
      <commandtext>IF NOT EXISTS (select * from syscolumns WHERE name = 'HeadAfterLoadSP' AND id=OBJECT_ID('[dbo].[BI_BatchTypes]'))
					ALTER TABLE BI_BatchTypes ADD
						HeadAfterLoadSP    varchar(255) NULL,
						LinesAfterLoadSP   varchar(255) NULL,
						DistrAfterLoadSP   varchar(255) NULL,
						HeadAfterSaveSP    varchar(255) NULL,
						LinesAfterSaveSP   varchar(255) NULL,
						DistrAfterSaveSP   varchar(255) NULL,
						HeadAfterDeleteSP  varchar(255) NULL,
						LinesAfterDeleteSP varchar(255) NULL,
						DistrAfterDeleteSP varchar(255) NULL</commandtext>
      <comment>Cater for specifying stored procedure to run after load or after save</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypesSetup_Select]
				(
				    @BatchType  varchar(255)
				)
				AS
				    SELECT [BatchType],
				           [ApproveSP],
				           [ApproveStatus],
				           [ProcessSP],
				           [ProcessStatus],
				           [HeadRowSetupSP],
				           [LineRowSetupSP],
				           [DistrRowSetupSP],
				           [HeadRowSelectSP],
				           [LineRowSelectSP],
				           [DistrRowSelectSP],
				           [HeadValidationSP],
				           [LinesValidationSP],
				           [DistrValidationSP],
				           [AfterCloseLinesSP],
				           [AfterCloseDistrSP],
				           [HeadValue1Descr],
				           [HeadValue2Descr],
				           [HeadValue3Descr],
				           [HeadValue4Descr],
				           [LineValue1Descr],
				           [LineValue2Descr],
				           [LineValue3Descr],
				           [LineValue4Descr],
				           [DistrValue1Descr],
				           [DistrValue2Descr],
				           [DistrValue3Descr],
				           [DistrValue4Descr],
				           [HeadValidationStatus],
				           [LinesValidationStatus],
				           [DistrValidationStatus],
				           [HeadCalculationSP],
				           [HeadCalculationStatus],
				           [LinesCalculationSP],
				           [LinesCalculationStatus],
				           [DistrCalculationSP],
				           [DistrCalculationStatus],
						   [HeadAfterLoadSP],
						   [LinesAfterLoadSP],
						   [DistrAfterLoadSP],
						   [HeadAfterSaveSP],
						   [LinesAfterSaveSP],
						   [DistrAfterSaveSP],
						   [HeadAfterDeleteSP],
						   [LinesAfterDeleteSP],
						   [DistrAfterDeleteSP]
				            FROM BI_BatchTypes 
				            WHERE BatchType = @BatchType
				      ORDER BY Sequence</commandtext>
      <comment>Cater for specifying stored procedure to run after load or after save</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypesSetup_Update]
				  (
				        @BatchType                    varchar(255),
				        @ApproveSP                    varchar(255),
				        @ApproveStatus                varchar(50),
				        @ProcessSP                    varchar(255),
				        @ProcessStatus                varchar(50),
				        @HeadRowSetupSP               varchar(255),
				        @LineRowSetupSP               varchar(255),
				        @DistrRowSetupSP			  varchar(255),
				        @HeadRowSelectSP              varchar(255),
				        @LineRowSelectSP              varchar(255),
				        @DistrRowSelectSP             varchar(255),
				        @HeadValidationSP             varchar(255),
				        @LinesValidationSP            varchar(255),
				        @DistrValidationSP            varchar(255),
				        @AfterCloseLinesSP            varchar(255),
				        @AfterCloseDistrSP            varchar(255),
				        @HeadValue1Descr              varchar(50),
				        @HeadValue2Descr              varchar(50),
				        @HeadValue3Descr              varchar(50),
				        @HeadValue4Descr              varchar(50),
				        @LineValue1Descr              varchar(50),
				        @LineValue2Descr              varchar(50),
				        @LineValue3Descr              varchar(50),
				        @LineValue4Descr              varchar(50),
				        @DistrValue1Descr             varchar(50),
				        @DistrValue2Descr             varchar(50),
				        @DistrValue3Descr             varchar(50),
				        @DistrValue4Descr             varchar(50),
				        @HeadValidationStatus         varchar(50),
				        @LinesValidationStatus        varchar(50),
				        @DistrValidationStatus        varchar(50),
				        @HeadCalculationSP            varchar(255),
				        @HeadCalculationStatus        varchar(50),
				        @LinesCalculationSP           varchar(255),
				        @LinesCalculationStatus       varchar(50),
				        @DistrCalculationSP           varchar(255),
				        @DistrCalculationStatus       varchar(50),
						@HeadAfterLoadSP              varchar(255),
						@LinesAfterLoadSP             varchar(255),
						@DistrAfterLoadSP             varchar(255),
						@HeadAfterSaveSP              varchar(255),
						@LinesAfterSaveSP             varchar(255),
						@DistrAfterSaveSP             varchar(255),
						@HeadAfterDeleteSP            varchar(255),
						@LinesAfterDeleteSP           varchar(255),
						@DistrAfterDeleteSP           varchar(255)
				)
				AS
				BEGIN
				      SET NOCOUNT OFF;
				      
				      UPDATE BI_BatchTypes
				            SET ApproveSP                     = @ApproveSP, 
				                ApproveStatus                 = @ApproveStatus,
				                ProcessSP                     = @ProcessSP,
				                ProcessStatus                 = @ProcessStatus,
				                HeadRowSetupSP                = @HeadRowSetupSP,
				                LineRowSetupSP                = @LineRowSetupSP,
				                DistrRowSetupSP               = @DistrRowSetupSP,
				                HeadRowSelectSP               = @HeadRowSelectSP,
				                LineRowSelectSP               = @LineRowSelectSP,
				                DistrRowSelectSP              = @DistrRowSelectSP,
				                HeadValidationSP              = @HeadValidationSP,
				                LinesValidationSP             = @LinesValidationSP,
				                DistrValidationSP             = @DistrValidationSP,
				                AfterCloseLinesSP             = @AfterCloseLinesSP,
				                AfterCloseDistrSP             = @AfterCloseDistrSP,
				                HeadValue1Descr               = @HeadValue1Descr,
				                HeadValue2Descr               = @HeadValue2Descr,
				                HeadValue3Descr               = @HeadValue3Descr,
				                HeadValue4Descr               = @HeadValue4Descr,
				                LineValue1Descr               = @LineValue1Descr,
				                LineValue2Descr               = @LineValue2Descr,
				                LineValue3Descr               = @LineValue3Descr,
				                LineValue4Descr               = @LineValue4Descr,
				                DistrValue1Descr              = @DistrValue1Descr,
				                DistrValue2Descr              = @DistrValue2Descr,
				                DistrValue3Descr              = @DistrValue3Descr,
				                DistrValue4Descr              = @DistrValue4Descr,
				                HeadValidationStatus          = @HeadValidationStatus,
				                LinesValidationStatus         = @LinesValidationStatus,
				                DistrValidationStatus         = @DistrValidationStatus,
				                HeadCalculationSP             = @HeadCalculationSP,
				                HeadCalculationStatus         = @HeadCalculationStatus,
				                LinesCalculationSP            = @LinesCalculationSP,
				                LinesCalculationStatus        = @LinesCalculationStatus,
				                DistrCalculationSP            = @DistrCalculationSP,
				                DistrCalculationStatus        = @DistrCalculationStatus,
								HeadAfterLoadSP               = @HeadAfterLoadSP,
								LinesAfterLoadSP              = @LinesAfterLoadSP,
								DistrAfterLoadSP              = @DistrAfterLoadSP,
								HeadAfterSaveSP               = @HeadAfterSaveSP,
								LinesAfterSaveSP              = @LinesAfterSaveSP,
								DistrAfterSaveSP              = @DistrAfterSaveSP,
								HeadAfterDeleteSP             = @HeadAfterDeleteSP,
								LinesAfterDeleteSP            = @LinesAfterDeleteSP,
								DistrAfterDeleteSP            = @DistrAfterDeleteSP

				      WHERE BatchType = @BatchType

				      IF @@ERROR&gt;0 BEGIN
				                  RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
				                  ROLLBACK TRANSACTION
				                  RETURN 1
				      END
				END</commandtext>
      <comment>Cater for specifying stored procedure to run after load or after save</comment>
    </command>
  </Version>
  <Version number="1.0.0.15">
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_GenericTable_Create]') IS NOT NULL
				BEGIN 
					DROP PROC [dbo].[a_sp_BI_GenericTable_Create] 
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_GenericTable_Create]
				(
					  @TableName varchar(255)
					, @ColumnName varchar(255)
					, @Datatype varchar(50)
					, @DataTypeSize int = 255
					, @Null int	= 0 -- 1 = not null , 0 = null
					, @PrimaryKey int = 0 -- 1 = Primary Key
					, @Indentity int = 0 -- 1 = Indentity(1,1)
					, @DropTable int = 0
				)
				AS BEGIN

				DECLARE @SQL Varchar(max)

				SELECT @SQL = 'DECLARE @DropTable int
				SELECT @DropTable = ' + Convert(Varchar, @DropTable) + '

				IF EXISTS(
					SELECT * FROM sys.Tables 
					WHERE Name = ' + '''' + @TableName + '''' + '
				) BEGIN
					IF @DropTable = 1 BEGIN
						DROP TABLE ' + @TableName + '
					END
				END ' + '
				' + '
				CREATE TABLE [dbo].[' + @TableName + '] 
				(
				'	+  '[' +
				@ColumnName + ']' + ' ' + '[' + @DataType + ']' +
												CASE
													WHEN @DataType LIKE '%char%' THEN '(' + Convert(Varchar(10), @DataTypeSize) + ')'
													ELSE ''
												END + 
												CASE
													WHEN @NULL = 1 THEN ' NOT NULL'
													ELSE ' NULL'
											 	END +
											 	CASE
											 		WHEN @PrimaryKey = 1 THEN ' PRIMARY KEY'
											 		ELSE ''
											 	END + 
											 	CASE 
											 		WHEN @DataType NOT LIKE '%char%' AND @Indentity = 1 THEN ' IDENTITY(1,1)'
											 		ELSE ''
											 	END +  '
				)'

					PRINT @SQL
					EXECUTE (@SQL)
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_GenericTable_Alter]') IS NOT NULL
				BEGIN 
				    DROP PROC [dbo].[a_sp_BI_GenericTable_Alter] 
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_GenericTable_Alter]
				(
					  @TableName varchar(255)
					, @ColumnName varchar(255)
					, @Datatype varchar(50)
					, @DataTypeSize int = 255
					, @Null int	= 0
					, @PrimaryKey int = 0  
					, @Indentity int = 0	
				)
				AS BEGIN

				DECLARE @SQL Varchar(max)

				SELECT @SQL = 'ALTER TABLE [dbo].[' + @TableName + '] 
				ADD '	+  '[' +
				@ColumnName + ']' + ' ' + '[' + @DataType + ']' +
												CASE
													WHEN @DataType LIKE '%char%' THEN '(' + Convert(Varchar(10), @DataTypeSize) + ')'
													ELSE ''
												END + 
												CASE
													WHEN @NULL = 1 THEN ' NOT NULL'
													ELSE ' NULL'
												END +
												CASE
													WHEN @PrimaryKey = 1 THEN ' PRIMARY KEY'
													ELSE ''
												END + 
												CASE 
													WHEN @DataType NOT LIKE '%char%' AND @Indentity = 1 THEN ' IDENTITY(1,1)'
													ELSE ''
												END +  '
				'

					PRINT @SQL
					EXECUTE (@SQL)
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
  </Version>
  <Version number="1.0.0.16">
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_GetTableColumnInfo]') IS NOT NULL
				BEGIN 
					DROP PROC [dbo].[a_sp_BI_GetTableColumnInfo] 
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_GetTableColumnInfo]
				      @TableName VARCHAR(100)
				AS
				BEGIN
				      SELECT DISTINCT
				      sa.name as [ColumnName],
				      sa.is_nullable as [AllowNulls],
				      sa.is_identity as [IsIdentity],
				      sa.max_length as [MaxLength],
				      UPPER(st.name) as [DataType],
				      (CASE
				      WHEN kc.COLUMN_NAME IS NOT NULL THEN 1
				      ELSE 0 END) AS [PrimaryKey]
				      FROM sys.all_columns sa

				      LEFT OUTER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kc
				      on kc.COLUMN_NAME = sa.name
				      AND kc.TABLE_NAME = @TableName

				      INNER JOIN sys.types st
				      ON sa.user_type_id = st.user_type_id

				      WHERE sa.object_id = OBJECT_ID(@TableName)
				      ORDER BY PrimaryKey desc, ColumnName asc
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
  </Version>
  <Version number="1.0.0.17">
    <command>
      <commandtext>ALTER TABLE dbo.BI_Columns ALTER COLUMN	LookUp_SP varchar(1024) NULL</commandtext>
      <comment>Cater for longer stored procedure names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_Columns ALTER COLUMN	Select_SP varchar(1024) NULL</commandtext>
      <comment>Cater for longer stored procedure names</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_Columns ALTER COLUMN	Validation_SP varchar(1024) NULL</commandtext>
      <comment>Cater for longer stored procedure names</comment>
    </command>
  </Version>
  <Version number="1.0.0.18" />
  <Version number="1.0.0.19">
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_Tables_Delete]') IS NOT NULL
				BEGIN 
					DROP PROC [dbo].[a_sp_BI_Tables_Delete] 
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_Tables_Delete]
				     (
				      @BatchType  varchar(50),
				      @BatchLevel char(1)
				     )
				    AS
				BEGIN
					DELETE FROM BI_Tables
					  WHERE [BatchType]= @BatchType
					AND [BatchLevel] = @BatchLevel
				END</commandtext>
      <comment>SP Required for Wizard</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (select * from syscolumns WHERE name = 'Computed' AND id=OBJECT_ID('[dbo].[BI_Columns]'))
					ALTER TABLE dbo.BI_Columns ADD Computed bit NULL</commandtext>
      <comment>Cater for computed fields in tables</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Columns_Insert] (
				                    @BatchType varchar(50),
				                    @BatchLevel char(1),
				                    @Table varchar(100),
				                    @Column varchar(100),
				                    @RenameTo varchar(100),
				                    @Sequence int,
				                    @Lookup_SP varchar(100),
				                    @Select_SP varchar(100),
				                    @Validation_SP varchar(100),
				                    @Hide bit,
				                    @ReadOnly bit,
				                    @ReadOnlyExisting bit,
				                    @FilterOn bit,
				                    @Required bit,
				                    @BatchID bit,
				                    @LineID bit,
				                    @DistrID bit,
				                    @StatusCol bit) AS
				BEGIN
				    SET NOCOUNT OFF;

				    DECLARE @Computed bit

				    SELECT @Computed = ISNULL(is_computed, 0)
				      FROM sys.columns c 
				        WHERE c.object_id = OBJECT_ID(@Table)
				          AND name = @Column

				    INSERT INTO [dbo].[BI_Columns] 
				    (
				      BatchType, 
				      [BatchLevel], 
				      [Table], 
				      [Column], 
				      [Rename To], 
				      [Sequence], 
				      [LookUp_SP],
				      [Select_SP],
				      [Validation_SP],
				      [Hide],
				      [ReadOnly],
				      [ReadOnly Existing],
				      [Filter On],
				      [Required],
				      [Batch ID],
				      [Line ID],
				      [Distr ID],
				      [Status Col],
				      [Computed]
				    ) 
				    VALUES 
				    (
				      @BatchType,
				      @BatchLevel,
				      @Table,
				      @Column,
				      @RenameTo,
				      @Sequence,
				      @LookUp_SP,
				      @Select_SP,
				      @Validation_SP,
				      @Hide,
				      @ReadOnly,
				      @ReadOnlyExisting,
				      @FilterOn,
				      @Required,
				      @BatchID,
				      @LineID,
				      @DistrID,
				      @StatusCol,
				      @Computed
				    )

				    IF @@ERROR&gt;0 BEGIN
				        RAISERROR ('Insert BI_Columns Failed',16,1) WITH LOG
				        ROLLBACK TRANSACTION
				        RETURN 1
				    END
				            
				    EXEC [a_sp_BI_Get_Columns] @BatchType, @Table, @BatchLevel
				END</commandtext>
      <comment>Cater for computed fields in tables</comment>
    </command>
  </Version>
  <Version number="1.0.0.20">
    <command>
      <commandtext>ALTER TABLE BI_BatchTypes ALTER COLUMN	[License] [varchar](512) NULL</commandtext>
      <comment>Cater for longer license keys (where long batch type names used)</comment>
    </command>
  </Version>
  <Version number="1.0.1.0">
    <command>
      <commandtext>ALTER TABLE [BI_BatchTypes] 
					ALTER COLUMN [BatchType] [varchar](255) NOT NULL</commandtext>
      <comment>Make BatchType Col not null</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
					WHERE table_name = 'BI_BatchTypes' AND constraint_type = 'Primary key')
						ALTER TABLE [BI_BatchTypes] 
							ADD PRIMARY KEY ([BatchType])</commandtext>
      <comment>Add primary key on BI_BatchTypes</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
					WHERE table_name = 'BI_BatchTypes' AND constraint_type = 'Primary key')
						ALTER TABLE [BI_Columns] 
							ADD PRIMARY KEY ([BatchType], [BatchLevel], [Column])</commandtext>
      <comment>Add primary key on BI_Columns</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
					WHERE table_name = 'BI_BatchTypes' AND constraint_type = 'Primary key')
						ALTER TABLE [BI_Tables] 
							ADD PRIMARY KEY ([BatchType], [BatchLevel])</commandtext>
      <comment>Add primary key on BI_Columns</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_CheckIfRunWizard] 
				           AS 
				           SET NOCOUNT ON 

				        -- Declare variables to use
				           DECLARE @Message VARCHAR(1000)
				           DECLARE @AccessExists CHAR
				           DECLARE @BatchTypesExist CHAR

				        -- Default values for variables
				        SELECT @Message = '', 
				               @AccessExists = 'N',
				               @BatchTypesExist = 'N'

				           -- Check if any access granted
				        IF EXISTS (SELECT *
				              FROM BI_Users u, BI_RoleAccess ra
				             WHERE ra.RoleId = u.RoleId AND
				               ra.AccessId IN ('menuConfiguration', 'menuAccess')) BEGIN
				               SELECT @AccessExists = 'Y'
				           END

				        -- Check if any batch types set up
				        IF EXISTS (SELECT *
				              FROM BI_BatchTypes) BEGIN
				               SELECT @BatchTypesExist = 'Y'
				           END

				        -- Set up error message
				           IF @AccessExists = 'N' BEGIN
				               IF @Message &lt;&gt; '' BEGIN
				                   SELECT @Message = @Message + ' and no access has been granted'
				               END
				               ELSE BEGIN
				                   SELECT @Message = @Message + 'No access has been granted'
				               END
				           END
				           IF @BatchTypesExist = 'N' BEGIN
				               IF @Message &lt;&gt; '' BEGIN
				                   SELECT @Message = @Message + ' and no batch types have been set up'
				               END
				               ELSE BEGIN
				                   SELECT @Message = @Message + 'No batch types have been set up'
				               END
				           END

				        -- Return message (if any). If blank then Wizard is not required.
				        SELECT Check_Message = @Message</commandtext>
      <comment>Correct spelling mistake in message warning that no users exist</comment>
    </command>
  </Version>
  <Version number="1.0.1.1" />
  <Version number="1.0.1.2" />
  <Version number="1.0.2.0" />
  <Version number="1.0.3.0">
    <command>
      <commandtext>IF NOT EXISTS (select * from syscolumns WHERE name = 'Format' AND id=OBJECT_ID('[dbo].[BI_Columns]'))
					ALTER TABLE dbo.BI_Columns ADD Format varchar(50) NULL</commandtext>
      <comment>Enable format to be specified for batch grid field</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (select * from syscolumns WHERE name = 'Alignment' AND id=OBJECT_ID('[dbo].[BI_Columns]'))
					ALTER TABLE dbo.BI_Columns ADD Alignment varchar(25) NULL</commandtext>
      <comment>Enable alignment to be specified for batch grid field</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Columns_Insert] (
				                        @BatchType varchar(50),
				                        @BatchLevel char(1),
				                        @Table varchar(100),
				                        @Column varchar(100),
				                        @RenameTo varchar(100),
				                        @Sequence int,
				                        @Lookup_SP varchar(100),
				                        @Select_SP varchar(100),
				                        @Validation_SP varchar(100),
				                        @Hide bit,
				                        @ReadOnly bit,
				                        @ReadOnlyExisting bit,
				                        @FilterOn bit,
				                        @Required bit,
				                        @BatchID bit,
				                        @LineID bit,
				                        @DistrID bit,
				                        @StatusCol bit,
				                        @Format varchar(50),
				                        @Alignment varchar(50)) AS
				    BEGIN
				        SET NOCOUNT OFF;

				        DECLARE @Computed bit

				        SELECT @Computed = ISNULL(is_computed, 0)
				          FROM sys.columns c 
				            WHERE c.object_id = OBJECT_ID(@Table)
				              AND name = @Column

				        INSERT INTO [dbo].[BI_Columns] 
				        (
				          BatchType, 
				          [BatchLevel], 
				          [Table], 
				          [Column], 
				          [Rename To], 
				          [Sequence], 
				          [LookUp_SP],
				          [Select_SP],
				          [Validation_SP],
				          [Hide],
				          [ReadOnly],
				          [ReadOnly Existing],
				          [Filter On],
				          [Required],
				          [Batch ID],
				          [Line ID],
				          [Distr ID],
				          [Status Col],
				          [Computed],
				          [Format],
						  [Alignment]
				        ) 
				        VALUES 
				        (
				          @BatchType,
				          @BatchLevel,
				          @Table,
				          @Column,
				          @RenameTo,
				          @Sequence,
				          @LookUp_SP,
				          @Select_SP,
				          @Validation_SP,
				          @Hide,
				          @ReadOnly,
				          @ReadOnlyExisting,
				          @FilterOn,
				          @Required,
				          @BatchID,
				          @LineID,
				          @DistrID,
				          @StatusCol,
				          @Computed,
				          @Format,
						  @Alignment
				        )

				        IF @@ERROR&gt;0 BEGIN
				            RAISERROR ('Insert BI_Columns Failed',16,1) WITH LOG
				            ROLLBACK TRANSACTION
				            RETURN 1
				        END
				                
				        EXEC [a_sp_BI_Get_Columns] @BatchType, @Table, @BatchLevel
				    END</commandtext>
      <comment>Enable format and alignment to be specified for batch grid field</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Get_Columns] 
				( 
				    @BatchType VARCHAR(50), 
				    @BatchLevel CHAR(1), 
				    @Table VARCHAR(100) 
				) 
				        AS 
				BEGIN 
				    -- If no table specified (because just entered form and user not yet selected 
				    -- from drop-down) then get the table name used for existing setup (if any) 
				    IF LTRIM(@Table) = ''  
				    BEGIN 
				        SELECT @Table = MAX([Table]) 
				            FROM BI_Columns bic 
				            WHERE bic.BatchType = @BatchType 
				                AND bic.[BatchLevel] = @BatchLevel 
				    END 

				    SELECT DISTINCT 
						BatchType = @BatchType
						, [BatchLevel] = @BatchLevel
						, [Table] = @Table
						, [Column] = sc.name
						, [Rename To] = null
						, [Sequence] = null
						, [LookUp_SP] = null
						, [Select_SP] = null
						, [Validation_SP] = null
						, [Hide] = 0
						, [ReadOnly] = 0
						, [ReadOnly Existing] = 0
						, [Filter On] = 0
						, [Required] = 0
						, [Batch ID] = 0
						, [Line ID] = 0
						, [Distr ID] = 0
						, [Status Col] = 0
						, [Format] = null
						, [Alignment] = 'NotSet'
				        FROM sys.columns sc 
							LEFT OUTER JOIN BI_Columns bic 
							ON bic.BatchType = @BatchType 
				            AND bic.[BatchLevel] = @BatchLevel 
				            AND bic.[Table] = @Table 
				            AND bic.[Column] = sc.name COLLATE SQL_Latin1_General_CP1_CI_AS
				        WHERE OBJECT_ID = OBJECT_ID(@Table) 
				          AND bic.[Batch ID] is null
				    UNION 
				    SELECT DISTINCT
						BatchType
						, [BatchLevel]
						, [Table]
						, [Column] COLLATE SQL_Latin1_General_CP1_CI_AS
						, [Rename To]
						, [Sequence]
						, [LookUp_SP]
						, [Select_SP]
						, [Validation_SP]
						, [Hide]
						, [ReadOnly]
						, [ReadOnly Existing]
						, [Filter On]
						, [Required]
						, [Batch ID]
						, [Line ID]
						, [Distr ID]
						, [Status Col]
						, [Format] 
						, [Alignment]
				        FROM BI_Columns bic (nolock)
							INNER JOIN sys.columns sc 
								ON OBJECT_ID = OBJECT_ID(bic.[Table]) 
								AND sc.name = bic.[Column] COLLATE SQL_Latin1_General_CP1_CI_AS
				        WHERE bic.BatchType = @BatchType 
				            AND bic.[BatchLevel] = @BatchLevel 
				            AND bic.[Table] = @Table 
				        ORDER BY BatchType, [Table], [Sequence] 
				END</commandtext>
      <comment>Enable format and alignment to be specified for batch grid field</comment>
    </command>
  </Version>
  <Version number="1.0.4.0">
    <command>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_Setup_StoredProcedures]') IS NOT NULL
				BEGIN 
					DROP PROC [dbo].[a_sp_BI_Setup_StoredProcedures] 
				END</commandtext>
      <comment>Provide SP that will recreate ModelWareBatchProcessing information on all SPs referred to in database.</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_Setup_StoredProcedures] 
				    -- This stored procedure is used to re-create SP information in ModelWareBatchProcessing
				    -- for all SPs referred to in this Batch-It database
				AS 
				BEGIN
					DECLARE @SP_Name		VARCHAR(255)
					DECLARE	@return_value	INT
					DECLARE @CurrentDB      VARCHAR(100)

					SELECT @CurrentDB = db_name()

				-- Was going to create table to store SP info in but will do this later.
				-- Here is suggested format (create primary key too)
				--CREATE TABLE [dbo].[BI_Tables](
				--	[BatchType]			[varchar](50) NOT NULL,
				--	[BatchLevel]		[char](1) NOT NULL,
				--	[EventCategory]		[varchar](100) NOT NULL,
				--	[EventName]			[varchar](100) NULL
				--	[EventDescription]	[varchar](256) NULL
				--	[SPCommand]			[varchar](512) NULL
				--	[Status]			[varchar](50) NULL
				--)

				    DECLARE c_c CURSOR LOCAL FOR
						SELECT DISTINCT LookUp_SP SP_Name FROM dbo.BI_Columns WHERE LookUp_SP IS NOT NULL AND LookUp_SP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT Select_SP SP_Name FROM dbo.BI_Columns WHERE Select_SP IS NOT NULL AND Select_SP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT Validation_SP SP_Name FROM dbo.BI_Columns WHERE Validation_SP IS NOT NULL AND Validation_SP &lt;&gt; ''
						---
						UNION ALL
						SELECT DISTINCT ApproveSP SP_Name FROM dbo.BI_BatchTypes WHERE ApproveSP IS NOT NULL AND ApproveSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT ProcessSP SP_Name FROM dbo.BI_BatchTypes WHERE ProcessSP IS NOT NULL AND ProcessSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadRowSetupSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadRowSetupSP IS NOT NULL AND HeadRowSetupSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LineRowSetupSP SP_Name FROM dbo.BI_BatchTypes WHERE LineRowSetupSP IS NOT NULL AND LineRowSetupSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrRowSetupSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrRowSetupSP IS NOT NULL AND DistrRowSetupSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadRowSelectSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadRowSelectSP IS NOT NULL AND HeadRowSelectSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LineRowSelectSP SP_Name FROM dbo.BI_BatchTypes WHERE LineRowSelectSP IS NOT NULL AND LineRowSelectSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrRowSelectSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrRowSelectSP IS NOT NULL AND DistrRowSelectSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadValidationSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadValidationSP IS NOT NULL AND HeadValidationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LinesValidationSP SP_Name FROM dbo.BI_BatchTypes WHERE LinesValidationSP IS NOT NULL AND LinesValidationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrValidationSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrValidationSP IS NOT NULL AND DistrValidationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrValidationSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrValidationSP IS NOT NULL AND DistrValidationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT AfterCloseLinesSP SP_Name FROM dbo.BI_BatchTypes WHERE AfterCloseLinesSP IS NOT NULL AND AfterCloseLinesSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT AfterCloseDistrSP SP_Name FROM dbo.BI_BatchTypes WHERE AfterCloseDistrSP IS NOT NULL AND AfterCloseDistrSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadCalculationSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadCalculationSP IS NOT NULL AND HeadCalculationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LinesCalculationSP SP_Name FROM dbo.BI_BatchTypes WHERE LinesCalculationSP IS NOT NULL AND LinesCalculationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrCalculationSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrCalculationSP IS NOT NULL AND DistrCalculationSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadAfterLoadSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadAfterLoadSP IS NOT NULL AND HeadAfterLoadSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LinesAfterLoadSP SP_Name FROM dbo.BI_BatchTypes WHERE LinesAfterLoadSP IS NOT NULL AND LinesAfterLoadSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrAfterLoadSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrAfterLoadSP IS NOT NULL AND DistrAfterLoadSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadAfterSaveSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadAfterSaveSP IS NOT NULL AND HeadAfterSaveSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LinesAfterSaveSP SP_Name FROM dbo.BI_BatchTypes WHERE LinesAfterSaveSP IS NOT NULL AND LinesAfterSaveSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrAfterSaveSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrAfterSaveSP IS NOT NULL AND DistrAfterSaveSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT HeadAfterDeleteSP SP_Name FROM dbo.BI_BatchTypes WHERE HeadAfterDeleteSP IS NOT NULL AND HeadAfterDeleteSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT LinesAfterDeleteSP SP_Name FROM dbo.BI_BatchTypes WHERE LinesAfterDeleteSP IS NOT NULL AND LinesAfterDeleteSP &lt;&gt; ''
						UNION ALL
						SELECT DISTINCT DistrAfterDeleteSP SP_Name FROM dbo.BI_BatchTypes WHERE DistrAfterDeleteSP IS NOT NULL AND DistrAfterDeleteSP &lt;&gt; ''
				    --
				    OPEN c_c
				    FETCH NEXT FROM c_c INTO @SP_Name
				    WHILE @@FETCH_STATUS = 0 BEGIN

						SELECT 'Processing SP: ' + @SP_Name AS StoredProcedure

						-- If parameters exist (i.e. something after a space) then 
				        -- strip off everything after first space to get just the SP name
						IF CHARINDEX(' ',@SP_Name) &gt; 0
						    SELECT @SP_Name = LEFT(@SP_Name,PATINDEX('% %',@SP_Name)-1)

						-- Now process SP to generate info about it into ModelWareBatchProcessing
						EXEC	@return_value = ModelwareBatchProcessing.[dbo].[a_sp_eConnect_BuildSQLTableForSP]
								@DBName = @CurrentDB
								,@SPName = @SP_Name
								,@Debug = 0

						SELECT 'Result Status: ' + CONVERT(VARCHAR,@return_value) AS [Status]

				        FETCH NEXT FROM c_c INTO @SP_Name
				    END
				    CLOSE c_c
				    DEALLOCATE c_c
				END</commandtext>
      <comment>Provide SP that will recreate ModelWareBatchProcessing information on all SPs referred to in database.</comment>
    </command>
  </Version>
  <Version number="1.0.5.0">
    <command>
      <commandtext>IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
					WHERE table_name = 'BI_Columns' AND constraint_type = 'Primary key')
						ALTER TABLE [BI_Columns] 
							ADD PRIMARY KEY ([BatchType], [BatchLevel], [Column])</commandtext>
      <commandtext>IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
					WHERE table_name = 'BI_Tables' AND constraint_type = 'Primary key')
						ALTER TABLE [BI_Tables] 
							ADD PRIMARY KEY ([BatchType], [BatchLevel])</commandtext>
      <comment>Corrected primary keys where not properly created</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE dbo.BI_BatchTypes ADD
					LockUser varchar(255) NULL,
					LockTime datetime NULL</commandtext>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_BatchTypes_Lock_Select]') IS NOT NULL
        BEGIN
          DROP PROC [dbo].[a_sp_BI_BatchTypes_Lock_Select]
        END</commandtext>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypes_Lock_Select]
            (
              @BatchType  varchar(255) = NULL
            )
            AS
        BEGIN
	        IF @BatchType IS NULL BEGIN
		        -- Get locks for all batches and users
		        SELECT bt.[BatchType], bt.[LockUser], u.[FirstName], u.[SurName], bt.[LockTime] 
			        FROM [BI_batchtypes] bt
		          LEFT OUTER JOIN [BI_Users] u ON u.UserId = bt.LockUser
		          WHERE bt.LockUser IS NOT NULL
		        ORDER BY [BatchType]
	        END
	        ELSE BEGIN
		        -- Get locks for specific batch (and exclude current user)
		        SELECT bt.[BatchType], bt.[LockUser], u.[FirstName], u.[SurName], bt.[LockTime] 
			        FROM [BI_batchtypes] bt
		          LEFT OUTER JOIN [BI_Users] u ON u.UserId = bt.LockUser
		          WHERE bt.LockUser IS NOT NULL
			        AND bt.LockUser != SYSTEM_USER
			        AND bt.[BatchType] = @BatchType
		        ORDER BY [BatchType]
	        END
        END</commandtext>
      <commandtext>IF OBJECT_ID('[dbo].[a_sp_BI_BatchTypes_Lock_Update]') IS NOT NULL
        BEGIN
          DROP PROC [dbo].[a_sp_BI_BatchTypes_Lock_Update]
        END</commandtext>
      <commandtext>CREATE PROCEDURE [dbo].[a_sp_BI_BatchTypes_Lock_Update]
            (
              @BatchType  varchar(255),
              @Lock	      int
            )
            AS
        BEGIN
            IF @Lock = 1 BEGIN
		        UPDATE [BI_batchtypes] 
			        SET [LockUser] = SYSTEM_USER, [LockTime] = GetDate()
		          WHERE [BatchType] = @BatchType
            END
            ELSE BEGIN
		        UPDATE [BI_batchtypes] 
			        SET [LockUser] = NULL, [LockTime] = NULL
		          WHERE [BatchType] = @BatchType
            END
        END</commandtext>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_Setup_New_Access] 
				    -- This stored procedure is used to re-create all access permutations
				    -- To run: EXEC a_sp_BI_Setup_New_Access
				    AS 
				BEGIN
					SET NOCOUNT ON;
					SET XACT_ABORT ON;
					BEGIN TRANSACTION;

						ALTER TABLE [dbo].[BI_RoleAccess] DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access] 

						-- Delete existing access
						DELETE [dbo].[BI_Access]

						----------------------------------------------------------
						-- Insert Access not related to customizable batch screens
						----------------------------------------------------------
						INSERT INTO [dbo].[BI_Access]([AccessId], [AccessDescr])
						SELECT 'menuConfiguration', 'Configuration Menu Function' UNION ALL
						SELECT 'menuBatchTypes', 'Batch Types Access Menu Option' UNION ALL
						SELECT 'menuBatchScreenSetup', 'Batch Screen Setup Menu Option' UNION ALL
						SELECT 'menuBatchEntry', 'Batch Entry Menu Option' UNION ALL
						SELECT 'menuReports', 'Report Menu Option' UNION ALL
						SELECT 'Batch Types Update', 'Batch Types - Update license' UNION ALL
						SELECT 'menuAccess', 'Security Access Menu Option' UNION ALL
						SELECT 'Batch Screen Setup Update', 'Batch Screen Setup - Update existing entries' UNION ALL
						SELECT 'menuBatchCategories', 'Batch Categories - Maintain' UNION ALL
						SELECT 'menuReportCategories', 'Report Categories - Maintain' UNION ALL
						SELECT 'menuReportItems', 'Report Items - Maintain' UNION ALL
						SELECT 'menuWizard','Configuration Wizard Facility' UNION ALL
						SELECT 'menuReleaseLocks','Release Batch Locks'

						------------------------------
						-- Insert Access per BatchType
						------------------------------
						INSERT INTO [dbo].[BI_Access]([AccessId], [AccessDescr])
						SELECT BatchType, BatchType + ' Access Screen' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Add', BatchType + ' - Add new entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Delete', BatchType + ' - Delete existing entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Update', BatchType + ' - Update existing entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' tsbOpen', BatchType + ' - Open Lines Screen' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' tsbCalculate', BatchType + ' - Calculate Batches' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' tsbValidate', BatchType + ' - Validate Batches' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' tsbApprove', BatchType + ' - Approve Batches' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' tsbProcess', BatchType + ' - Process Batches' from BI_BatchTypes UNION ALL

						SELECT BatchType + ' Lines Add', BatchType + ' Lines - Add new entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Lines Delete', BatchType + ' Lines - Delete existing entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Lines Update', BatchType + ' Lines - Update existing entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Lines tsbOpen', BatchType + ' Lines - Open Distribution Screen' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Lines tsbCalculate', BatchType + ' Lines - Calculate Lines' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Lines tsbValidate', BatchType + ' Lines - Validate Lines' from BI_BatchTypes UNION ALL

						SELECT BatchType + ' Distributions Add', BatchType + ' Distributions - Add new entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Distributions Delete', BatchType + ' Distributions - Delete existing entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Distributions Update', BatchType + ' Distributions - Update existing entries' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Distributions tsbCalculate', BatchType + ' Distributions - Calculate Distributions' from BI_BatchTypes UNION ALL
						SELECT BatchType + ' Distributions tsbValidate', BatchType + ' Distributions - Validate Distributions' from BI_BatchTypes UNION ALL

						SELECT 'Rpt Cat ' + RptCategoryID COLLATE SQL_Latin1_General_CP1_CI_AS, 'Report Category - ' + RptCategoryDescr COLLATE SQL_Latin1_General_CP1_CI_AS from BI_RPTCategories UNION ALL

						SELECT 'Batch Cat ' + BatchCatCd COLLATE SQL_Latin1_General_CP1_CI_AS, 'Batch Category - ' + BatchCatDescr COLLATE SQL_Latin1_General_CP1_CI_AS from BI_BatchCategory

						-- Delete existing roles referring to access
						DELETE [dbo].[BI_RoleAccess]
						WHERE NOT EXISTS (SELECT 'x' FROM [dbo].[BI_Access] a where a.[AccessId] = [dbo].[BI_RoleAccess].[AccessId])

						ALTER TABLE [dbo].[BI_RoleAccess]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY([AccessId])
						REFERENCES [dbo].[BI_Access] ([AccessId])

						ALTER TABLE [dbo].[BI_RoleAccess] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]

					COMMIT;
					RAISERROR (N'[dbo].[BI_Access]: Insert all access: 1.....Done!', 10, 1) WITH NOWAIT;
				END</commandtext>
      <commandtext>EXEC a_sp_BI_Setup_New_Access</commandtext>
      <comment>Cater for batch entry locking</comment>
    </command>
  </Version>
  <Version number="1.0.6.0">
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Structure](
	[StructureCode] [varchar](50) NOT NULL,
	[Description] [varchar](125) NULL,
	[BatchType] [varchar](50) NOT NULL,
	[BatchLevel] [char](1) NOT NULL,
	[CustomizedDMX] [bit] NOT NULL,
	[StructureDMX] [nvarchar](max) NOT NULL,
	[TrainingDMX] [nvarchar](max) NULL,
 CONSTRAINT [PK_BI_DM_Structure] PRIMARY KEY CLUSTERED 
(
	[StructureCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Structure_Cols](
	[StructureCode] [varchar](50) NOT NULL,
	[Column] [varchar](60) NOT NULL,
	[DataType] [varchar](50) NOT NULL,
	[ContentType] [varchar](50) NOT NULL,
 CONSTRAINT [PK_BI_DM_Structure_Cols] PRIMARY KEY CLUSTERED 
(
	[StructureCode] ASC,
	[Column] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Structure_Cols]  WITH CHECK ADD  CONSTRAINT [FK_BI_DM_Structure_Cols_BI_DM_Structure] FOREIGN KEY([StructureCode])
REFERENCES [dbo].[BI_DM_Structure] ([StructureCode])</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Structure_Cols] CHECK CONSTRAINT [FK_BI_DM_Structure_Cols_BI_DM_Structure]</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Model](
		[ModelCode] [varchar](50) NOT NULL,
		[Description] [varchar](125) NULL,
		[StructureCode] [varchar](50) NULL,
		[CustomizedDMX] [bit] NOT NULL,
		[ModelDMX] [nvarchar](max) NOT NULL,
	 CONSTRAINT [PK_BI_DM_Model] PRIMARY KEY CLUSTERED 
(
		[ModelCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Model]  WITH CHECK ADD  CONSTRAINT [FK_BI_DM_Model_BI_DM_Structure] FOREIGN KEY([StructureCode])
REFERENCES [dbo].[BI_DM_Structure] ([StructureCode])</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Model] CHECK CONSTRAINT [FK_BI_DM_Model_BI_DM_Structure]</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Model_Cols](
	[ModelCode] [varchar](50) NOT NULL,
	[Column] [varchar](60) NOT NULL,
	[PredictType] [varchar](50) NOT NULL,
 CONSTRAINT [PK_BI_DM_Model_Cols] PRIMARY KEY CLUSTERED 
(
	[ModelCode] ASC,
	[Column] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Model_Cols]  WITH CHECK ADD  CONSTRAINT [FK_BI_DM_Model_Cols_BI_DM_Model] FOREIGN KEY([ModelCode])
REFERENCES [dbo].[BI_DM_Model] ([ModelCode])</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Model_Cols] CHECK CONSTRAINT [FK_BI_DM_Model_Cols_BI_DM_Model]</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Query](
	[QueryCode] [varchar](50) NOT NULL,
	[Description] [varchar](125) NULL,
	[ModelCode] [varchar](50) NULL,
	[BatchType] [varchar](50) NOT NULL,
	[BatchLevel] [char](1) NOT NULL,
	[QueryDMX] [nvarchar](max) NOT NULL,
	[FeedToSPName] [varchar](1024) NULL,
	[IconText] [varchar](50) NULL,
	[IconFilename] [varchar](1024) NULL,
	[AmendedCellColour] [varchar](10) NULL,
 CONSTRAINT [PK_BI_DM_Query] PRIMARY KEY CLUSTERED 
(
	[QueryCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Query]  WITH CHECK ADD  CONSTRAINT [FK_BI_DM_Query_BI_DM_Model] FOREIGN KEY([ModelCode])
REFERENCES [dbo].[BI_DM_Model] ([ModelCode])</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Query] CHECK CONSTRAINT [FK_BI_DM_Query_BI_DM_Model]</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Query_Select] 
    @QueryCode	VARCHAR(20),
    @BatchType	VARCHAR(50),
    @BatchLevel	CHAR(1)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	SELECT [QueryCode], [Description], [ModelCode], [BatchType], [BatchLevel], [QueryDMX], 
		   [FeedToSPName], [IconText], [IconFilename], [AmendedCellColour]
	FROM   [dbo].[BI_DM_Query] 
	WHERE  ([QueryCode] = @QueryCode OR @QueryCode IS NULL) 
	  AND  ([BatchType] = @BatchType OR @BatchType IS NULL) 
	  AND  ([BatchLevel] = @BatchLevel OR @BatchLevel IS NULL) 
	ORDER BY [QueryCode]

	COMMIT</commandtext>
      <comment>Cater for Data Mining</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypes_Select]
     (
      @LicensedOnly char(1),
      @BatchCatCd   varchar(10)
     )
    AS
     IF @LicensedOnly = 'Y' BEGIN
      SELECT [BatchType],
          [License],
          [Sequence],
          [BatchCatCd] = ISNULL([BatchCatCd],'(None)'),
          [CurrDate] = GetDate()
       FROM BI_BatchTypes 
       WHERE License IS NOT NULL
                  AND (@BatchCatCd IS NULL OR batchcatcd = @BatchCatCd)
      ORDER BY Sequence
     END
     ELSE BEGIN
      SELECT [BatchType],
          [License],
          [Sequence],
          [BatchCatCd] = ISNULL([BatchCatCd],'(None)'),
          [CurrDate] = GetDate()
       FROM BI_BatchTypes 
                WHERE (@BatchCatCd IS NULL OR batchcatcd = @BatchCatCd)
      ORDER BY Sequence
     END</commandtext>
      <comment>MoBatch App</comment>
    </command>
  </Version>
  <Version number="1.0.7.0">
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[A_sp_bi_get_columns](
               @BatchType  VARCHAR(50),
               @BatchLevel CHAR(1),
               @Table      VARCHAR(100))
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected 
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   bi_columns bic
        WHERE  bic.batchtype = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    SELECT @BatchType batchtype,
           @BatchLevel batchlevel,
           @Table [Table],
           name [Column],
           NULL [Rename To],
           column_id [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           0 [Hide],
           0 [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           NULL [Format],
           'NotSet' [Alignment]
    FROM   sys.columns sc
    WHERE  object_id = Object_id(@Table)
           AND NOT EXISTS (SELECT 'x'
                           FROM   bi_columns bic
                           WHERE  bic.batchtype = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.name)
    UNION 
    SELECT batchtype,
           [BatchLevel],
           [Table],
           [Column],
           [Rename To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [Hide],
           [ReadOnly],
           [ReadOnly Existing],
           [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment]
    FROM   bi_columns bic
    WHERE  batchtype = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Table] = @Table
           AND EXISTS (SELECT 'x'
                       FROM   sys.columns sc
                       WHERE  object_id = Object_id(bic.[Table])
                              AND name = bic.[Column])
    ORDER BY BatchType,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Adjust existing Standard SPs</comment>
    </command>
    <command>
      <commandtext>DROP TABLE [dbo].[BI_DM_Structure_Cols]</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Structure_Cols](
	[StructureCode] [varchar](50) NOT NULL,
	[BatchType] [varchar](50) NOT NULL,
	[BatchLevel] [char](1) NOT NULL,
	[Sequence] [int] NOT NULL,
	[Column] [varchar](60) NOT NULL,
	[DataType] [varchar](50) NOT NULL,
	[ContentType] [varchar](50) NOT NULL,
 CONSTRAINT [PK_BI_DM_Structure_Cols] PRIMARY KEY CLUSTERED 
(
	[StructureCode] ASC,
	[Column] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Structure_Cols]  WITH CHECK ADD  CONSTRAINT [FK_BI_DM_Structure_Cols_BI_DM_Structure] FOREIGN KEY([StructureCode])
REFERENCES [dbo].[BI_DM_Structure] ([StructureCode])</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Structure_Cols] CHECK CONSTRAINT [FK_BI_DM_Structure_Cols_BI_DM_Structure]</commandtext>
      <commandtext>IF NOT EXISTS (select * from syscolumns WHERE name = 'BI_Columns' AND id=OBJECT_ID('[dbo].[Algorithm]'))
					ALTER TABLE dbo.[BI_DM_Model] ADD [Algorithm] varchar(50) NULL</commandtext>
      <commandtext>DROP TABLE [dbo].[BI_DM_Model_Cols]</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_DM_Model_Cols](
	[ModelCode] [varchar](50) NOT NULL,
	[Sequence] [int] NOT NULL,
	[Column] [varchar](60) NOT NULL,
	[PredictType] [varchar](50) NOT NULL,
 CONSTRAINT [PK_BI_DM_Model_Cols] PRIMARY KEY CLUSTERED 
(
	[ModelCode] ASC,
	[Column] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Model_Cols]  WITH CHECK ADD  CONSTRAINT [FK_BI_DM_Model_Cols_BI_DM_Model] FOREIGN KEY([ModelCode])
REFERENCES [dbo].[BI_DM_Model] ([ModelCode])</commandtext>
      <commandtext>ALTER TABLE [dbo].[BI_DM_Model_Cols] CHECK CONSTRAINT [FK_BI_DM_Model_Cols_BI_DM_Model]</commandtext>
      <comment>Update Data Mining Tables</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [dbo].[A_sp_bi_dm_query_select]
          @QueryCode  VARCHAR(20),
          @BatchType  VARCHAR(50),
          @BatchLevel CHAR(1)
AS
  SET nocount  ON
  SET xact_abort  ON
  BEGIN TRAN
  IF @QueryCode = 'Re-train Structure'
    BEGIN
      SELECT @QueryCode AS [QueryCode],
             @QueryCode AS [Description],
             'XXX' AS [ModelCode],
             [BatchType],
             [BatchLevel],
             [TrainingDMX] AS [QueryDMX],
             NULL AS [FeedToSPName],
             @QueryCode AS [IconText],
             NULL AS [IconFilename],
             NULL AS [AmendedCellColour]
      FROM   [dbo].[BI_DM_Structure]
      WHERE  [BatchType] = @BatchType
             AND [BatchLevel] = @BatchLevel
    END
  ELSE
    BEGIN
      SELECT   [QueryCode],
               [Description],
               [ModelCode],
               [BatchType],
               [BatchLevel],
               [QueryDMX],
               [FeedToSPName],
               [IconText],
               [IconFilename],
               [AmendedCellColour]
      FROM     [dbo].[BI_DM_Query]
      WHERE    ([QueryCode] = @QueryCode
                 OR @QueryCode IS NULL)
               AND ([BatchType] = @BatchType
                     OR @BatchType IS NULL)
               AND ([BatchLevel] = @BatchLevel
                     OR @BatchLevel IS NULL)
      ORDER BY [QueryCode]
    END
  COMMIT</commandtext>
      <comment>Update Data Mining SPs</comment>
    </command>
    <command>
      <commandtext>CREATE FUNCTION [dbo].[ColumnQuotes] 
-- =============================================
-- Author:		Robert Blomstrand
-- Create date: 13/07/2009
-- Description:	Called by a_sp_BI_DM_Query_Default
-- Using specified tablename/columnname, return column name 
-- surrounded by quotes if it is a form of CHAR datatype.
-- =============================================
(	
	-- Add the parameters for the function here
	@Table_Name		VARCHAR(100), 
	@Column_Name	VARCHAR(100)
)
RETURNS VARCHAR(100)
AS
BEGIN
    DECLARE  @ReturnColumn	VARCHAR(100)
    DECLARE  @DataType		VARCHAR(100)

    SELECT @DataType = data_type
    FROM   information_schema.columns
    WHERE  table_name = @Table_Name
           AND column_name = @Column_Name

	IF @DataType LIKE '%CHAR%' BEGIN
		-- Column needs to be surrounded by quotes
		SELECT @ReturnColumn = '''@['
								 + @Column_Name
								 + ']'''
	END
	ELSE BEGIN
		-- Column does NOT need to be surrounded by quotes (return as is)
		SELECT @ReturnColumn = '@[' + @Column_Name + ']'
	END
    RETURN @ReturnColumn
END -- fn def</commandtext>
      <comment>Create Data Mining Functions</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Model_Cols_Delete] 
    @ModelCode varchar(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

	DELETE FROM [dbo].[BI_DM_Model_Cols]
	WHERE       [ModelCode] = @ModelCode

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Model_Cols_Insert] 
    @ModelCode varchar(50),
    @Sequence int,
    @Column varchar(60),
    @PredictType varchar(50)
AS 
    SET NOCOUNT ON 
    SET XACT_ABORT ON  
    
    BEGIN TRAN

    IF @Sequence = 1 BEGIN
        DELETE FROM [dbo].[BI_DM_Model_Cols]
        WHERE       [ModelCode] = @ModelCode
    END
    
	INSERT INTO [dbo].[BI_DM_Model_Cols]
			   ([ModelCode],
				[Sequence],
				[Column],
				[PredictType])
	SELECT @ModelCode,
		   @Sequence,
		   @Column,
		   @PredictType

    COMMIT TRAN</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Model_Cols_Select]
          @Structurecode    VARCHAR(50) = '',
          @Modelcode        VARCHAR(50) = ''
-- Purpose: Return Model Columns either from [BI_DM_Model_Cols] if existing,
--          or else with default values based on BI_model_cols
AS
BEGIN
    SET nocount  ON
    SET xact_abort  ON

    DECLARE  @Include  AS BIT
    SET @Include = 1

    -- Create temp table using column info from [BI_DM_model_cols] where this
    -- info was saved previously.
    SELECT DISTINCT @Include AS [Include],
                    [Sequence],
                    [Column],
                    ISNULL([PredictType], '') AS [PredictType]
    INTO   #model_cols
    FROM [BI_DM_Model_Cols]
    WHERE [Modelcode] = @Modelcode

	-- The following lists columns that have not been selected previously.
	-- If one or more columns have already been selected then by defaul the following optional
	-- columns will be flagged as NOT selected. If no columns selected yet then the default is
	-- that all columns are selected for inclusion.
	IF @@ROWCOUNT &gt; 0 BEGIN
	    SET @Include = 0
	END

    -- Add to temp table using BI_Structure_Cols to get column names where this
    -- info was not saved previously into BI_DM_model_cols.
    -- Only done if Predict Type is not null (i.e. user chosen to create a default
    -- prediction DMX - Fill or 
	INSERT INTO #model_cols
	SELECT DISTINCT @Include AS [Include],
					bsc.[Sequence],
					bsc.[Column],
					(CASE 
					   WHEN bsc.[Sequence] = 2
					   THEN 'PREDICT'
					   ELSE ''
					 END) AS [PredictType]
	FROM   [BI_DM_Structure_Cols] bsc
		   LEFT OUTER JOIN [BI_DM_Model_Cols] bmc
			 ON bmc.[Modelcode] = @Modelcode
				AND bmc.[Column] = bsc.[Column]
	WHERE  bsc.[Structurecode] = @Structurecode
		   AND bmc.[Modelcode] IS NULL

    -- Extract the data to populate into Model Columns grid
	SELECT   [Include],
			 [Column],
			 [PredictType]
	FROM     #model_cols
	ORDER BY [Sequence]

    -- Drop the temp table as finished
    DROP TABLE #model_cols
END</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Model_Delete] 
    @ModelCode varchar(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

    -- Remove model columns
    DELETE FROM [dbo].[BI_DM_Model_Cols]
    WHERE       [ModelCode] = @ModelCode

	DELETE FROM [dbo].[BI_DM_Model]
	WHERE       [ModelCode] = @ModelCode

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Model_Select] 
    @StructureCode VARCHAR(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	SELECT   [ModelCode],
			 [Description],
			 [StructureCode],
			 [CustomizedDMX],
			 [ModelDMX],
			 [Algorithm]
	FROM     [dbo].[BI_DM_Model]
	WHERE    ([StructureCode] = @StructureCode
			   OR @StructureCode IS NULL)
	ORDER BY [ModelCode]

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Model_Upsert] 
    @ModelCode varchar(50),
    @Description varchar(125),
    @StructureCode varchar(50),
    @CustomizedDMX bit,
    @ModelDMX nvarchar(MAX),
    @Algorithm varchar(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN
	
	UPDATE [dbo].[BI_DM_Model]
	SET    [ModelCode] = @ModelCode,
		   [Description] = @Description,
		   [StructureCode] = @StructureCode,
		   [CustomizedDMX] = @CustomizedDMX,
		   [ModelDMX] = @ModelDMX,
		   [Algorithm] = @Algorithm
	WHERE  [ModelCode] = @ModelCode

    IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO [dbo].[BI_DM_Model]
				   ([ModelCode],
					[Description],
					[StructureCode],
					[CustomizedDMX],
					[ModelDMX],
					[Algorithm])
		SELECT @ModelCode,
			   @Description,
			   @StructureCode,
			   @CustomizedDMX,
			   @ModelDMX,
			   @Algorithm
    END 
    COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Query_Default] 
    @ModelCode		VARCHAR(50),
    @DefaultType	VARCHAR(50)
AS
BEGIN
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	DECLARE @Table_Name	VARCHAR(100)
	DECLARE @BatchType	VARCHAR(50)
	DECLARE @BatchLevel	CHAR(1)
	SELECT @Table_Name = [Table],
           @BatchType = bt.[BatchType],
           @BatchLevel = bt.[BatchLevel]
	FROM   [BI_DM_Model] dmm,
		   [BI_DM_Structure] dms,
		   [BI_Tables] bt
	WHERE  dmm.[Structurecode] = dms.[Structurecode]
		   AND dms.[BatchType] = bt.[BatchType]
		   AND dms.[BatchLevel] = bt.[BatchLevel]
		   AND dmm.[ModelCode] = @ModelCode
	
	DECLARE @LastSequence	INT
	SELECT @LastSequence = Max(dmc.[Sequence])
	FROM   [BI_DM_Model_Cols] dmc
		   LEFT OUTER JOIN [BI_DM_Structure_Cols] dsc
			 ON dsc.[Column] = dmc.[Column]
	WHERE  dmc.[Modelcode] = @ModelCode
		   AND dsc.[BatchType] = @BatchType
		   AND dsc.[BatchLevel] = @BatchLevel
		   AND (dsc.[BatchType] IS NULL 
				 OR dsc.[ContentType] &lt;&gt; 'KEY')

	DECLARE @LastKeySequence	INT
	SELECT @LastKeySequence = Max([Sequence])
	FROM   [BI_DM_Model_Cols]
	WHERE  [Modelcode] = @ModelCode
		   AND [PredictType] IS NOT NULL

	-- Create temp table
	CREATE TABLE #Default_Query (
	  [Sequence] INT,
	  [SqlLine]  VARCHAR(MAX))

	-------------------------------
	-- First the prediction portion
	-------------------------------
	IF @DefaultType = 'FILL' BEGIN
	    IF @LastKeySequence IS NULL BEGIN
		INSERT INTO #default_query
		SELECT 0 AS [Sequence],
			   'SELECT Predict([{Replace with column to be predicted...}]) AS [Fill_Empty_{Replace with column to be predicted...}]' AS [SqlLine]
	    END
	    ELSE BEGIN
			-- Add predict column (if multiple exist somehow then only last column)
			INSERT INTO #default_query
			SELECT 0 AS [Sequence],
				   'SELECT Predict(['
					 + [Column]
					 + ']) AS [Fill_Empty_'
					 + [Column]
					 + ']' AS [SqlLine]
			FROM   [BI_DM_Model_Cols] dmc
			WHERE  [Modelcode] = @ModelCode
				   AND [Sequence] = @LastKeySequence
	    END
	END
	ELSE IF @DefaultType = 'ANOMALY' BEGIN
	    IF @LastKeySequence IS NULL BEGIN
			INSERT INTO #default_query
			SELECT 0 AS [Sequence],
			    'SELECT ROUND(PredictProbability([{Replace with column to be predicted...}], ''@[{Replace with column to be predicted...}]'') * 100, 2) AS [PercLikelyValue]' AS [SqlLine]
	    END
	    ELSE BEGIN
			-- Add PredictProbability column (if multiple exist somehow then only last column)
			INSERT INTO #default_query
			SELECT 0 AS [Sequence],
				   'SELECT ROUND(PredictProbability(['
					 + [Column]
					 + '], '
					 + dbo.Columnquotes(@Table_Name,[Column])
					 + ') * 100, 2) AS [PercLikelyValue]' AS [SqlLine]
			FROM   [BI_DM_Model_Cols]
			WHERE  [Modelcode] = @ModelCode
				   AND [Sequence] = @LastKeySequence
	    END
	END
	ELSE BEGIN
		INSERT INTO #default_query
		SELECT 0 AS [Sequence],
			   'SELECT Predict([{Replace with column to be predicted...}]) AS [Fill_Empty_{Replace with column to be predicted...}]' AS [SqlLine]
	END

	------------------
	-- Join to section
	------------------
	INSERT INTO #Default_Query
	SELECT 100 AS [Sequence],
		   ' FROM ['
			 + @ModelCode
			 + '] ' AS [SqlLine]

	INSERT INTO #Default_Query
	SELECT 101 AS [Sequence],
		   'NATURAL PREDICTION JOIN (SELECT ' AS [SqlLine]

	------------------
	-- Join to columns
	------------------
	INSERT INTO #default_query
	SELECT   300
			   + dmc.[Sequence],
			 dbo.Columnquotes(@Table_Name,dmc.[Column])
			   + ' AS ['
			   + dmc.[Column]
			   + (CASE 
					WHEN dmc.[Sequence] = @LastSequence
					THEN '] '
					ELSE '], '
				  END) AS [SqlLine]
	FROM     [BI_DM_Model_Cols] dmc
			 LEFT OUTER JOIN [BI_DM_Structure_Cols] dsc
			   ON dsc.[Column] = dmc.[Column]
	WHERE    dmc.[Modelcode] = @ModelCode
			 AND dsc.[BatchType] = @BatchType
			 AND dsc.[BatchLevel] = @BatchLevel
			 AND (dsc.[BatchType] IS NULL 
				   OR dsc.[ContentType] &lt;&gt; 'KEY')
	ORDER BY dmc.[Sequence]

	-- And if no columns against the structure then just indicate to the
	-- user where the fields should go
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO #Default_Query
		SELECT 
			300 AS [Sequence], 
			'''@[Replace this with join field #1...]'' AS [Replace this with join field #1...],' AS [SqlLine]
		INSERT INTO #Default_Query
		SELECT 
			301 AS [Sequence], 
			'''@[Replace this with join field #2...]'' AS [Replace this with join field #2...] (etc)' AS [SqlLine]
	END

	-----------------------
	-- Finish off statement
	-----------------------
		INSERT INTO #Default_Query
		SELECT 
			600 AS [Sequence], 
			') AS T ' AS [SqlLine]

	-------------------------------
	-- Now select the final product
	-------------------------------
	SELECT   [SqlLine]
	FROM     #Default_Query
	ORDER BY [Sequence]
	
	DROP TABLE #Default_Query
	
	COMMIT
END</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Query_Delete] 
    @QueryCode varchar(20)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

	DELETE
	FROM   [dbo].[BI_DM_Query]
	WHERE  [QueryCode] = @QueryCode

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Query_Upsert] 
    @QueryCode           VARCHAR(20),
    @Description         VARCHAR(125),
    @ModelCode           VARCHAR(20),
    @QueryDMX            NVARCHAR(MAX),
    @FeedToSPName        VARCHAR(1024),
    @IconText            VARCHAR(50),
    @IconFilename        VARCHAR(1024),
    @AmendedCellColour   VARCHAR(10)
AS 
    SET NOCOUNT ON 
    SET XACT_ABORT ON  
    
    BEGIN TRAN

    UPDATE [dbo].[BI_DM_Query]
    SET    [QueryCode] = @QueryCode, 
           [Description] = @Description,
           [ModelCode] = @ModelCode,
           [QueryDMX] = @QueryDMX,
           [FeedToSPName] = @FeedToSPName,
           [IconText] = @IconText,
           [IconFilename] = @IconFilename,
           [AmendedCellColour] = @AmendedCellColour
    WHERE  [QueryCode] = @QueryCode

    IF @@ROWCOUNT = 0 BEGIN
		DECLARE @BatchType	VARCHAR(50),
				@BatchLevel	CHAR(1)

		-- Get Batchtype and Batchlevel
		SELECT @BatchType = batchtype,
			   @BatchLevel = batchlevel
		FROM   bi_dm_structure dms,
			   bi_dm_model dmm
		WHERE  dms.structurecode = dmm.structurecode
			   AND dmm.modelcode = @ModelCode
		
        INSERT INTO [dbo].[BI_DM_Query] (
            [QueryCode], 
            [BatchLevel], 
            [BatchType], 
            [Description], 
            [FeedToSPName], 
            [ModelCode], 
            [QueryDMX], 
            [IconText], 
            [IconFilename], 
            [AmendedCellColour])
        SELECT @QueryCode, 
               @BatchLevel, 
               @BatchType, 
               @Description, 
               @FeedToSPName, 
               @ModelCode, 
               @QueryDMX, 
               @IconText, 
               @IconFilename, 
               @AmendedCellColour
    END
    
    COMMIT TRAN</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Cols_Delete] 
    @StructureCode varchar(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

	DELETE FROM [dbo].[BI_DM_Structure_Cols]
	WHERE       [StructureCode] = @StructureCode

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Cols_Insert] 
    @StructureCode varchar(50),
    @BatchType varchar(50),
    @BatchLevel char(1),
    @Sequence int,
    @Column varchar(60),
    @DataType varchar(50),
    @ContentType varchar(50)
AS 
    SET NOCOUNT ON 
    SET XACT_ABORT ON  
    
    BEGIN TRAN

    IF @Sequence = 1 BEGIN
        DELETE FROM [dbo].[BI_DM_Structure_Cols]
        WHERE       [StructureCode] = @StructureCode
    END
    
	INSERT INTO [dbo].[BI_DM_Structure_Cols]
			   ([StructureCode],
				[BatchType],
				[BatchLevel],
				[Sequence],
				[Column],
				[DataType],
				[ContentType])
	SELECT @StructureCode,
		   @BatchType,
		   @BatchLevel,
		   @Sequence,
		   @Column,
		   @DataType,
		   @ContentType

    COMMIT TRAN</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Cols_Select]
          @BatchType  VARCHAR(50),
          @BatchLevel CHAR(1)
-- Purpose: Return Structure Columns either from [BI_DM_Structure_Cols] if existing,
--          or else with default values based on column data types etc
AS
BEGIN
    SET nocount  ON
    SET xact_abort  ON

    -- Get table name used by BatchType/BatchLevel
	DECLARE @TableName AS VARCHAR(100)
	SELECT @TableName = [Table]
      FROM [BI_Tables] 
     WHERE [BatchType] = @BatchType
       AND [BatchLevel] = @BatchLevel

    DECLARE  @Include  AS BIT
    SET @Include = 1
    -- Create temp table using column info from [BI_DM_Structure_Cols] where this
    -- info was saved previously.
    SELECT DISTINCT @Include AS [Include],
                    bc.SEQUENCE,
                    bc.[Column],
                    'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX' AS [Orig_DataType],
                    bdsc.[DataType],
                    bdsc.[ContentType]
    INTO   #structure_cols
    FROM   [BI_Columns] bc
                 INNER JOIN [BI_DM_Structure_Cols] bdsc
                     ON bdsc.[BatchType] = bc.[BatchType]
                            AND bdsc.[BatchLevel] = bc.[BatchLevel]
                            AND bdsc.[Column] = bc.[Column]
    WHERE  bc.[BatchType] = @BatchType
                 AND bc.[BatchLevel] = @BatchLevel

	-- The following lists columns that have not been selected previously.
	-- If one or more columns have already been selected then by defaul the following optional
	-- columns will be flagged as NOT selected. If no columns selected yet then the default is
	-- that all columns are selected for inclusion.
	IF @@ROWCOUNT &gt; 0 BEGIN
	    SET @Include = 0
	END
	
    -- Add to temp table using sys.columns to get column names and datatype where this
    -- info was not saved previously into BI_DM_Structure_Cols.
    INSERT INTO #structure_cols
    SELECT DISTINCT @Include AS [Include],
                    c.column_id,
                    bc.[Column],
                    Type_name(c.user_type_id) AS [Orig_DataType],
                    '' AS [DataType],
                    '' AS [ContentType]
    FROM   [BI_Columns] bc
                 INNER JOIN sys.columns c
                     ON c.object_id = Object_id(bc.[Table])
                            AND c.name = bc.[Column]
                 LEFT OUTER JOIN [BI_DM_Structure_Cols] bdsc
                     ON bdsc.[BatchType] = bc.[BatchType]
                            AND bdsc.[BatchLevel] = bc.[BatchLevel]
                            AND bdsc.[Column] = bc.[Column]
    WHERE  bc.[BatchType] = @BatchType
                 AND bc.[BatchLevel] = @BatchLevel
                 AND bdsc.[BatchType] IS NULL

    UPDATE #structure_cols
    SET    [DataType] = 'TEXT'
    WHERE  [Orig_DataType] IN ('CHAR','NCHAR','VARCHAR','NVARCHAR')
    UPDATE #structure_cols
    SET    [DataType] = 'DATE'
    WHERE  [Orig_DataType] IN ('DATETIME')
    UPDATE #structure_cols
    SET    [DataType] = 'BOOLEAN'
    WHERE  [Orig_DataType] IN ('BINARY','BIT')
    UPDATE #structure_cols
    SET    [DataType] = 'LONG'
    WHERE  [Orig_DataType] LIKE '%INT'
    UPDATE #structure_cols
    SET    [DataType] = 'LONG' /* LONG better than DOUBLE */
    WHERE  [Orig_DataType] IN ('MONEY')

    -- Update Content Type
    -- Update temp table where datatype was not previously saved with default datatype
    -- calculated based on existing column type
	UPDATE #structure_cols
	SET    [ContentType]   = 'KEY'
	WHERE  [Column] IN (SELECT c.column_name AS pkname
						 FROM   information_schema.table_constraints AS pk
								INNER JOIN information_schema.key_column_usage AS c
								  ON pk.table_name = c.table_name
									 AND pk.constraint_name = c.constraint_name
						 WHERE  (pk.constraint_type = 'PRIMARY KEY')
								AND pk.table_name = @TableName)
    UPDATE #structure_cols
    SET    [ContentType] = 'DISCRETE'
    WHERE  [ContentType] = ''
      AND  [DataType] = 'TEXT'
    UPDATE #structure_cols
    SET    [ContentType] = 'CONTINUOUS'
    WHERE  [ContentType] = ''
      AND  [DataType] IN ('LONG','DOUBLE')
    UPDATE #structure_cols
    SET    [ContentType] = 'KEY TIME'
    WHERE  [ContentType] = ''
      AND  [DataType] = 'DATE'

    -- Extract the data to populate into Structure Columns grid
    SELECT [Include],
           [Column],
           [DataType],
           [ContentType]
    FROM     #structure_cols
    ORDER BY [Sequence]

    -- Drop the temp table as finished
    DROP TABLE #structure_cols
END</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Delete] 
    @StructureCode varchar(50)
AS 
    SET NOCOUNT ON 
    SET XACT_ABORT ON  
    
    BEGIN TRAN

    -- Remove structure columns
    DELETE FROM [dbo].[BI_DM_Structure_Cols]
    WHERE       [StructureCode] = @StructureCode

    -- Remove structure itself
    DELETE
    FROM   [dbo].[BI_DM_Structure]
    WHERE  [StructureCode] = @StructureCode

    COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Select] 
    @StructureCode VARCHAR(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	SELECT [StructureCode], [Description], [BatchType], [BatchLevel], [CustomizedDMX], 
           [StructureDMX]
	FROM   [dbo].[BI_DM_Structure] 
	WHERE  ([StructureCode] = @StructureCode OR @StructureCode IS NULL)
	ORDER BY [StructureCode]

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Train_Default] 
    @StructureCode VARCHAR(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	DECLARE @LastSequence	INT
	SELECT @LastSequence = Max([Sequence])
	FROM   [BI_DM_Structure_Cols]
	WHERE  [Structurecode] = @StructureCode
		
	---------------------------
	-- First the Insert portion
	---------------------------
	SELECT   0 AS [Sequence],
			 'INSERT INTO ['
			   + @StructureCode
			   + '] (' AS [SqlLine]
	INTO     #default_training
	FROM     [BI_DM_Structure]
	WHERE    [Structurecode] = @StructureCode

	----------------------
	-- Then the TO columns
	----------------------
	-- If columns set up against structure then create default using these
	INSERT INTO #default_training
	SELECT   [Sequence],
			 '['
			   + [Column]
			   + (CASE 
					WHEN [Sequence] = @LastSequence
					THEN '] '
					ELSE '], '
				  END) AS [SqlLine]
	FROM     [BI_DM_Structure_Cols]
	WHERE    [Structurecode] = @StructureCode
	ORDER BY [Sequence]
	
	-- And if no columns against the structure then just indicate to the
	-- user where the fields should go
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO #default_training
		SELECT 
			1 AS [Sequence], 
			'[Replace this with fields...]' AS [SqlLine]
	END
	
	--------------------------------------------------------------------------
	-- Then close TO columns, and provide beginning of query FROM datasource
	--------------------------------------------------------------------------
	INSERT INTO #default_training
	SELECT 1000 AS [Sequence],
		   ') OpenQuery(BatchItDB, ''SELECT ' AS [SqlLine]

	------------------------
	-- Then the FROM columns
	------------------------
	-- If columns set up against structure then create default using these
	INSERT INTO #default_training
	SELECT   [Sequence]
			   + 1000 AS [Sequence],
			 '['
			   + [Column]
			   + (CASE 
					WHEN [Sequence] = @LastSequence
					THEN '] '
					ELSE '], '
				  END) AS [SqlLine]
	FROM     [BI_DM_Structure_Cols]
	WHERE    [Structurecode] = @StructureCode
	ORDER BY [Sequence]
	
	-- And if no columns against the structure then just indicate to the
	-- user where the fields should go
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO #default_training
		SELECT 
			1001 AS [Sequence], 
			'[Replace this with fields...]' AS [SqlLine]
	END
	
	---------------------------------------------
	-- Finally end the Dmx (including FROM table)
	---------------------------------------------
	INSERT INTO #default_training
	SELECT 2001 AS [Sequence],
		   'FROM ['
			 + bt.[Table]
			 + ']'')' AS [SqlLine]
	FROM   bi_tables bt
		   INNER JOIN [BI_DM_Structure] AS dms
			 ON dms.[BatchType] = bt.[BatchType]
				AND dms.[BatchLevel] = bt.[BatchLevel]
	WHERE  dms.[Structurecode] = @StructureCode

	-------------------------------
	-- Now select the final product
	-------------------------------
	SELECT   [SqlLine]
	FROM     #default_training
	ORDER BY [Sequence]
	
	DROP TABLE #default_training
	
	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Train_Delete] 
    @StructureCode varchar(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

	UPDATE   [dbo].[BI_DM_Structure]
	  SET  TrainingDMX = NULL
	WHERE  [StructureCode] = @StructureCode

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Train_Select] 
    @StructureCode VARCHAR(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	SELECT [StructureCode], [Description], [TrainingDMX] 
	FROM   [dbo].[BI_DM_Structure] 
	WHERE  ([StructureCode] = @StructureCode OR @StructureCode IS NULL)
	ORDER BY [StructureCode]

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Train_Update] 
    @StructureCode varchar(50),
    @TrainingDMX nvarchar(MAX)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

	UPDATE [dbo].[BI_DM_Structure]
	SET    [TrainingDMX] = @TrainingDMX
	WHERE  [StructureCode] = @StructureCode
	
	-- Begin Return Select &lt;- do not remove
	SELECT [StructureCode], [Description], [TrainingDMX] 
	FROM   [dbo].[BI_DM_Structure] 
	WHERE  [StructureCode] = @StructureCode
	ORDER BY [StructureCode]
	-- End Return Select &lt;- do not remove

	COMMIT TRAN</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Structure_Upsert] 
    @StructureCode  VARCHAR(50),
    @Description    VARCHAR(125),
    @BatchType      VARCHAR(50),
    @BatchLevel     CHAR(1),
    @CustomizedDMX  BIT,
    @StructureDMX   NVARCHAR(MAX)
AS 
    SET NOCOUNT ON 
    SET XACT_ABORT ON  
    
    BEGIN TRAN

    UPDATE [dbo].[BI_DM_Structure]
    SET    [Description] = @Description, 
           [BatchType] = @BatchType, 
           [BatchLevel] = @BatchLevel, 
           [CustomizedDMX] = @CustomizedDMX, 
           [StructureDMX] = @StructureDMX
    WHERE  [StructureCode] = @StructureCode

    IF @@ROWCOUNT = 0 BEGIN
        INSERT INTO [dbo].[BI_DM_Structure] (
            [StructureCode], 
            [Description], 
            [BatchType], 
            [BatchLevel], 
            [CustomizedDMX], 
            [StructureDMX], 
            [TrainingDMX])
        SELECT @StructureCode, 
               @Description, 
               @BatchType, 
               @BatchLevel, 
               @CustomizedDMX, 
               @StructureDMX, NULL
    END 

    -- Begin Return Select &lt;- do not remove
    SELECT [StructureCode], [Description], [BatchType], [BatchLevel], [CustomizedDMX], 
           [StructureDMX] 
    FROM   [dbo].[BI_DM_Structure] 
    WHERE  [StructureCode] = @StructureCode
    ORDER BY [StructureCode]
    -- End Return Select &lt;- do not remove

    COMMIT TRAN</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Training_Select] 
    @StructureCode VARCHAR(50)
AS 
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	SELECT [StructureCode], [Description], [TrainingDMX]
	FROM   [dbo].[BI_DM_Structure] 
	WHERE  ([StructureCode] = @StructureCode OR @StructureCode IS NULL)
	ORDER BY [StructureCode]

	COMMIT</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_DM_Training_Update] 
    @StructureCode  VARCHAR(50),
    @TrainingDMX    NVARCHAR(MAX)
AS 
    SET NOCOUNT ON 
    SET XACT_ABORT ON  
    
    BEGIN TRAN

    UPDATE [dbo].[BI_DM_Structure]
    SET    [TrainingDMX] = @TrainingDMX
    WHERE  [StructureCode] = @StructureCode

    COMMIT TRAN</commandtext>
      <comment>Create Data Mining SPs</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [dbo].[BI_AppSettings](
	[Setting] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](512) NOT NULL,
	[Value] [nvarchar](50) NOT NULL,
	[Sequence] [int] NOT NULL,
 CONSTRAINT [PK_BI_Config] PRIMARY KEY CLUSTERED 
(
	[Setting] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>DELETE [dbo].[BI_AppSettings] WHERE [Setting] = N'BatchLocking'</commandtext>
      <commandtext>INSERT INTO [dbo].[BI_AppSettings]([Setting], [Description], [Value], [Sequence])
SELECT N'BatchLocking', N'Type of locking to apply to batches', N'BatchType', 1</commandtext>
      <commandtext>DELETE [dbo].[BI_Options] WHERE [Option_Type] = N'BatchLocking'</commandtext>
      <commandtext>INSERT INTO [dbo].[BI_Options]([Option_Type], [Option_Value], [Option_Text], [Sequence])
SELECT N'BatchLocking', N'BatchType', N'Batch Type (only 1 user working on a batch type at a time)', 1 UNION ALL
SELECT N'BatchLocking', N'Header ID', N'Header ID (only 1 user working per batch at line level/Distribution level at a time)', 2</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_AppSettings_Select] 
    @Setting	nvarchar(50)
AS 
BEGIN
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	SELECT   [Setting],
			 [Description],
			 [Value]
	FROM     [dbo].[BI_AppSettings]
	WHERE    ([Setting] = @Setting
			   OR @Setting IS NULL)
	ORDER BY [Sequence]
	
	COMMIT
END</commandtext>
      <commandtext>CREATE PROC [dbo].[a_sp_BI_AppSettings_Update] 
    @Setting	nvarchar(50),
    @Value		nvarchar(50)
AS 
BEGIN
	SET NOCOUNT ON 
	SET XACT_ABORT ON  
	
	BEGIN TRAN

	UPDATE [dbo].[BI_AppSettings]
	SET    [Value] = @Value
	WHERE  [Setting] = @Setting
	COMMIT TRAN
END</commandtext>
      <commandtext>CREATE TABLE [dbo].[BI_Locks](
	[BatchType] [varchar](255) NOT NULL,
	[HeaderID]  [varchar](50) NOT NULL,
	[LockUser]  [varchar](255) NOT NULL,
	[LockTime]  [datetime] NOT NULL
 CONSTRAINT [PK_BI_Locks] PRIMARY KEY CLUSTERED 
(
	[BatchType], [HeaderID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>ALTER PROCEDURE [dbo].[A_sp_bi_batchtypes_lock_select](
               @BatchType VARCHAR(255)  = NULL,
               @HeaderID  VARCHAR(50)   = NULL)
AS
  BEGIN
	DECLARE @BatchLocking NVARCHAR(50)
	SELECT @BatchLocking = [Value]
	  FROM [dbo].[BI_AppSettings]
	  WHERE [Setting] = 'BatchLocking'
	
	IF @BatchLocking = 'Header ID' BEGIN
		SELECT l.[BatchType],
			   l.[HeaderID],
			   l.[LockUser],
			   u.[FirstName],
			   u.[SurName],
			   l.[LockTime]
		  FROM [dbo].[BI_Locks] l
			 LEFT OUTER JOIN [BI_Users] u
			   ON u.userid = l.lockuser
		WHERE  (l.[BatchType] = @BatchType OR @BatchType IS NULL) 
			   AND (l.[HeaderID] = @HeaderID OR @HeaderID IS NULL)
	END
	ELSE BEGIN
		IF @BatchType IS NULL BEGIN
			-- Get locks for all batches and users
			SELECT bt.[BatchType],
				   '' AS [HeaderID],
				   bt.[LockUser],
				   u.[FirstName],
				   u.[SurName],
				   bt.[LockTime]
			FROM     [BI_batchtypes] bt
					 LEFT OUTER JOIN [BI_Users] u
					   ON u.userid = bt.lockuser
			WHERE    bt.lockuser IS NOT NULL
			ORDER BY [BatchType]
		END
		ELSE BEGIN
			-- Get locks for specific batch (and exclude current user)
			SELECT bt.[BatchType],
				   '' AS [HeaderID],
				   bt.[LockUser],
				   u.[FirstName],
				   u.[SurName],
				   bt.[LockTime]
			FROM     [BI_batchtypes] bt
					 LEFT OUTER JOIN [BI_Users] u
					   ON u.userid = bt.lockuser
			WHERE    bt.lockuser IS NOT NULL 
					 AND bt.lockuser != system_user
					 AND bt.[BatchType] = @BatchType
			ORDER BY [BatchType]
		END
	END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [dbo].[A_sp_bi_batchtypes_lock_update](
               @BatchType VARCHAR(255),
               @HeaderID  VARCHAR(50)  = NULL,
               @Lock      INT)
AS
  BEGIN
    DECLARE  @BatchLocking NVARCHAR(50)
    SELECT @BatchLocking = [Value]
    FROM   [dbo].[BI_AppSettings]
    WHERE  [Setting] = 'BatchLocking'

    IF @BatchLocking = 'Header ID'
      BEGIN
        -- If setting lock then first delete any potential locks that
        -- may exist for this batch type/header ID (just in case to prevent Unique
        -- key contraint).
        -- If removing lock then only the delete statement is executed
        DELETE [BI_Locks]
        WHERE  [BatchType] = @BatchType
               AND [HeaderID] = @HeaderID

        IF @Lock = 1
          BEGIN
            INSERT INTO [BI_Locks]
                       ([BatchType],
                        [HeaderID],
                        [LockUser],
                        [LockTime])
            VALUES     (@BatchType,
                        @HeaderID,
                        system_user,
                        Getdate())
          END
      END
    ELSE
      BEGIN
        IF @Lock = 1
          BEGIN
            UPDATE [BI_batchtypes]
            SET    [LockUser] = system_user,
                   [LockTime] = Getdate()
            WHERE  [BatchType] = @BatchType
          END
        ELSE
          BEGIN
            UPDATE [BI_batchtypes]
            SET    [LockUser] = NULL,
                   [LockTime] = NULL
            WHERE  [BatchType] = @BatchType
          END
      END
      
  END</commandtext>
      <comment>BatchLocking Changes</comment>
    </command>
    <command>
      <commandtext>/*
EXEC a_sp_BI_Assign_Specific_Access 'Inventory Management', 'Accountant'
*/
CREATE PROCEDURE [dbo].[a_sp_BI_Assign_Specific_Access]
(
	@BatchType varchar (200)
	, @RoleId varchar (50)
)
AS--drop table #E drop table #D
BEGIN--DECLARE @BatchType varchar(200), @RoleId varchar(50) SET @BatchType = 'Inventory Management' SET @RoleId = 'Clerk'
	
	--see what exists against that Role for that BatchType
	--
	select DISTINCT R.RoleId, A.AccessId INTO #E  --select * from #E
	from BI_Access A
		INNER JOIN BI_RoleAccess R (nolock)
			ON A.AccessId = R.AccessId
			AND @RoleId = R.RoleId
	where A.AccessId like @BatchType + '%'
	--
	
	--All possible AccessId's
	select A.AccessId into #D --select * from #D
	from BI_Access A		
	where A.AccessId like @BatchType + '%'
	
	
	--Filter out existing 
	DELETE FROM #D
	WHERE AccessId in (SELECT AccessId from #E)
	
	--#D is the list to be added 
	INSERT INTO [dbo].[BI_RoleAccess] ([AccessId], [RoleId]) 
    SELECT AccessId, @RoleId as RoleId
    FROM #D		
	
END</commandtext>
      <comment>SP to assign all access for specific batch type</comment>
    </command>
  </Version>
  <Version number="1.0.8.0">
    <command>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_DM_Structure_Train_Default] 
    @StructureCode VARCHAR(50)
AS 
BEGIN
	SET NOCOUNT ON 
	SET XACT_ABORT ON  

	BEGIN TRAN

	DECLARE @LastSequence	INT
	SELECT @LastSequence = Max([Sequence])
	FROM   [BI_DM_Structure_Cols]
	WHERE  [Structurecode] = @StructureCode
		
	---------------------------
	-- First the Insert portion
	---------------------------
	SELECT   0 AS [Sequence],
			 'INSERT INTO ['
			   + @StructureCode
			   + '] (' AS [SqlLine]
	INTO     #default_training
	FROM     [BI_DM_Structure]
	WHERE    [Structurecode] = @StructureCode

	----------------------
	-- Then the TO columns
	----------------------
	-- If columns set up against structure then create default using these
	INSERT INTO #default_training
	SELECT   [Sequence],
			 '['
			   + [Column]
			   + (CASE 
					WHEN [Sequence] = @LastSequence
					THEN '] '
					ELSE '], '
				  END) AS [SqlLine]
	FROM     [BI_DM_Structure_Cols]
	WHERE    [Structurecode] = @StructureCode
	ORDER BY [Sequence]
	
	-- And if no columns against the structure then just indicate to the
	-- user where the fields should go
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO #default_training
		SELECT 
			1 AS [Sequence], 
			'[Replace this with fields...]' AS [SqlLine]
	END
	
	--------------------------------------------------------------------------
	-- Then close TO columns, and provide beginning of query FROM datasource
	--------------------------------------------------------------------------
	INSERT INTO #default_training
	SELECT 1000 AS [Sequence],
		   ') OpenQuery(DS_" + DB_NAME() + ", ''SELECT ' AS [SqlLine]

	------------------------
	-- Then the FROM columns
	------------------------
	-- If columns set up against structure then create default using these
	INSERT INTO #default_training
	SELECT   [Sequence]
			   + 1000 AS [Sequence],
			 '['
			   + [Column]
			   + (CASE 
					WHEN [Sequence] = @LastSequence
					THEN '] '
					ELSE '], '
				  END) AS [SqlLine]
	FROM     [BI_DM_Structure_Cols]
	WHERE    [Structurecode] = @StructureCode
	ORDER BY [Sequence]
	
	-- And if no columns against the structure then just indicate to the
	-- user where the fields should go
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO #default_training
		SELECT 
			1001 AS [Sequence], 
			'[Replace this with fields...]' AS [SqlLine]
	END
	
	---------------------------------------------
	-- Finally end the Dmx (including FROM table)
	---------------------------------------------
	INSERT INTO #default_training
	SELECT 2001 AS [Sequence],
		   'FROM ['
			 + bt.[Table]
			 + ']'')' AS [SqlLine]
	FROM   bi_tables bt
		   INNER JOIN [BI_DM_Structure] AS dms
			 ON dms.[BatchType] = bt.[BatchType]
				AND dms.[BatchLevel] = bt.[BatchLevel]
	WHERE  dms.[Structurecode] = @StructureCode

	-------------------------------
	-- Now select the final product
	-------------------------------
	SELECT   [SqlLine]
	FROM     #default_training
	ORDER BY [Sequence]
	
	DROP TABLE #default_training
	
	COMMIT
END</commandtext>
      <comment>Data Mining amendments to improve setup</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Get_Columns](
               @BatchType		VARCHAR(50),
               @BatchLevel		CHAR(1),
               @Table			VARCHAR(100),
               @AlwaysGetRename	INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected 
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   bi_columns bic
        WHERE  bic.batchtype = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
	SELECT @BatchType batchtype,
		   @BatchLevel batchlevel,
		   @Table [Table],
		   name [Column],
		   (CASE 
			  WHEN @AlwaysGetRename = 1
			  THEN name
			  ELSE NULL
			END) [Rename To],
		   column_id [Sequence],
		   NULL [LookUp_SP],
		   NULL [Select_SP],
		   NULL [Validation_SP],
		   0 [Hide],
		   0 [ReadOnly],
		   0 [ReadOnly Existing],
		   0 [Filter On],
		   0 [Required],
		   0 [Batch ID],
		   0 [Line ID],
		   0 [Distr ID],
		   0 [Status Col],
		   NULL [Format],
		   'NotSet' [Alignment]
	FROM   sys.columns sc
	WHERE  object_id = Object_id(@Table)
		   AND NOT EXISTS (SELECT 'x'
						   FROM   bi_columns bic
						   WHERE  bic.batchtype = @BatchType
								  AND bic.[BatchLevel] = @BatchLevel
								  AND bic.[Table] = @Table
								  AND bic.[Column] = sc.name)
    UNION 
	SELECT   batchtype,
			 [BatchLevel],
			 [Table],
			 [Column],
			 (CASE 
				WHEN @AlwaysGetRename = 1
				THEN Isnull(Nullif([Rename To],''),[Column])
				ELSE [Rename To]
			  END) [Rename To],
			 [Sequence],
			 [LookUp_SP],
			 [Select_SP],
			 [Validation_SP],
			 [Hide],
			 [ReadOnly],
			 [ReadOnly Existing],
			 [Filter On],
			 [Required],
			 [Batch ID],
			 [Line ID],
			 [Distr ID],
			 [Status Col],
			 [Format],
			 Isnull([Alignment],'NotSet') [Alignment]
	FROM     bi_columns bic
	WHERE    batchtype = @BatchType
			 AND [BatchLevel] = @BatchLevel
			 AND [Table] = @Table
			 AND EXISTS (SELECT 'x'
						 FROM   sys.columns sc
						 WHERE  object_id = Object_id(bic.[Table])
								AND name = bic.[Column])
	ORDER BY batchtype,
			 [Table],
			 [Sequence]

  END</commandtext>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_Columns_Insert] (
                            @BatchType varchar(50),
                            @BatchLevel char(1),
                            @Table varchar(100),
                            @Column varchar(100),
                            @RenameTo varchar(100),
                            @Sequence int,
                            @Lookup_SP varchar(100),
                            @Select_SP varchar(100),
                            @Validation_SP varchar(100),
                            @Hide bit,
                            @ReadOnly bit,
                            @ReadOnlyExisting bit,
                            @FilterOn bit,
                            @Required bit,
                            @BatchID bit,
                            @LineID bit,
                            @DistrID bit,
                            @StatusCol bit,
                            @Format varchar(50),
                            @Alignment varchar(50)) AS
        BEGIN
            SET NOCOUNT OFF;

            DECLARE @Computed bit

            SELECT @Computed = ISNULL(is_computed, 0)
              FROM sys.columns c 
                WHERE c.object_id = OBJECT_ID(@Table)
                  AND name = @Column

            INSERT INTO [dbo].[BI_Columns] 
            (
              BatchType, 
              [BatchLevel], 
              [Table], 
              [Column], 
              [Rename To], 
              [Sequence], 
              [LookUp_SP],
              [Select_SP],
              [Validation_SP],
              [Hide],
              [ReadOnly],
              [ReadOnly Existing],
              [Filter On],
              [Required],
              [Batch ID],
              [Line ID],
              [Distr ID],
              [Status Col],
              [Computed],
              [Format],
        [Alignment]
            ) 
            VALUES 
            (
              @BatchType,
              @BatchLevel,
              @Table,
              @Column,
              @RenameTo,
              @Sequence,
              @LookUp_SP,
              @Select_SP,
              @Validation_SP,
              @Hide,
              @ReadOnly,
              @ReadOnlyExisting,
              @FilterOn,
              @Required,
              @BatchID,
              @LineID,
              @DistrID,
              @StatusCol,
              @Computed,
              @Format,
        @Alignment
            )

            IF @@ERROR&gt;0 BEGIN
                RAISERROR ('Insert BI_Columns Failed',16,1) WITH LOG
                ROLLBACK TRANSACTION
                RETURN 1
            END
                    
            EXEC [a_sp_BI_Get_Columns] @BatchType, @Table, @BatchLevel, 0
        END</commandtext>
      <comment>Filter Improvements</comment>
    </command>
  </Version>
  <Version number="1.0.9.0">
    <command>
      <commandtext>ALTER PROCEDURE [dbo].[a_sp_BI_BatchTypes_Lock_Select](
               @BatchType VARCHAR(255)  = NULL,
               @HeaderID  VARCHAR(50)   = NULL)
AS
  BEGIN
    DECLARE @BatchLocking NVARCHAR(50)
    SELECT @BatchLocking = [Value]
      FROM [dbo].[BI_AppSettings]
      WHERE [Setting] = 'BatchLocking'
    
    IF @BatchLocking = 'Header ID' BEGIN
        SELECT l.[BatchType],
               l.[HeaderID],
               l.[LockUser],
               u.[FirstName],
               u.[SurName],
               l.[LockTime]
          FROM [dbo].[BI_Locks] l
             LEFT OUTER JOIN [BI_Users] u
               ON u.userid = l.lockuser
        WHERE  (l.[BatchType] = @BatchType OR @BatchType IS NULL) 
               AND (l.[HeaderID] = @HeaderID OR @HeaderID IS NULL)
               AND (l.lockuser != system_user OR @BatchType IS NULL)
    END
    ELSE BEGIN
        IF @BatchType IS NULL BEGIN
            -- Get locks for all batches and users
            SELECT bt.[BatchType],
                   '' AS [HeaderID],
                   bt.[LockUser],
                   u.[FirstName],
                   u.[SurName],
                   bt.[LockTime]
            FROM     [BI_batchtypes] bt
                     LEFT OUTER JOIN [BI_Users] u
                       ON u.userid = bt.lockuser
            WHERE    bt.lockuser IS NOT NULL
            ORDER BY [BatchType]
        END
        ELSE BEGIN
            -- Get locks for specific batch (and exclude current user)
            SELECT bt.[BatchType],
                   '' AS [HeaderID],
                   bt.[LockUser],
                   u.[FirstName],
                   u.[SurName],
                   bt.[LockTime]
            FROM     [BI_batchtypes] bt
                     LEFT OUTER JOIN [BI_Users] u
                       ON u.userid = bt.lockuser
            WHERE    bt.lockuser IS NOT NULL 
                     AND bt.lockuser != system_user
                     AND bt.[BatchType] = @BatchType
            ORDER BY [BatchType]
        END
    END
  END</commandtext>
      <commandtext>ALTER PROC [dbo].[a_sp_BI_Setup_New_Access]
-- This stored procedure is used to re-create all access permutations
-- To run: EXEC a_sp_BI_Setup_New_Access
AS
  BEGIN
    SET nocount  ON;
    SET xact_abort  ON;
    BEGIN TRANSACTION;
    ALTER TABLE [dbo].[BI_RoleAccess]
    DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    -- Delete existing access
    DELETE [dbo].[BI_Access]
    ----------------------------------------------------------
    -- Insert Access not related to customizable batch screens
    ----------------------------------------------------------
    INSERT INTO [dbo].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'menuBatchEntry',
           'Batch Entry Menu Option'
    UNION ALL
    SELECT 'menuReports',
           'Configure Report Menus'
    UNION ALL
    SELECT 'menuConfiguration',
           'Configuration Menu Function'
    UNION ALL
    SELECT 'menuAccess',
           'Configure Access'
    UNION ALL
    SELECT 'menuBatchCategories',
           'Configure Batch Categories'
    UNION ALL
    SELECT 'menuBatchTypes',
           'Configure Batch Types'
    UNION ALL
    SELECT 'Batch Types Update',
           'Configure Batch Types - Update existing entries'
    UNION ALL
    SELECT 'menuBatchScreenSetup',
           'Configure Batch Screen Setup'
    UNION ALL
    SELECT 'Batch Screen Setup Update',
           'Configure Batch Screen Setup - Update existing entries'
    UNION ALL
    SELECT 'menuReportCategories',
           'Configure Report Categories'
    UNION ALL
    SELECT 'menuReportItems',
           'Configure Report Items'
    UNION ALL
    SELECT 'menuWizard',
           'Configure Wizard Facility'
    UNION ALL
    SELECT 'menuDataMining',
           'Configure Data Mining'
    UNION ALL
    SELECT 'menuAppSettings',
           'Configure Application Settings'
    UNION ALL
    SELECT 'menuReleaseLocks',
           'Release Batch Locks'
    ------------------------------
    -- Insert Access per BatchType
    ------------------------------
    INSERT INTO [dbo].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'DM '
             + [QueryCode] COLLATE sql_latin1_general_cp1_ci_as,
           'Data Mining - '
             + [QueryCode]
    FROM   [BI_DM_Query]
    ------------------------------
    -- Insert Access per BatchType
    ------------------------------
    INSERT INTO [dbo].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype,
           batchtype
             + ' Access Screen'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Add',
           batchtype
             + ' - Add new entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Delete',
           batchtype
             + ' - Delete existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Update',
           batchtype
             + ' - Update existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbOpen',
           batchtype
             + ' - Open Lines Screen'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbCalculate',
           batchtype
             + ' - Calculate Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbValidate',
           batchtype
             + ' - Validate Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbApprove',
           batchtype
             + ' - Approve Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbProcess',
           batchtype
             + ' - Process Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines Add',
           batchtype
             + ' Lines - Add new entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines Delete',
           batchtype
             + ' Lines - Delete existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines Update',
           batchtype
             + ' Lines - Update existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines tsbOpen',
           batchtype
             + ' Lines - Open Distribution Screen'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines tsbCalculate',
           batchtype
             + ' Lines - Calculate Lines'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines tsbValidate',
           batchtype
             + ' Lines - Validate Lines'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions Add',
           batchtype
             + ' Distributions - Add new entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions Delete',
           batchtype
             + ' Distributions - Delete existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions Update',
           batchtype
             + ' Distributions - Update existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions tsbCalculate',
           batchtype
             + ' Distributions - Calculate Distributions'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions tsbValidate',
           batchtype
             + ' Distributions - Validate Distributions'
    FROM   bi_batchtypes
    UNION ALL
    SELECT 'Rpt Cat '
             + rptcategoryid COLLATE sql_latin1_general_cp1_ci_as,
           'Report Category - '
             + rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_rptcategories
    UNION ALL
    SELECT 'Batch Cat '
             + batchcatcd COLLATE sql_latin1_general_cp1_ci_as,
           'Batch Category - '
             + batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_batchcategory
    WHERE batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */
    -- Delete existing roles referring to access
    DELETE r FROM [dbo].[BI_RoleAccess] r
    WHERE  NOT EXISTS (SELECT 'x'
                       FROM   [dbo].[BI_Access] a
                       WHERE  a.[AccessId] = r.[AccessId])
    ALTER TABLE [dbo].[BI_RoleAccess]
    WITH CHECK ADD CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY ( [AccessId] ) REFERENCES [dbo].[BI_Access]([AccessId])
    ALTER TABLE [dbo].[BI_RoleAccess]
     CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    COMMIT;
    RAISERROR (N'[dbo].[BI_Access]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
  END</commandtext>
      <comment>Various</comment>
    </command>
  </Version>
  <Version number="1.0.10.0">
    <command>
      <commandtext>CREATE  PROCEDURE [dbo].[a_sp_BI_GetSpParamInfo]
          @SpName		VARCHAR(1024),
          @NumParams	INT
AS
BEGIN
	DECLARE @CountParams	INT
	DECLARE @CurrDBName		VARCHAR(50)

	SELECT @CurrDBName = DB_NAME()
	
	SELECT @CountParams = Count(* )
	FROM   modelwarebatchprocessing.econnect.a_tbl_econnect_sp_paramterinfo
	WHERE  spname = @SpName

	-- If different number of params than expected then
	-- recalculate parameter entries to ensure that this is correct
	IF @CountParams &lt;&gt; @NumParams BEGIN
	    EXEC ModelwareBatchProcessing.[dbo].[a_sp_eConnect_BuildSQLTableForSP]
        @DBName = @CurrDBName
        ,@SPName = @SpName
        ,@Debug = 0
	END
	
	SELECT *
	FROM   modelwarebatchprocessing.econnect.a_tbl_econnect_sp_paramterinfo
	WHERE  spname = @SpName
END</commandtext>
      <commandtext>CREATE PROC [dbo].[A_sp_bi_storedprocedures_list]
-- This stored procedure is used to re-create SP information in ModelWareBatchProcessing
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   dbo.bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   dbo.bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   dbo.bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesValidationSP' [CallEvent],
                    NULL [Column],
                    linesvalidationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesvalidationsp IS NOT NULL 
           AND linesvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesCalculationSP' [CallEvent],
                    NULL [Column],
                    linescalculationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linescalculationsp IS NOT NULL 
           AND linescalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterLoadSP' [CallEvent],
                    NULL [Column],
                    linesafterloadsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesafterloadsp IS NOT NULL 
           AND linesafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterSaveSP' [CallEvent],
                    NULL [Column],
                    linesaftersavesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesaftersavesp IS NOT NULL 
           AND linesaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    linesafterdeletesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesafterdeletesp IS NOT NULL 
           AND linesafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
  END</commandtext>
      <comment>Improve performance on SP execution</comment>
    </command>
  </Version>
  <Version number="1.0.11.0">
    <command>
      <commandtext>CREATE TABLE [BI_SP_ParameterInfo](
	[SPName] [sysname] NOT NULL,
	[ParameterName] [sysname] NULL,
	[ParameterID] [int] NOT NULL,
	[TypeName] [sysname] NOT NULL,
	[ParameterSize] [smallint] NOT NULL,
	[RequiredParm] [int] NULL,
	[OutputParm] [int] NULL,
	[ColumnName]  AS (replace([ParameterName],'@',''))
)</commandtext>
      <commandtext>CREATE UNIQUE CLUSTERED INDEX BI_SP_ParameterInfo_Index ON BI_SP_ParameterInfo (SPName, ParameterName)</commandtext>
      <commandtext>CREATE PROCEDURE [a_sp_BI_RecordSpParamInfo](
               @SPName VARCHAR(50)  = ' ')
AS
  BEGIN
    SET nocount  ON;
    --
    DELETE FROM BI_SP_ParameterInfo
    WHERE       spname = @SPName
    --
    DECLARE  @nSQL VARCHAR(MAX)
    SET @nSQL = 'SELECT
                        SPName = SP.Name
                        , ParameterName = P.name
                        , ParameterID = P.parameter_id
                        , TypeName = T.name
                        , ParameterSize = P.max_length
                        , RequiredParm = convert(int,0)
                        , OutputParm = is_output
                    FROM '
                  + 'sys.parameters P WITH (nolock)
                            inner join sys.objects SP WITH (nolock)
                                on SP.type = ''' + 'P' + '''
                                and SP.name = '''
                  + @SPName + '''
                                and P.[object_id] = SP.[object_id]
                            inner join sys.types T
                                on T.system_type_id = P.system_type_id
                        order by P.Parameter_id'
    --
    INSERT INTO BI_SP_ParameterInfo
    EXEC( @nSQL)

    UPDATE a
    SET    requiredparm = 1
    FROM   BI_SP_ParameterInfo a
           INNER JOIN BI_SP_ParameterInfo rp WITH (nolock)
             ON rp.spname = a.spname
                AND rp.parametername = a.parametername
  END</commandtext>
      <commandtext>ALTER PROCEDURE [a_sp_BI_GetSpParamInfo]
          @SpName		VARCHAR(1024),
          @NumParams	INT
AS
BEGIN
	DECLARE @CountParams	INT
	
	SELECT @CountParams = Count(* )
	FROM   BI_SP_ParameterInfo
	WHERE  spname = @SpName

	-- If different number of params than expected then
	-- recalculate parameter entries to ensure that this is correct
	IF @CountParams &lt;&gt; @NumParams BEGIN
		EXEC a_sp_BI_RecordSpParamInfo @SPName
	END
	
	SELECT *
	FROM   BI_SP_ParameterInfo
	WHERE  spname = @SpName
END</commandtext>
      <commandtext>ALTER PROC [a_sp_bi_setup_storedprocedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                           
    -- Was going to create table to store SP info in but will do this later.
    -- Here is suggested format (create primary key too)
    --CREATE TABLE [BI_Tables](
    -- [BatchType]   [varchar](50) NOT NULL,
    -- [BatchLevel]  [char](1) NOT NULL,
    -- [EventCategory]  [varchar](100) NOT NULL,
    -- [EventName]   [varchar](100) NULL
    -- [EventDescription] [varchar](256) NULL
    -- [SPCommand]   [varchar](512) NULL
    -- [Status]   [varchar](50) NULL
    --)
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   dbo.bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   dbo.bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   dbo.bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linesvalidationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linesvalidationsp IS NOT NULL 
           AND linesvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linescalculationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linescalculationsp IS NOT NULL 
           AND linescalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linesafterloadsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linesafterloadsp IS NOT NULL 
           AND linesafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linesaftersavesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linesaftersavesp IS NOT NULL 
           AND linesaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linesafterdeletesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  linesafterdeletesp IS NOT NULL 
           AND linesafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   dbo.bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
      
        SELECT 'Processing SP: '
                 + @SP_Name AS storedprocedure
               
        -- If parameters exist (i.e. something after a space) then 
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name) &gt; 0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                            
        -- Now process SP to generate info about it
        EXEC A_sp_bi_recordspparaminfo
          @SP_Name
          
        SELECT 'Result Status: '
                 + Convert(VARCHAR,@return_value) AS [Status]
               
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROCEDURE [a_sp_bi_validate_sp](
               @SP VARCHAR(100))
AS
  BEGIN
    DECLARE  @Count INT
                    
    SELECT @Count = Count(* )
    FROM   sys.procedures
    WHERE  object_id = Object_id(@SP)
                       
    IF @Count = 0
      BEGIN
        SELECT parameter = 'INVALID SP'
      END
    ELSE
      BEGIN
        SELECT   parameter = parametername
                               + ' ('
                               + Rtrim(typename
                                         + ' '
                                         + Cast(parametersize AS VARCHAR))
                               + ')'
        FROM     bi_sp_parameterinfo
        WHERE    spname = @SP
        ORDER BY parameterid
      END
  END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[a_sp_BI_Replace_BatchType_Config]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[a_sp_BI_Replace_BatchType_Config]</commandtext>
      <commandtext>CREATE PROCEDURE [a_sp_BI_Replace_BatchType_Config] 
-- =============================================
-- Author:		 R Blomstrand
-- Create date:  03/06/2009
-- Description:	 Generates SQL command required to replace batch type
--               configuration settings against a specified batch type. 
--               Also rebuilds all referenced SP info
-- Instructions: Run this SP specifying the relevant batch type as a parameter
--               from the database with the updated configuration. Example:
--                    EXEC a_sp_BI_Replace_BatchType_Config 'Invoices'
--               Copy the SQL commands output to Results and run these on the
--               database that one wishes to update.
-- =============================================
	@BatchType varchar(50) = 'XXX'
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Create temp table to use to generate the SQL commands (will be selected from at end)
	create table #sp_replacebatch (
	  SQLCommand	varchar(MAX))

	-- Generate SQL commands to delete the existing config data for the specified batch type
	insert into #sp_replacebatch values ('DELETE BI_Columns where BatchType = ''' + @BatchType + '''')
	insert into #sp_replacebatch values ('DELETE BI_Tables where BatchType = ''' + @BatchType + '''')
	insert into #sp_replacebatch values ('DELETE BI_BatchTypes where BatchType = ''' + @BatchType + '''')

	-- Now generate insert commands for specified batch type
	DECLARE @FromCommand VARCHAR(256)
	SET @FromCommand = 'from BI_BatchTypes where BatchType = ''' + @BatchType + ''''
	insert into #sp_replacebatch execute sp_generate_inserts 'BI_BatchTypes', @from = @FromCommand
	SET @FromCommand = 'from BI_Tables where BatchType = ''' + @BatchType + ''''
	insert into #sp_replacebatch execute sp_generate_inserts 'BI_Tables', @from = @FromCommand
	SET @FromCommand = 'from BI_Columns where BatchType = ''' + @BatchType + ''''
	insert into #sp_replacebatch execute sp_generate_inserts 'BI_Columns', @from = @FromCommand

	-- Finally generate command to details of all SPs used against the specified batch type
	insert into #sp_replacebatch values ('EXEC dbo.a_sp_BI_Setup_StoredProcedures')

	-- Output everything from temp table for user
	select * from #sp_replacebatch
	
	-- And frop the temp table as finished
	drop table #sp_replacebatch
END</commandtext>
      <commandtext>ALTER PROC [a_sp_bi_storedprocedures_list]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   dbo.bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   dbo.bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   dbo.bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesValidationSP' [CallEvent],
                    NULL [Column],
                    linesvalidationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesvalidationsp IS NOT NULL 
           AND linesvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesCalculationSP' [CallEvent],
                    NULL [Column],
                    linescalculationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linescalculationsp IS NOT NULL 
           AND linescalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterLoadSP' [CallEvent],
                    NULL [Column],
                    linesafterloadsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesafterloadsp IS NOT NULL 
           AND linesafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterSaveSP' [CallEvent],
                    NULL [Column],
                    linesaftersavesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesaftersavesp IS NOT NULL 
           AND linesaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    linesafterdeletesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  linesafterdeletesp IS NOT NULL 
           AND linesafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   dbo.bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
  END</commandtext>
      <commandtext>IF EXISTS(SELECT * FROM sys.procedures WHERE NAME = 'a_sp_BI_SetupSearch')
				BEGIN
				    DROP PROCEDURE [a_sp_BI_SetupSearch]
				END</commandtext>
      <comment>Cater for Cloud - remove need for separate ModelwareBatchProcessing database</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [a_sp_bi_batchtypes_lock_select](
               @BatchType		VARCHAR(255)  = NULL,
               @HeaderID		VARCHAR(50)  = NULL,
               @WindowsUserName	VARCHAR(255)  = NULL)
AS
  BEGIN
    DECLARE  @BatchLocking NVARCHAR(50)
    SELECT @BatchLocking = [Value]
    FROM   [BI_AppSettings]
    WHERE  [Setting] = 'BatchLocking'
                           
    IF @BatchLocking = 'Header ID'
      BEGIN
        SELECT l.[BatchType],
               l.[HeaderID],
               l.[LockUser],
               u.[FirstName],
               u.[SurName],
               l.[LockTime]
        FROM   [BI_Locks] l
               LEFT OUTER JOIN [BI_Users] u
                 ON u.userid = l.lockuser
        WHERE  (l.[BatchType] = @BatchType
                 OR @BatchType IS NULL)
               AND (l.[HeaderID] = @HeaderID
                     OR @HeaderID IS NULL)
               AND (l.lockuser != @WindowsUserName
                     OR @BatchType IS NULL)
      END
    ELSE
      BEGIN
        IF @BatchType IS NULL
          BEGIN
            -- Get locks for all batches and users
            SELECT bt.[BatchType],
                   '' AS [HeaderID],
                   bt.[LockUser],
                   u.[FirstName],
                   u.[SurName],
                   bt.[LockTime]
            FROM     [BI_batchtypes] bt
                     LEFT OUTER JOIN [BI_Users] u
                       ON u.userid = bt.lockuser
            WHERE    bt.lockuser IS NOT NULL
            ORDER BY [BatchType]
          END
        ELSE
          BEGIN
            -- Get locks for specific batch (and exclude current user)
            SELECT bt.[BatchType],
                   '' AS [HeaderID],
                   bt.[LockUser],
                   u.[FirstName],
                   u.[SurName],
                   bt.[LockTime]
            FROM     [BI_batchtypes] bt
                     LEFT OUTER JOIN [BI_Users] u
                       ON u.userid = bt.lockuser
            WHERE    bt.lockuser IS NOT NULL 
                     AND bt.lockuser != @WindowsUserName
                     AND bt.[BatchType] = @BatchType
            ORDER BY [BatchType]
          END
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [a_sp_bi_batchtypes_lock_update](
               @BatchType       VARCHAR(255),
               @HeaderID        VARCHAR(50)  = NULL,
               @Lock            INT,
               @WindowsUserName VARCHAR(255))
AS
  BEGIN
    DECLARE  @BatchLocking NVARCHAR(50)
    SELECT @BatchLocking = [Value]
    FROM   [BI_AppSettings]
    WHERE  [Setting] = 'BatchLocking'
                       
    IF @BatchLocking = 'Header ID'
      BEGIN
        -- If setting lock then first delete any potential locks that
        -- may exist for this batch type/header ID (just in case to prevent Unique
        -- key contraint).
        -- If removing lock then only the delete statement is executed
        DELETE [BI_Locks]
        WHERE  [BatchType] = @BatchType
               AND [HeaderID] = @HeaderID
                                
        IF @Lock = 1
          BEGIN
            INSERT INTO [BI_Locks]
                       ([BatchType],
                        [HeaderID],
                        [LockUser],
                        [LockTime])
            VALUES     (@BatchType,
                        @HeaderID,
                        @WindowsUserName,
                        Getdate())
          END
      END
    ELSE
      BEGIN
        IF @Lock = 1
          BEGIN
            UPDATE [BI_batchtypes]
            SET    [LockUser] = @WindowsUserName,
                   [LockTime] = Getdate()
            WHERE  [BatchType] = @BatchType
          END
        ELSE
          BEGIN
            UPDATE [BI_batchtypes]
            SET    [LockUser] = NULL,
                   [LockTime] = NULL
            WHERE  [BatchType] = @BatchType
          END
      END
            
  END</commandtext>
      <commandtext>ALTER PROC [a_sp_bi_check_access]
          @AccessId        VARCHAR(255),
          @WindowsUserName VARCHAR(255)
AS
  BEGIN
    SET nocount  ON
    
    DECLARE  @CountAccessUsers INT
                               
    -- Initialize count of users who can get to security access screen
    SELECT @CountAccessUsers = 999
                               
    -- Count users who can get to security access screen (both Configuration
    -- menu option and Access screen
    IF @AccessId = 'menuConfiguration'
        OR @AccessId = 'menuAccess'
      BEGIN
        SELECT @CountAccessUsers = Count(* )
        FROM   bi_users u,
               bi_roleaccess ra
        WHERE  ra.roleid = u.roleid
               AND ra.accessid = 'menuConfiguration'
                                 
        IF @CountAccessUsers &gt; 0
          BEGIN
            SELECT @CountAccessUsers = Count(* )
            FROM   bi_users u,
                   bi_roleaccess ra
            WHERE  ra.roleid = u.roleid
                   AND ra.accessid = 'menuAccess'
          END
      END
      
    IF @CountAccessUsers = 0
      BEGIN
        -- If checking for access to Configuration menu option or to
        -- Access screen, and if no other users have access to both of
        -- these, then grant the user access to both of these.
        -- Purpose is to allow initial users access to this security
        -- screen until somebody has been set up as the administrator
        -- of this.
        SELECT 1 accessgranted
      END
    ELSE
      BEGIN
        -- Either not checking access to Configuration menu option / Access
        -- screen, or else other users have access to these.
        SELECT Count(* ) accessgranted
        FROM   bi_users u,
               bi_roleaccess ra
        WHERE  ra.roleid = u.roleid
               AND ra.accessid = @AccessId
               AND u.userid = @WindowsUserName
      END
  END</commandtext>
      <commandtext>ALTER PROC [a_sp_bi_filters_insert]
          @OldFilterID     INT,
          @BatchType       VARCHAR(50),
          @BatchLevel      CHAR(1),
          @FilterDescr     VARCHAR(255),
          @FilterOwner     VARCHAR(255),
          @FilterSQL       VARCHAR(MAX),
          @WindowsUserName VARCHAR(255)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
                              
    BEGIN TRAN
                              
    IF @OldFilterID = 0
      BEGIN
        INSERT INTO [BI_Filters]
                   ([BatchType],
                    [BatchLevel],
                    [FilterDescr],
                    [FilterOwner],
                    [FilterSQL])
        SELECT @BatchType,
               @BatchLevel,
               @FilterDescr,
               @WindowsUserName,
               @FilterSQL
                                              
        SELECT [FilterID],
               [BatchType],
               [BatchLevel],
               [FilterDescr],
               [FilterOwner],
               [FilterSQL]
        FROM   [BI_Filters]
        WHERE  [FilterID] = Scope_identity()
      END
    ELSE
      BEGIN
        UPDATE [BI_Filters]
        SET    [FilterDescr] = @FilterDescr,
               [FilterSQL] = @FilterSQL
        WHERE  [FilterID] = @OldFilterID
                                                                        
        SELECT [FilterID],
               [BatchType],
               [BatchLevel],
               [FilterDescr],
               [FilterOwner],
               [FilterSQL]
        FROM   [BI_Filters]
        WHERE  [FilterID] = @OldFilterID
      END
                                           
    COMMIT
  END</commandtext>
      <commandtext>ALTER PROCEDURE [a_sp_bi_filtersdefault_select]
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @GetMyDefault    INT  = 0,
               @MineOnly        INT  = 0,
               @InclAssigned    INT  = 0,
               @WindowsUserName VARCHAR(255)
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET nocount  ON;
    DECLARE  @MyRole VARCHAR(50)
                                                          
    IF @GetMyDefault = 1
      BEGIN
        -- Get my role ID (use in criteria)
        SELECT @MyRole = Max(roleid)
        FROM   bi_users
        WHERE  userid = @WindowsUserName
                                                                
        -- Select all filters that are defaults for user or users role
        -- Note! Ordering to ensure that filters against user comes
        -- before filters against users role
        SELECT DISTINCT f.[FilterID],
                        f.[BatchType],
                        f.[BatchLevel],
                        f.[FilterDescr],
                        f.[FilterSQL],
                        Isnull(fa.[AssignToRole],NULL) [AssignToRole],
                        Isnull(fa.[RoleDefault],0) [RoleDefault],
                        Isnull(fa.[AssignToUser],NULL) [AssignToUser],
                        Isnull(fa.[UserDefault],0) [UserDefault]
        FROM     [BI_Filters] f
                 JOIN [BI_FilterAssigned] fa
                   ON (fa.filterid = f.filterid)
        WHERE    f.[BatchType] = @BatchType
                 AND f.[BatchLevel] = @BatchLevel
                 AND ((fa.[AssignToRole] = @MyRole
                       AND fa.roledefault = 1)
                       OR (fa.[AssignToUser] = @WindowsUserName
                           AND fa.userdefault = 1))
        ORDER BY [UserDefault] DESC
      END
    ELSE
      BEGIN
        -- Not just selecting my default SQL
        IF @MineOnly = 0
          BEGIN
            IF @InclAssigned = 1
              BEGIN
                -- INCLUDE ASSIGNED, ALL (NOT JUST MY) FILTERS
                SELECT DISTINCT f.[FilterID],
                                f.[BatchType],
                                f.[BatchLevel],
                                f.[FilterDescr],
                                f.[FilterSQL],
                                Isnull(fa.[AssignToRole],NULL) [AssignToRole],
                                Isnull(fa.[RoleDefault],0) [RoleDefault],
                                Isnull(fa.[AssignToUser],NULL) [AssignToUser],
                                Isnull(fa.[UserDefault],0) [UserDefault]
                FROM     [BI_Filters] f
                         LEFT OUTER JOIN [BI_FilterAssigned] fa
                           ON (fa.filterid = f.filterid)
                WHERE    f.[BatchType] = @BatchType
                         AND f.[BatchLevel] = @BatchLevel
                ORDER BY f.[FilterDescr]
              END
            ELSE
              BEGIN
                -- DO NOT INCLUDE ASSIGNED, ALL (NOT JUST MY) FILTERS
                SELECT DISTINCT f.[FilterID],
                                f.[BatchType],
                                f.[BatchLevel],
                                f.[FilterDescr],
                                f.[FilterSQL],
                                NULL [AssignToRole],
                                0 [RoleDefault],
                                NULL [AssignToUser],
                                0 [UserDefault]
                FROM     [BI_Filters] f
                WHERE    f.[BatchType] = @BatchType
                         AND f.[BatchLevel] = @BatchLevel
                ORDER BY f.[FilterDescr]
              END
          END
        ELSE
          BEGIN
            -- Get my role ID (use in criteria)
            SELECT @MyRole = Max(roleid)
            FROM   bi_users
            WHERE  userid = @WindowsUserName
                                                                        
            IF @InclAssigned = 1
              BEGIN
                -- INCLUDE ASSIGNED, JUST MY FILTERS
                SELECT DISTINCT f.[FilterID],
                                f.[BatchType],
                                f.[BatchLevel],
                                f.[FilterDescr],
                                f.[FilterSQL],
                                Isnull(fa.[AssignToRole],NULL) [AssignToRole],
                                Isnull(fa.[RoleDefault],0) [RoleDefault],
                                Isnull(fa.[AssignToUser],NULL) [AssignToUser],
                                Isnull(fa.[UserDefault],0) [UserDefault]
                FROM     [BI_Filters] f
                         LEFT OUTER JOIN [BI_FilterAssigned] fa
                           ON (fa.filterid = f.filterid)
                WHERE    f.[BatchType] = @BatchType
                         AND f.[BatchLevel] = @BatchLevel
                         AND (fa.[AssignToRole] = @MyRole
                               OR fa.[AssignToUser] = @WindowsUserName)
                ORDER BY f.[FilterDescr]
              END
            ELSE
              BEGIN
                -- DO NOT INCLUDE ASSIGNED, JUST MY FILTERS
                SELECT DISTINCT f.[FilterID],
                                f.[BatchType],
                                f.[BatchLevel],
                                f.[FilterDescr],
                                f.[FilterSQL],
                                NULL [AssignToRole],
                                0 [RoleDefault],
                                NULL [AssignToUser],
                                0 [UserDefault]
                FROM     [BI_Filters] f
                         JOIN [BI_FilterAssigned] fa
                           ON (fa.filterid = f.filterid)
                WHERE    f.[BatchType] = @BatchType
                         AND f.[BatchLevel] = @BatchLevel
                         AND (fa.[AssignToRole] = @MyRole
                               OR fa.[AssignToUser] = @WindowsUserName)
                ORDER BY f.[FilterDescr]
              END
          END
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [a_sp_bi_userdetails]
               @SelectFor VARCHAR(50)
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET nocount  ON;
                    
    IF @SelectFor = 'ALL'
      BEGIN
        -- Return user details of all users
        SELECT [UserId],
               [FirstName],
               [SurName],
               [RoleId]
        FROM   [BI_Users]
      END
    ELSE
      BEGIN
        -- Return user details of specified user
        SELECT [UserId],
               [FirstName],
               [SurName],
               [RoleId]
        FROM   [BI_Users]
        WHERE  [UserId] = @SelectFor
      END
  END</commandtext>
      <comment>Cater for Cloud - remove use of SYSTEM_USER</comment>
    </command>
  </Version>
  <Version number="1.0.12.0">
    <command>
      <commandtext>ALTER PROC [a_sp_bi_dm_structure_cols_select]
          @BatchType  VARCHAR(50),
          @BatchLevel CHAR(1)
-- Purpose: Return Structure Columns either from [BI_DM_Structure_Cols] if existing,
--          or else with default values based on column data types etc
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    
    -- Get table name used by BatchType/BatchLevel
    DECLARE  @TableName  AS VARCHAR(100)
    SELECT @TableName = [Table]
    FROM   [BI_Tables]
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
                              
    DECLARE  @Include  AS BIT
    SET @Include = 1
                   
    -- Create temp table
    CREATE TABLE #structure_cols (
      [Include]       BIT,
      [Sequence]      INT,
      [Column]        VARCHAR(100),
      [Orig_Datatype] VARCHAR(50),
      [DataType]      VARCHAR(50),
      [ContentType]   VARCHAR(50))
    
    -- Create temp table using column info from [BI_DM_Structure_Cols] where this
    -- info was saved previously.
    INSERT INTO #structure_cols
    SELECT DISTINCT @Include AS [Include],
                    bc.SEQUENCE,
                    bc.[Column],
                    '' AS [Orig_DataType],
                    bdsc.[DataType],
                    bdsc.[ContentType]
    FROM   [BI_Columns] bc
           INNER JOIN [BI_DM_Structure_Cols] bdsc
             ON bdsc.[BatchType] = bc.[BatchType]
                AND bdsc.[BatchLevel] = bc.[BatchLevel]
                AND bdsc.[Column] = bc.[Column]
    WHERE  bc.[BatchType] = @BatchType
           AND bc.[BatchLevel] = @BatchLevel
                                 
    -- The following lists columns that have not been selected previously.
    -- If one or more columns have already been selected then by defaul the following optional
    -- columns will be flagged as NOT selected. If no columns selected yet then the default is
    -- that all columns are selected for inclusion.
    IF @@ROWCOUNT &gt; 0
      BEGIN
        SET @Include = 0
      END
          
    -- Add to temp table using sys.columns to get column names and datatype where this
    -- info was not saved previously into BI_DM_Structure_Cols.
    INSERT INTO #structure_cols
    SELECT DISTINCT @Include AS [Include],
                    c.column_id,
                    bc.[Column],
                    Type_name(c.user_type_id) AS [Orig_DataType],
                    '' AS [DataType],
                    '' AS [ContentType]
    FROM   [BI_Columns] bc
           INNER JOIN sys.columns c
             ON c.object_id = Object_id(bc.[Table])
                AND c.name = bc.[Column]
           LEFT OUTER JOIN [BI_DM_Structure_Cols] bdsc
             ON bdsc.[BatchType] = bc.[BatchType]
                AND bdsc.[BatchLevel] = bc.[BatchLevel]
                AND bdsc.[Column] = bc.[Column]
    WHERE  bc.[BatchType] = @BatchType
           AND bc.[BatchLevel] = @BatchLevel
           AND bdsc.[BatchType] IS NULL
               
    UPDATE #structure_cols
    SET    [DataType] = 'TEXT'
    WHERE  [Orig_DataType] IN ('CHAR','NCHAR','VARCHAR','NVARCHAR')
    UPDATE #structure_cols
    SET    [DataType] = 'DATE'
    WHERE  [Orig_DataType] IN ('DATETIME')
    UPDATE #structure_cols
    SET    [DataType] = 'BOOLEAN'
    WHERE  [Orig_DataType] IN ('BINARY','BIT')
    UPDATE #structure_cols
    SET    [DataType] = 'LONG'
    WHERE  [Orig_DataType] LIKE '%INT'
    UPDATE #structure_cols
    SET    [DataType] = 'LONG' /* LONG better than DOUBLE */
    WHERE  [Orig_DataType] IN ('MONEY')
                              
    -- Update Content Type
    -- Update temp table where datatype was not previously saved with default datatype
    -- calculated based on existing column type
    UPDATE #structure_cols
    SET    [ContentType] = 'KEY'
    WHERE  [Column] IN (SELECT c.column_name AS pkname
                        FROM   information_schema.table_constraints AS pk
                               INNER JOIN information_schema.key_column_usage AS c
                                 ON pk.table_name = c.table_name
                                    AND pk.constraint_name = c.constraint_name
                        WHERE  (pk.constraint_type = 'PRIMARY KEY')
                               AND pk.table_name = @TableName)
    UPDATE #structure_cols
    SET    [ContentType] = 'DISCRETE'
    WHERE  [ContentType] = ''
           AND [DataType] = 'TEXT'
    UPDATE #structure_cols
    SET    [ContentType] = 'CONTINUOUS'
    WHERE  [ContentType] = ''
           AND [DataType] IN ('LONG','DOUBLE')
    UPDATE #structure_cols
    SET    [ContentType] = 'KEY TIME'
    WHERE  [ContentType] = ''
           AND [DataType] = 'DATE'
                            
    -- Extract the data to populate into Structure Columns grid
    SELECT [Include],
           [Column],
           [DataType],
           [ContentType]
    FROM     #structure_cols
    ORDER BY [Sequence]
             
    -- Drop the temp table as finished
    DROP TABLE #structure_cols
  END</commandtext>
      <commandtext>ALTER PROC [a_sp_bi_dm_model_cols_select]
          @Structurecode VARCHAR(50)  = '',
          @Modelcode     VARCHAR(50)  = ''
-- Purpose: Return Model Columns either from [BI_DM_Model_Cols] if existing,
--          or else with default values based on BI_model_cols
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    
    DECLARE  @Include  AS BIT
    SET @Include = 1
                   
    -- Create temp table
    CREATE TABLE #model_cols (
      [Include]     BIT,
      [Sequence]    INT,
      [Column]      VARCHAR(100),
      [PredictType] VARCHAR(50))
    
    -- Temp table using column info from [BI_DM_model_cols] where this
    -- info was saved previously.
    INSERT INTO #model_cols
    SELECT DISTINCT @Include AS [Include],
                    [Sequence],
                    [Column],
                    Isnull([PredictType],'') AS [PredictType]
    FROM   [BI_DM_Model_Cols]
    WHERE  [Modelcode] = @Modelcode
                         
    -- The following lists columns that have not been selected previously.
    -- If one or more columns have already been selected then by defaul the following optional
    -- columns will be flagged as NOT selected. If no columns selected yet then the default is
    -- that all columns are selected for inclusion.
    IF @@ROWCOUNT &gt; 0
      BEGIN
        SET @Include = 0
      END
      
    -- Add to temp table using BI_Structure_Cols to get column names where this
    -- info was not saved previously into BI_DM_model_cols.
    -- Only done if Predict Type is not null (i.e. user chosen to create a default
    -- prediction DMX - Fill or
    INSERT INTO #model_cols
    SELECT DISTINCT @Include AS [Include],
                    bsc.[Sequence],
                    bsc.[Column],
                    (CASE 
                       WHEN bsc.[Sequence] = 2
                       THEN 'PREDICT'
                       ELSE ''
                     END) AS [PredictType]
    FROM   [BI_DM_Structure_Cols] bsc
           LEFT OUTER JOIN [BI_DM_Model_Cols] bmc
             ON bmc.[Modelcode] = @Modelcode
                AND bmc.[Column] = bsc.[Column]
    WHERE  bsc.[Structurecode] = @Structurecode
           AND bmc.[Modelcode] IS NULL
               
    -- Extract the data to populate into Model Columns grid
    SELECT [Include],
           [Column],
           [PredictType]
    FROM     #model_cols
    ORDER BY [Sequence]
             
    -- Drop the temp table as finished
    DROP TABLE #model_cols
  END</commandtext>
      <commandtext>ALTER PROC [a_sp_BI_DM_Structure_Train_Default] 
    @StructureCode VARCHAR(50)
AS 
BEGIN
    SET NOCOUNT ON 
    SET XACT_ABORT ON  

    BEGIN TRAN

    DECLARE @LastSequence    INT
    SELECT @LastSequence = Max([Sequence])
    FROM   [BI_DM_Structure_Cols]
    WHERE  [Structurecode] = @StructureCode
        
    -- Create temp table
    CREATE TABLE #default_training (
      [Sequence]      INT,
      [SqlLine]       VARCHAR(MAX))

    ---------------------------
    -- First the Insert portion
    ---------------------------
    INSERT INTO #default_training
    SELECT   0 AS [Sequence],
             'INSERT INTO MINING MODEL ['
               + @StructureCode
               + '] (' AS [SqlLine]
    FROM     [BI_DM_Structure]
    WHERE    [Structurecode] = @StructureCode

    ----------------------
    -- Then the TO columns
    ----------------------
    -- If columns set up against structure then create default using these
    INSERT INTO #default_training
    SELECT   [Sequence],
             '['
               + [Column]
               + (CASE 
                    WHEN [Sequence] = @LastSequence
                    THEN '] '
                    ELSE '], '
                  END) AS [SqlLine]
    FROM     [BI_DM_Structure_Cols]
    WHERE    [Structurecode] = @StructureCode
    ORDER BY [Sequence]
    
    -- And if no columns against the structure then just indicate to the
    -- user where the fields should go
    IF @@ROWCOUNT = 0 BEGIN
        INSERT INTO #default_training
        SELECT 
            1 AS [Sequence], 
            '[Replace this with fields...]' AS [SqlLine]
    END
    
    --------------------------------------------------------------------------
    -- Then close TO columns, and provide beginning of query FROM datasource
    --------------------------------------------------------------------------
    INSERT INTO #default_training
    SELECT 1000 AS [Sequence],
           ') OpenQuery(DS_' + DB_NAME() + ', ''SELECT ' AS [SqlLine]

    ------------------------
    -- Then the FROM columns
    ------------------------
    -- If columns set up against structure then create default using these
    INSERT INTO #default_training
    SELECT   [Sequence]
               + 1000 AS [Sequence],
             '['
               + [Column]
               + (CASE 
                    WHEN [Sequence] = @LastSequence
                    THEN '] '
                    ELSE '], '
                  END) AS [SqlLine]
    FROM     [BI_DM_Structure_Cols]
    WHERE    [Structurecode] = @StructureCode
    ORDER BY [Sequence]
    
    -- And if no columns against the structure then just indicate to the
    -- user where the fields should go
    IF @@ROWCOUNT = 0 BEGIN
        INSERT INTO #default_training
        SELECT 
            1001 AS [Sequence], 
            '[Replace this with fields...]' AS [SqlLine]
    END
    
    ---------------------------------------------
    -- Finally end the Dmx (including FROM table)
    ---------------------------------------------
    INSERT INTO #default_training
    SELECT 2001 AS [Sequence],
           'FROM ['
             + bt.[Table]
             + ']'')' AS [SqlLine]
    FROM   bi_tables bt
           INNER JOIN [BI_DM_Structure] AS dms
             ON dms.[BatchType] = bt.[BatchType]
                AND dms.[BatchLevel] = bt.[BatchLevel]
    WHERE  dms.[Structurecode] = @StructureCode

    -------------------------------
    -- Now select the final product
    -------------------------------
    SELECT   [SqlLine]
    FROM     #default_training
    ORDER BY [Sequence]
    
    DROP TABLE #default_training
    
    COMMIT
END</commandtext>
      <comment>Cater for Cloud - Remove use of SELECT INTO</comment>
    </command>
  </Version>
  <Version number="1.0.13.0">
    <command>
      <commandtext>CREATE SCHEMA MoBatch</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Access'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Access</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_AppSettings'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_AppSettings</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_BatchCategory'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_BatchCategory</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_BatchTypes'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_BatchTypes</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Columns'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Columns</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_DM_Model'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_DM_Model</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_DM_Model_Cols'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_DM_Model_Cols</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_DM_Query'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_DM_Query</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_DM_Structure'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_DM_Structure</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_DM_Structure_Cols'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_DM_Structure_Cols</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_FilterAssigned'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_FilterAssigned</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_FilterCriteria'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_FilterCriteria</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Filters'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Filters</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Locks'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Locks</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Options'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Options</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Reports'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Reports</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_RoleAccess'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_RoleAccess</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Roles'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Roles</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_RPTCategories'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_RPTCategories</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_SP_ParameterInfo'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_SP_ParameterInfo</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Tables'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Tables</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.tables
               WHERE  name = 'BI_Users'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.BI_Users</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Access_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Access_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_AppSettings_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_AppSettings_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_AppSettings_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_AppSettings_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Assign_Specific_Access'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Assign_Specific_Access</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchCategoryDelete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchCategoryDelete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchCategoryInsert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchCategoryInsert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchCategorySelect'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchCategorySelect</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchCategoryUpdate'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchCategoryUpdate</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypes_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypes_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypes_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypes_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypes_Lock_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypes_Lock_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypes_Lock_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypes_Lock_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypes_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypes_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypes_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypes_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypesSetup_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypesSetup_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_BatchTypesSetup_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_BatchTypesSetup_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Check_Access'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Check_Access</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_CheckIfRunWizard'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_CheckIfRunWizard</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Columns_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Columns_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Columns_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Columns_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Model_Cols_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Model_Cols_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Model_Cols_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Model_Cols_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Model_Cols_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Model_Cols_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Model_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Model_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Model_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Model_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Model_Upsert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Model_Upsert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Query_Default'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Query_Default</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Query_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Query_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Query_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Query_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Query_Upsert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Query_Upsert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Cols_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Cols_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Cols_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Cols_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Cols_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Cols_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Train_Default'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Train_Default</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Train_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Train_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Train_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Train_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Train_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Train_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Structure_Upsert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Structure_Upsert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Training_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Training_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_DM_Training_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_DM_Training_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FilterAssigned_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FilterAssigned_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FilterAssigned_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FilterAssigned_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FilterAssigned_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FilterAssigned_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FilterCriteria_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FilterCriteria_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FilterCriteria_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FilterCriteria_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FilterCriteria_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FilterCriteria_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Filters_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Filters_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Filters_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Filters_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Filters_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Filters_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_FiltersDefault_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_FiltersDefault_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_GenericTable_Alter'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_GenericTable_Alter</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_GenericTable_Create'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_GenericTable_Create</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Get_ColumnDataTypes'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Get_ColumnDataTypes</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Get_Columns'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Get_Columns</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Get_SPs'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Get_SPs</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Get_Tables'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Get_Tables</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_GetSpParamInfo'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_GetSpParamInfo</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_GetTableColumnInfo'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_GetTableColumnInfo</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Options_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Options_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RecordSpParamInfo'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RecordSpParamInfo</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Replace_BatchType_Config'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Replace_BatchType_Config</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Reports_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Reports_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Reports_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Reports_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Reports_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Reports_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Reports_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Reports_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RoleAccess_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RoleAccess_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RoleAccess_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RoleAccess_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RoleAccess_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RoleAccess_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Roles_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Roles_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Roles_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Roles_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Roles_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Roles_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Roles_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Roles_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RPTCategories_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RPTCategories_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RPTCategories_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RPTCategories_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RPTCategories_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RPTCategories_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_RPTCategories_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_RPTCategories_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_SearchTable'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_SearchTable</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Setup_New_Access'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Setup_New_Access</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Setup_StoredProcedures'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Setup_StoredProcedures</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_StoredProcedures_List'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_StoredProcedures_List</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Tables_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Tables_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Tables_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Tables_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Tables_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Tables_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_UserDetails'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_UserDetails</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Users_Delete'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Users_Delete</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Users_Insert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Users_Insert</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Users_Select'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Users_Select</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Users_Select_Name'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Users_Select_Name</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Users_Update'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Users_Update</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   sys.procedures
               WHERE  name = 'a_sp_BI_Validate_SP'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BI_Validate_SP</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.procedures
               WHERE  name = 'a_sp_BIW_Tables_UpdateInsert'
                      AND Schema_name(schema_id) = 'MoBatch')
  ALTER SCHEMA MoBatch TRANSFER dbo.a_sp_BIW_Tables_UpdateInsert</commandtext>
      <commandtext>ALTER PROC [MoBatch].[A_sp_bi_checkifrunwizard]
        AS
        BEGIN
        SET nocount  ON

        -- Declare variables to use
        DECLARE  @Message VARCHAR(1000)
        DECLARE  @AccessExists CHAR
        DECLARE  @BatchTypesExist CHAR

        -- Default values for variables
        SELECT @Message = '',
        @AccessExists = 'N',
        @BatchTypesExist = 'N'

        -- Check if any access granted
        IF EXISTS (SELECT *
        FROM   bi_users u,
        bi_roleaccess ra
        WHERE  ra.roleid = u.roleid
        AND ra.accessid IN ('menuConfiguration','menuAccess'))
        BEGIN
        SELECT @AccessExists = 'Y'
        END

        -- Check if any batch types set up
        IF EXISTS (SELECT *
        FROM   bi_batchtypes)
        BEGIN
        SELECT @BatchTypesExist = 'Y'
        END

        -- Set up error message
        IF @AccessExists = 'N'
        BEGIN
        IF @Message &lt;&gt; ''
        BEGIN
        SELECT @Message = @Message
        + ' and no access has been granted'
        END
        ELSE
        BEGIN
        SELECT @Message = @Message
        + 'No access has been granted'
        END
        END
        IF @BatchTypesExist = 'N'
        BEGIN
        IF @Message &lt;&gt; ''
        BEGIN
        SELECT @Message = @Message
        + ' and no batch types have been set up'
        END
        ELSE
        BEGIN
        SELECT @Message = @Message
        + 'No batch types have been set up'
        END
        END

        -- Return message (if any). If blank then Wizard is not required.
        SELECT check_message = @Message
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[A_sp_bi_get_columndatatypes](
        -- =============================================
        -- Author:        R. Blomstrand
        -- Create date: 25/10/2008
        -- Description:   Used by Batch-It to identify datatypes for columns
        -- =============================================
        @Tablename VARCHAR(255))
        AS
        BEGIN
        SELECT   name,
        Type_name(user_type_id) datatype
        FROM     sys.columns
        WHERE    object_id = Object_id(@Tablename)
        ORDER BY column_id
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[A_sp_bi_get_sps]
        -- ===================================================================================
        -- Author:        R. Blomstrand
        -- Create date: 18/08/2008
        -- Description:   Used by Batch-It to return valid stored procedures
        -- ===================================================================================
        @SELECTITEM_SP_Name VARCHAR(50)
        AS
        BEGIN
        SELECT   name AS [value],
        name AS [text]
        FROM     sys.procedures
        WHERE    (@SELECTITEM_SP_Name = ''
        OR name LIKE @SELECTITEM_SP_Name)
        ORDER BY name
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[A_sp_bi_get_tables]
        AS
        BEGIN
        SELECT ' ' name
        UNION
        SELECT name
        FROM   sys.tables
        WHERE  Substring(name,1,3) &lt;&gt; 'BI_'
        AND name &lt;&gt; 'sysdiagrams'
        ORDER BY name
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_cols_delete]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        DELETE FROM [MoBatch].[BI_DM_Structure_Cols]
        WHERE       [StructureCode] = @StructureCode
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_model_cols_insert]
        @ModelCode   VARCHAR(50),
        @Sequence    INT,
        @Column      VARCHAR(60),
        @PredictType VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        IF @Sequence = 1
        BEGIN
        DELETE FROM [MoBatch].[BI_DM_Model_Cols]
        WHERE       [ModelCode] = @ModelCode
        END
        INSERT INTO [MoBatch].[BI_DM_Model_Cols]
        ([ModelCode],
        [Sequence],
        [Column],
        [PredictType])
        SELECT @ModelCode,
        @Sequence,
        @Column,
        @PredictType

        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_model_cols_delete]
        @ModelCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        DELETE FROM [MoBatch].[BI_DM_Model_Cols]
        WHERE       [ModelCode] = @ModelCode
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_access_select]
        @AccessId VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [AccessId],
        [AccessDescr]
        FROM     [MoBatch].[BI_Access]
        WHERE    ([AccessId] = @AccessId
        OR @AccessId IS NULL)
        ORDER BY [AccessDescr]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roleaccess_select]
        @AccessId VARCHAR(255),
        @RoleId   VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [AccessId],
        [RoleId]
        FROM     [MoBatch].[BI_RoleAccess]
        WHERE    ([AccessId] = @AccessId
        OR @AccessId IS NULL)
        AND ([RoleId] = @RoleId
        OR @RoleId IS NULL)
        ORDER BY [AccessId],
        [RoleId]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roleaccess_insert]
        @AccessId VARCHAR(255),
        @RoleId   VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_RoleAccess]
        ([AccessId],
        [RoleId])
        SELECT @AccessId,
        @RoleId

        SELECT [AccessId],
        [RoleId]
        FROM   [MoBatch].[BI_RoleAccess]
        WHERE  [AccessId] = @AccessId
        AND [RoleId] = @RoleId

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roleaccess_delete]
        @AccessId VARCHAR(255),
        @RoleId   VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_RoleAccess]
        WHERE       ([AccessId] = @AccessId
        OR @AccessId IS NULL)
        AND ([RoleId] = @RoleId
        OR @RoleId IS NULL)

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_query_delete]
        @QueryCode VARCHAR(20)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        DELETE FROM [MoBatch].[BI_DM_Query]
        WHERE       [QueryCode] = @QueryCode
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_cols_insert]
        @StructureCode VARCHAR(50),
        @BatchType     VARCHAR(50),
        @BatchLevel    CHAR(1),
        @Sequence      INT,
        @Column        VARCHAR(60),
        @DataType      VARCHAR(50),
        @ContentType   VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        IF @Sequence = 1
        BEGIN
        DELETE FROM [MoBatch].[BI_DM_Structure_Cols]
        WHERE       [StructureCode] = @StructureCode
        END
        INSERT INTO [MoBatch].[BI_DM_Structure_Cols]
        ([StructureCode],
        [BatchType],
        [BatchLevel],
        [Sequence],
        [Column],
        [DataType],
        [ContentType])
        SELECT @StructureCode,
        @BatchType,
        @BatchLevel,
        @Sequence,
        @Column,
        @DataType,
        @ContentType

        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_tables_select](
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1))
        AS
        BEGIN
        IF @BatchLevel IS NULL
        OR @BatchLevel = ''
        BEGIN
        SELECT [BatchLevel],
        [Table],
        [Qualifier]
        FROM   [MoBatch].[BI_Tables]
        WHERE  [BatchType] = @BatchType
        END
        ELSE
        BEGIN
        SELECT [BatchLevel],
        [Table],
        [Qualifier]
        FROM   [MoBatch].[BI_Tables]
        WHERE  [BatchType] = @BatchType
        AND [BatchLevel] = @BatchLevel
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_tables_update](
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1),
        @Table      VARCHAR(100),
        @Qualifier  VARCHAR(2000))
        AS
        BEGIN
        UPDATE [MoBatch].[BI_Tables]
        SET    [Table] = @Table,
        [Qualifier] = @Qualifier
        WHERE  [BatchType] = @BatchType
        AND [BatchLevel] = @BatchLevel

        IF @@ROWCOUNT = 0
        BEGIN
        INSERT INTO [MoBatch].[BI_Tables]
        ([BatchType],
        [BatchLevel],
        [Table],
        [Qualifier])
        VALUES     (@BatchType,
        @BatchLevel,
        @Table,
        @Qualifier)
        END
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_appsettings_select]
        @Setting NVARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [Setting],
        [Description],
        [Value]
        FROM     [MoBatch].[BI_AppSettings]
        WHERE    ([Setting] = @Setting
        OR @Setting IS NULL)
        ORDER BY [Sequence]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_setup_new_access]
        -- This stored procedure is used to re-create all access permutations
        -- To run: EXEC a_sp_BI_Setup_New_Access
        AS
        BEGIN
        SET nocount  ON;
        SET xact_abort  ON;
        BEGIN TRANSACTION;
        ALTER TABLE [MoBatch].[BI_RoleAccess]
        DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access]
        -- Delete existing access
        DELETE [MoBatch].[BI_Access]
        ----------------------------------------------------------
        -- Insert Access not related to customizable batch screens
        ----------------------------------------------------------
        INSERT INTO [MoBatch].[BI_Access]
        ([AccessId],
        [AccessDescr])
        SELECT 'menuBatchEntry',
        'Batch Entry Menu Option'
        UNION ALL
        SELECT 'menuReports',
        'Configure Report Menus'
        UNION ALL
        SELECT 'menuConfiguration',
        'Configuration Menu Function'
        UNION ALL
        SELECT 'menuAccess',
        'Configure Access'
        UNION ALL
        SELECT 'menuBatchCategories',
        'Configure Batch Categories'
        UNION ALL
        SELECT 'menuBatchTypes',
        'Configure Batch Types'
        UNION ALL
        SELECT 'Batch Types Update',
        'Configure Batch Types - Update existing entries'
        UNION ALL
        SELECT 'menuBatchScreenSetup',
        'Configure Batch Screen Setup'
        UNION ALL
        SELECT 'Batch Screen Setup Update',
        'Configure Batch Screen Setup - Update existing entries'
        UNION ALL
        SELECT 'menuReportCategories',
        'Configure Report Categories'
        UNION ALL
        SELECT 'menuReportItems',
        'Configure Report Items'
        UNION ALL
        SELECT 'menuWizard',
        'Configure Wizard Facility'
        UNION ALL
        SELECT 'menuDataMining',
        'Configure Data Mining'
        UNION ALL
        SELECT 'menuAppSettings',
        'Configure Application Settings'
        UNION ALL
        SELECT 'menuReleaseLocks',
        'Release Batch Locks'
        ------------------------------
        -- Insert Access per BatchType
        ------------------------------
        INSERT INTO [MoBatch].[BI_Access]
        ([AccessId],
        [AccessDescr])
        SELECT 'DM '
        + [QueryCode] COLLATE sql_latin1_general_cp1_ci_as,
        'Data Mining - '
        + [QueryCode]
        FROM   [MoBatch].[BI_DM_Query]
        ------------------------------
        -- Insert Access per BatchType
        ------------------------------
        INSERT INTO [MoBatch].[BI_Access]
        ([AccessId],
        [AccessDescr])
        SELECT batchtype,
        batchtype
        + ' Access Screen'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Add',
        batchtype
        + ' - Add new entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Delete',
        batchtype
        + ' - Delete existing entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Update',
        batchtype
        + ' - Update existing entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' tsbOpen',
        batchtype
        + ' - Open Lines Screen'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' tsbCalculate',
        batchtype
        + ' - Calculate Batches'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' tsbValidate',
        batchtype
        + ' - Validate Batches'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' tsbApprove',
        batchtype
        + ' - Approve Batches'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' tsbProcess',
        batchtype
        + ' - Process Batches'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Lines Add',
        batchtype
        + ' Lines - Add new entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Lines Delete',
        batchtype
        + ' Lines - Delete existing entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Lines Update',
        batchtype
        + ' Lines - Update existing entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Lines tsbOpen',
        batchtype
        + ' Lines - Open Distribution Screen'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Lines tsbCalculate',
        batchtype
        + ' Lines - Calculate Lines'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Lines tsbValidate',
        batchtype
        + ' Lines - Validate Lines'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Distributions Add',
        batchtype
        + ' Distributions - Add new entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Distributions Delete',
        batchtype
        + ' Distributions - Delete existing entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Distributions Update',
        batchtype
        + ' Distributions - Update existing entries'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Distributions tsbCalculate',
        batchtype
        + ' Distributions - Calculate Distributions'
        FROM   bi_batchtypes
        UNION ALL
        SELECT batchtype
        + ' Distributions tsbValidate',
        batchtype
        + ' Distributions - Validate Distributions'
        FROM   bi_batchtypes
        UNION ALL
        SELECT 'Rpt Cat '
        + rptcategoryid COLLATE sql_latin1_general_cp1_ci_as,
        'Report Category - '
        + rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
        FROM   bi_rptcategories
        UNION ALL
        SELECT 'Batch Cat '
        + batchcatcd COLLATE sql_latin1_general_cp1_ci_as,
        'Batch Category - '
        + batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
        FROM   bi_batchcategory
        WHERE  batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */
        -- Delete existing roles referring to access
        DELETE r
        FROM   [MoBatch].[BI_RoleAccess] r
        WHERE  NOT EXISTS (SELECT 'x'
        FROM   [MoBatch].[BI_Access] a
        WHERE  a.[AccessId] = r.[AccessId])
        ALTER TABLE [MoBatch].[BI_RoleAccess]
        WITH CHECK ADD CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY ( [AccessId] ) REFERENCES [MoBatch].[BI_Access]([AccessId])
        ALTER TABLE [MoBatch].[BI_RoleAccess]
        CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
        COMMIT;
        RAISERROR (N'[MoBatch].[BI_Access]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_assign_specific_access](
        @BatchType VARCHAR(200),
        @RoleId    VARCHAR(50))
        AS--drop table #E drop table #D
        BEGIN--DECLARE @BatchType varchar(200), @RoleId varchar(50) SET @BatchType = 'Inventory Management' SET @RoleId = 'Clerk'

        --see what exists against that Role for that BatchType
        --
        SELECT DISTINCT r.roleid,
        a.accessid
        INTO   #e  --select * from #E
        FROM   bi_access a
        INNER JOIN bi_roleaccess r(nolock)
        ON a.accessid = r.accessid
        AND @RoleId = r.roleid
        WHERE  a.accessid LIKE @BatchType
        + '%'
        --

        --All possible AccessId's
        SELECT a.accessid
        INTO   #d --select * from #D
        FROM   bi_access a
        WHERE  a.accessid LIKE @BatchType
        + '%'
        --Filter out existing
        DELETE FROM #d
        WHERE       accessid IN (SELECT accessid
        FROM   #e)
        --#D is the list to be added
        INSERT INTO [MoBatch].[BI_RoleAccess]
        ([AccessId],
        [RoleId])
        SELECT accessid,
        @RoleId AS roleid
        FROM   #d
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_batchcategoryselect]
        @BatchCatCd VARCHAR(10)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [BatchCatCd],
        [BatchCatDescr]
        FROM     [MoBatch].[BI_BatchCategory]
        WHERE    ([BatchCatCd] = @BatchCatCd
        OR @BatchCatCd IS NULL)
        ORDER BY [BatchCatCd]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_batchcategoryinsert]
        @BatchCatCd    VARCHAR(10),
        @BatchCatDescr VARCHAR(80)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_BatchCategory]
        ([BatchCatCd],
        [BatchCatDescr])
        SELECT @BatchCatCd,
        @BatchCatDescr

        SELECT [BatchCatCd],
        [BatchCatDescr]
        FROM   [MoBatch].[BI_BatchCategory]
        WHERE  [BatchCatCd] = @BatchCatCd

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_batchcategoryupdate]
        @BatchCatCd    VARCHAR(10),
        @BatchCatDescr VARCHAR(80)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_BatchCategory]
        SET    [BatchCatCd] = @BatchCatCd,
        [BatchCatDescr] = @BatchCatDescr
        WHERE  [BatchCatCd] = @BatchCatCd

        SELECT [BatchCatCd],
        [BatchCatDescr]
        FROM   [MoBatch].[BI_BatchCategory]
        WHERE  [BatchCatCd] = @BatchCatCd

        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_batchcategorydelete]
        @BatchCatCd VARCHAR(10)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_BatchCategory]
        WHERE       [BatchCatCd] = @BatchCatCd

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_training_select]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [StructureCode],
        [Description],
        [TrainingDMX]
        FROM     [MoBatch].[BI_DM_Structure]
        WHERE    ([StructureCode] = @StructureCode
        OR @StructureCode IS NULL)
        ORDER BY [StructureCode]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_training_update]
        @StructureCode VARCHAR(50),
        @TrainingDMX   NVARCHAR(MAX)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_DM_Structure]
        SET    [TrainingDMX] = @TrainingDMX
        WHERE  [StructureCode] = @StructureCode

        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_query_select]
        @QueryCode  VARCHAR(20),
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1)
        AS
        BEGIN
        SET nocount  ON
        IF @QueryCode = 'Re-train Structure'
        BEGIN
        SELECT @QueryCode AS [QueryCode],
        @QueryCode AS [Description],
        'XXX' AS [ModelCode],
        [BatchType],
        [BatchLevel],
        [TrainingDMX] AS [QueryDMX],
        NULL AS [FeedToSPName],
        @QueryCode AS [IconText],
        NULL AS [IconFilename],
        NULL AS [AmendedCellColour]
        FROM   [MoBatch].[BI_DM_Structure]
        WHERE  [BatchType] = @BatchType
        AND [BatchLevel] = @BatchLevel
        END
        ELSE
        BEGIN
        SELECT   [QueryCode],
        [Description],
        [ModelCode],
        [BatchType],
        [BatchLevel],
        [QueryDMX],
        [FeedToSPName],
        [IconText],
        [IconFilename],
        [AmendedCellColour]
        FROM     [MoBatch].[BI_DM_Query]
        WHERE    ([QueryCode] = @QueryCode
        OR @QueryCode IS NULL)
        AND ([BatchType] = @BatchType
        OR @BatchType IS NULL)
        AND ([BatchLevel] = @BatchLevel
        OR @BatchLevel IS NULL)
        ORDER BY [QueryCode]
        END
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_delete]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        -- Remove structure columns
        DELETE FROM [MoBatch].[BI_DM_Structure_Cols]
        WHERE       [StructureCode] = @StructureCode

        -- Remove structure itself
        DELETE FROM [MoBatch].[BI_DM_Structure]
        WHERE       [StructureCode] = @StructureCode

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_train_delete]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        UPDATE [MoBatch].[BI_DM_Structure]
        SET    trainingdmx = NULL
        WHERE  [StructureCode] = @StructureCode
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_select]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [StructureCode],
        [Description],
        [BatchType],
        [BatchLevel],
        [CustomizedDMX],
        [StructureDMX]
        FROM     [MoBatch].[BI_DM_Structure]
        WHERE    ([StructureCode] = @StructureCode
        OR @StructureCode IS NULL)
        ORDER BY [StructureCode]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_query_upsert]
        @QueryCode         VARCHAR(20),
        @Description       VARCHAR(125),
        @ModelCode         VARCHAR(20),
        @QueryDMX          NVARCHAR(MAX),
        @FeedToSPName      VARCHAR(1024),
        @IconText          VARCHAR(50),
        @IconFilename      VARCHAR(1024),
        @AmendedCellColour VARCHAR(10)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_DM_Query]
        SET    [QueryCode] = @QueryCode,
        [Description] = @Description,
        [ModelCode] = @ModelCode,
        [QueryDMX] = @QueryDMX,
        [FeedToSPName] = @FeedToSPName,
        [IconText] = @IconText,
        [IconFilename] = @IconFilename,
        [AmendedCellColour] = @AmendedCellColour
        WHERE  [QueryCode] = @QueryCode

        IF @@ROWCOUNT = 0
        BEGIN
        DECLARE  @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1)
        -- Get Batchtype and Batchlevel
        SELECT @BatchType = batchtype,
        @BatchLevel = batchlevel
        FROM   [MoBatch].[BI_dm_structure dms],
        [MoBatch].bi_dm_model dmm
        WHERE  dms.structurecode = dmm.structurecode
        AND dmm.modelcode = @ModelCode
        INSERT INTO [MoBatch].[BI_DM_Query]
        ([QueryCode],
        [BatchLevel],
        [BatchType],
        [Description],
        [FeedToSPName],
        [ModelCode],
        [QueryDMX],
        [IconText],
        [IconFilename],
        [AmendedCellColour])
        SELECT @QueryCode,
        @BatchLevel,
        @BatchType,
        @Description,
        @FeedToSPName,
        @ModelCode,
        @QueryDMX,
        @IconText,
        @IconFilename,
        @AmendedCellColour
        END

        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_upsert]
        @StructureCode VARCHAR(50),
        @Description   VARCHAR(125),
        @BatchType     VARCHAR(50),
        @BatchLevel    CHAR(1),
        @CustomizedDMX BIT,
        @StructureDMX  NVARCHAR(MAX)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_DM_Structure]
        SET    [Description] = @Description,
        [BatchType] = @BatchType,
        [BatchLevel] = @BatchLevel,
        [CustomizedDMX] = @CustomizedDMX,
        [StructureDMX] = @StructureDMX
        WHERE  [StructureCode] = @StructureCode

        IF @@ROWCOUNT = 0
        BEGIN
        INSERT INTO [MoBatch].[BI_DM_Structure]
        ([StructureCode],
        [Description],
        [BatchType],
        [BatchLevel],
        [CustomizedDMX],
        [StructureDMX],
        [TrainingDMX])
        SELECT @StructureCode,
        @Description,
        @BatchType,
        @BatchLevel,
        @CustomizedDMX,
        @StructureDMX,
        NULL
        END

        -- Begin Return Select &lt;- do not remove
        SELECT [StructureCode],
        [Description],
        [BatchType],
        [BatchLevel],
        [CustomizedDMX],
        [StructureDMX]
        FROM     [MoBatch].[BI_DM_Structure]
        WHERE    [StructureCode] = @StructureCode
        ORDER BY [StructureCode]
        -- End Return Select &lt;- do not remove
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_train_select]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [StructureCode],
        [Description],
        [TrainingDMX]
        FROM     [MoBatch].[BI_DM_Structure]
        WHERE    ([StructureCode] = @StructureCode
        OR @StructureCode IS NULL)
        ORDER BY [StructureCode]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_train_update]
        @StructureCode VARCHAR(50),
        @TrainingDMX   NVARCHAR(MAX)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        UPDATE [MoBatch].[BI_DM_Structure]
        SET    [TrainingDMX] = @TrainingDMX
        WHERE  [StructureCode] = @StructureCode
        -- Begin Return Select &lt;- do not remove
        SELECT [StructureCode],
        [Description],
        [TrainingDMX]
        FROM     [MoBatch].[BI_DM_Structure]
        WHERE    [StructureCode] = @StructureCode
        ORDER BY [StructureCode]
        -- End Return Select &lt;- do not remove
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_model_select]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [ModelCode],
        [Description],
        [StructureCode],
        [CustomizedDMX],
        [ModelDMX],
        [Algorithm]
        FROM     [MoBatch].[BI_DM_Model]
        WHERE    ([StructureCode] = @StructureCode
        OR @StructureCode IS NULL)
        ORDER BY [ModelCode]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_model_upsert]
        @ModelCode     VARCHAR(50),
        @Description   VARCHAR(125),
        @StructureCode VARCHAR(50),
        @CustomizedDMX BIT,
        @ModelDMX      NVARCHAR(MAX),
        @Algorithm     VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        UPDATE [MoBatch].[BI_DM_Model]
        SET    [ModelCode] = @ModelCode,
        [Description] = @Description,
        [StructureCode] = @StructureCode,
        [CustomizedDMX] = @CustomizedDMX,
        [ModelDMX] = @ModelDMX,
        [Algorithm] = @Algorithm
        WHERE  [ModelCode] = @ModelCode

        IF @@ROWCOUNT = 0
        BEGIN
        INSERT INTO [MoBatch].[BI_DM_Model]
        ([ModelCode],
        [Description],
        [StructureCode],
        [CustomizedDMX],
        [ModelDMX],
        [Algorithm])
        SELECT @ModelCode,
        @Description,
        @StructureCode,
        @CustomizedDMX,
        @ModelDMX,
        @Algorithm
        END
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_model_delete]
        @ModelCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN

        -- Remove model columns
        DELETE FROM [MoBatch].[BI_DM_Model_Cols]
        WHERE       [ModelCode] = @ModelCode
        DELETE FROM [MoBatch].[BI_DM_Model]
        WHERE       [ModelCode] = @ModelCode
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_setup_storedprocedures]
        -- This stored procedure is used to re-create SP information
        -- for all SPs referred to in this Batch-It database
        AS
        BEGIN
        DECLARE  @SP_Name VARCHAR(255)
        DECLARE  @return_value INT

        -- Was going to create table to store SP info in but will do this later.
        -- Here is suggested format (create primary key too)
        --CREATE TABLE [MoBatch].[BI_Tables](
        -- [BatchType]   [varchar](50) NOT NULL,
        -- [BatchLevel]  [char](1) NOT NULL,
        -- [EventCategory]  [varchar](100) NOT NULL,
        -- [EventName]   [varchar](100) NULL
        -- [EventDescription] [varchar](256) NULL
        -- [SPCommand]   [varchar](512) NULL
        -- [Status]   [varchar](50) NULL
        --)
        DECLARE c_c CURSOR LOCAL FOR
        SELECT DISTINCT lookup_sp sp_name
        FROM   [MoBatch].bi_columns
        WHERE  lookup_sp IS NOT NULL
        AND lookup_sp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT select_sp sp_name
        FROM   [MoBatch].bi_columns
        WHERE  select_sp IS NOT NULL
        AND select_sp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT validation_sp sp_name
        FROM   [MoBatch].bi_columns
        WHERE  validation_sp IS NOT NULL
        AND validation_sp &lt;&gt; ''
        ---
        UNION ALL
        SELECT DISTINCT approvesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  approvesp IS NOT NULL
        AND approvesp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT processsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  processsp IS NOT NULL
        AND processsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headrowsetupsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headrowsetupsp IS NOT NULL
        AND headrowsetupsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linerowsetupsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linerowsetupsp IS NOT NULL
        AND linerowsetupsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrrowsetupsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrrowsetupsp IS NOT NULL
        AND distrrowsetupsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headrowselectsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headrowselectsp IS NOT NULL
        AND headrowselectsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linerowselectsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linerowselectsp IS NOT NULL
        AND linerowselectsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrrowselectsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrrowselectsp IS NOT NULL
        AND distrrowselectsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headvalidationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headvalidationsp IS NOT NULL
        AND headvalidationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linesvalidationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linesvalidationsp IS NOT NULL
        AND linesvalidationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrvalidationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrvalidationsp IS NOT NULL
        AND distrvalidationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrvalidationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrvalidationsp IS NOT NULL
        AND distrvalidationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT aftercloselinessp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  aftercloselinessp IS NOT NULL
        AND aftercloselinessp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT afterclosedistrsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  afterclosedistrsp IS NOT NULL
        AND afterclosedistrsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headcalculationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headcalculationsp IS NOT NULL
        AND headcalculationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linescalculationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linescalculationsp IS NOT NULL
        AND linescalculationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrcalculationsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrcalculationsp IS NOT NULL
        AND distrcalculationsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headafterloadsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headafterloadsp IS NOT NULL
        AND headafterloadsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linesafterloadsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linesafterloadsp IS NOT NULL
        AND linesafterloadsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrafterloadsp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrafterloadsp IS NOT NULL
        AND distrafterloadsp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headaftersavesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headaftersavesp IS NOT NULL
        AND headaftersavesp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linesaftersavesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linesaftersavesp IS NOT NULL
        AND linesaftersavesp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distraftersavesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distraftersavesp IS NOT NULL
        AND distraftersavesp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT headafterdeletesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  headafterdeletesp IS NOT NULL
        AND headafterdeletesp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT linesafterdeletesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  linesafterdeletesp IS NOT NULL
        AND linesafterdeletesp &lt;&gt; ''
        UNION ALL
        SELECT DISTINCT distrafterdeletesp sp_name
        FROM   [MoBatch].bi_batchtypes
        WHERE  distrafterdeletesp IS NOT NULL
        AND distrafterdeletesp &lt;&gt; ''
        --
        OPEN c_c
        FETCH NEXT FROM c_c
        INTO @SP_Name
        WHILE @@FETCH_STATUS = 0
        BEGIN

        SELECT 'Processing SP: '
        + @SP_Name AS storedprocedure

        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name) &gt; 0
        SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
        - 1)

        -- Now process SP to generate info about it
        EXEC A_sp_bi_recordspparaminfo
        @SP_Name

        SELECT 'Result Status: '
        + Convert(VARCHAR,@return_value) AS [Status]

        FETCH NEXT FROM c_c
        INTO @SP_Name
        END
        CLOSE c_c
        DEALLOCATE c_c
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_getspparaminfo]
        @SpName    VARCHAR(1024),
        @NumParams INT
        AS
        BEGIN
        DECLARE  @CountParams INT
        SELECT @CountParams = Count(* )
        FROM   [MoBatch].bi_sp_parameterinfo
        WHERE  spname = @SpName
        -- If different number of params than expected then
        -- recalculate parameter entries to ensure that this is correct
        IF @CountParams &lt;&gt; @NumParams
        BEGIN
        EXEC [MoBatch].[a_sp_BI_recordspparaminfo]
        @SPName
        END
        SELECT *
        FROM   [MoBatch].[BI_sp_parameterinfo]
        WHERE  spname = @SpName
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_validate_sp](
        @SP VARCHAR(100))
        AS
        BEGIN
        DECLARE  @Count INT

        SELECT @Count = Count(* )
        FROM   sys.procedures
        WHERE  object_id = Object_id(@SP)

        IF @Count = 0
        BEGIN
        SELECT parameter = 'INVALID SP'
        END
        ELSE
        BEGIN
        SELECT   parameter = parametername
        + ' ('
        + Rtrim(typename
        + ' '
        + Cast(parametersize AS VARCHAR))
        + ')'
        FROM     [MoBatch].bi_sp_parameterinfo
        WHERE    spname = @SP
        ORDER BY parameterid
        END
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_storedprocedures_list]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesValidationSP' [CallEvent],
                    NULL [Column],
                    linesvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linesvalidationsp IS NOT NULL 
           AND linesvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesCalculationSP' [CallEvent],
                    NULL [Column],
                    linescalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linescalculationsp IS NOT NULL 
           AND linescalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterLoadSP' [CallEvent],
                    NULL [Column],
                    linesafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linesafterloadsp IS NOT NULL 
           AND linesafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterSaveSP' [CallEvent],
                    NULL [Column],
                    linesaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linesaftersavesp IS NOT NULL 
           AND linesaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LinesAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    linesafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linesafterdeletesp IS NOT NULL 
           AND linesafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
    ORDER BY [SP_Name]
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypes_lock_update](
        @BatchType       VARCHAR(255),
        @HeaderID        VARCHAR(50)  = NULL,
        @Lock            INT,
        @WindowsUserName VARCHAR(255))
        AS
        BEGIN
        DECLARE  @BatchLocking NVARCHAR(50)
        SELECT @BatchLocking = [Value]
        FROM   [MoBatch].[BI_AppSettings]
        WHERE  [Setting] = 'BatchLocking'

        IF @BatchLocking = 'Header ID'
        BEGIN
        -- If setting lock then first delete any potential locks that
        -- may exist for this batch type/header ID (just in case to prevent Unique
        -- key contraint).
        -- If removing lock then only the delete statement is executed
        DELETE [MoBatch].[BI_Locks]
        WHERE  [BatchType] = @BatchType
        AND [HeaderID] = @HeaderID

        IF @Lock = 1
        BEGIN
        INSERT INTO [MoBatch].[BI_Locks]
        ([BatchType],
        [HeaderID],
        [LockUser],
        [LockTime])
        VALUES     (@BatchType,
        @HeaderID,
        @WindowsUserName,
        Getdate())
        END
        END
        ELSE
        BEGIN
        IF @Lock = 1
        BEGIN
        UPDATE [MoBatch].[BI_batchtypes]
        SET    [LockUser] = @WindowsUserName,
        [LockTime] = Getdate()
        WHERE  [BatchType] = @BatchType
        END
        ELSE
        BEGIN
        UPDATE [MoBatch].[BI_batchtypes]
        SET    [LockUser] = NULL,
        [LockTime] = NULL
        WHERE  [BatchType] = @BatchType
        END
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypes_update](
        @BatchType  VARCHAR(255),
        @License    VARCHAR(255),
        @Sequence   INT,
        @BatchCatCd VARCHAR(255))
        AS
        BEGIN
        SET nocount  OFF;

        IF @BatchCatCd = '(None)'
        BEGIN
        SELECT @BatchCatCd = NULL
        END

        UPDATE [MoBatch].bi_batchtypes
        SET    license = @License,
        SEQUENCE = @Sequence,
        batchcatcd = @BatchCatCd
        WHERE  batchtype = @BatchType

        IF @@ERROR &gt; 0
        BEGIN
        RAISERROR ('Update BI_BatchTypes Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypes_select](
        @LicensedOnly CHAR(1),
        @BatchCatCd   VARCHAR(10))
        AS
        BEGIN
        IF @LicensedOnly = 'Y'
        BEGIN
        SELECT   [BatchType],
        [License],
        [Sequence],
        [BatchCatCd] = Isnull([BatchCatCd],'(None)'),
        [CurrDate] = Getdate()
        FROM     [MoBatch].bi_batchtypes
        WHERE    license IS NOT NULL
        AND (@BatchCatCd IS NULL
        OR batchcatcd = @BatchCatCd)
        ORDER BY SEQUENCE
        END
        ELSE
        BEGIN
        SELECT   [BatchType],
        [License],
        [Sequence],
        [BatchCatCd] = Isnull([BatchCatCd],'(None)'),
        [CurrDate] = Getdate()
        FROM     [MoBatch].bi_batchtypes
        WHERE    (@BatchCatCd IS NULL
        OR batchcatcd = @BatchCatCd)
        ORDER BY SEQUENCE
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypessetup_update](
        @BatchType              VARCHAR(255),
        @ApproveSP              VARCHAR(255),
        @ApproveStatus          VARCHAR(50),
        @ProcessSP              VARCHAR(255),
        @ProcessStatus          VARCHAR(50),
        @HeadRowSetupSP         VARCHAR(255),
        @LineRowSetupSP         VARCHAR(255),
        @DistrRowSetupSP        VARCHAR(255),
        @HeadRowSelectSP        VARCHAR(255),
        @LineRowSelectSP        VARCHAR(255),
        @DistrRowSelectSP       VARCHAR(255),
        @HeadValidationSP       VARCHAR(255),
        @LinesValidationSP      VARCHAR(255),
        @DistrValidationSP      VARCHAR(255),
        @AfterCloseLinesSP      VARCHAR(255),
        @AfterCloseDistrSP      VARCHAR(255),
        @HeadValue1Descr        VARCHAR(50),
        @HeadValue2Descr        VARCHAR(50),
        @HeadValue3Descr        VARCHAR(50),
        @HeadValue4Descr        VARCHAR(50),
        @LineValue1Descr        VARCHAR(50),
        @LineValue2Descr        VARCHAR(50),
        @LineValue3Descr        VARCHAR(50),
        @LineValue4Descr        VARCHAR(50),
        @DistrValue1Descr       VARCHAR(50),
        @DistrValue2Descr       VARCHAR(50),
        @DistrValue3Descr       VARCHAR(50),
        @DistrValue4Descr       VARCHAR(50),
        @HeadValidationStatus   VARCHAR(50),
        @LinesValidationStatus  VARCHAR(50),
        @DistrValidationStatus  VARCHAR(50),
        @HeadCalculationSP      VARCHAR(255),
        @HeadCalculationStatus  VARCHAR(50),
        @LinesCalculationSP     VARCHAR(255),
        @LinesCalculationStatus VARCHAR(50),
        @DistrCalculationSP     VARCHAR(255),
        @DistrCalculationStatus VARCHAR(50),
        @HeadAfterLoadSP        VARCHAR(255),
        @LinesAfterLoadSP       VARCHAR(255),
        @DistrAfterLoadSP       VARCHAR(255),
        @HeadAfterSaveSP        VARCHAR(255),
        @LinesAfterSaveSP       VARCHAR(255),
        @DistrAfterSaveSP       VARCHAR(255),
        @HeadAfterDeleteSP      VARCHAR(255),
        @LinesAfterDeleteSP     VARCHAR(255),
        @DistrAfterDeleteSP     VARCHAR(255))
        AS
        BEGIN
        SET nocount  OFF;

        UPDATE [MoBatch].bi_batchtypes
        SET    approvesp = @ApproveSP,
        approvestatus = @ApproveStatus,
        processsp = @ProcessSP,
        processstatus = @ProcessStatus,
        headrowsetupsp = @HeadRowSetupSP,
        linerowsetupsp = @LineRowSetupSP,
        distrrowsetupsp = @DistrRowSetupSP,
        headrowselectsp = @HeadRowSelectSP,
        linerowselectsp = @LineRowSelectSP,
        distrrowselectsp = @DistrRowSelectSP,
        headvalidationsp = @HeadValidationSP,
        linesvalidationsp = @LinesValidationSP,
        distrvalidationsp = @DistrValidationSP,
        aftercloselinessp = @AfterCloseLinesSP,
        afterclosedistrsp = @AfterCloseDistrSP,
        headvalue1descr = @HeadValue1Descr,
        headvalue2descr = @HeadValue2Descr,
        headvalue3descr = @HeadValue3Descr,
        headvalue4descr = @HeadValue4Descr,
        linevalue1descr = @LineValue1Descr,
        linevalue2descr = @LineValue2Descr,
        linevalue3descr = @LineValue3Descr,
        linevalue4descr = @LineValue4Descr,
        distrvalue1descr = @DistrValue1Descr,
        distrvalue2descr = @DistrValue2Descr,
        distrvalue3descr = @DistrValue3Descr,
        distrvalue4descr = @DistrValue4Descr,
        headvalidationstatus = @HeadValidationStatus,
        linesvalidationstatus = @LinesValidationStatus,
        distrvalidationstatus = @DistrValidationStatus,
        headcalculationsp = @HeadCalculationSP,
        headcalculationstatus = @HeadCalculationStatus,
        linescalculationsp = @LinesCalculationSP,
        linescalculationstatus = @LinesCalculationStatus,
        distrcalculationsp = @DistrCalculationSP,
        distrcalculationstatus = @DistrCalculationStatus,
        headafterloadsp = @HeadAfterLoadSP,
        linesafterloadsp = @LinesAfterLoadSP,
        distrafterloadsp = @DistrAfterLoadSP,
        headaftersavesp = @HeadAfterSaveSP,
        linesaftersavesp = @LinesAfterSaveSP,
        distraftersavesp = @DistrAfterSaveSP,
        headafterdeletesp = @HeadAfterDeleteSP,
        linesafterdeletesp = @LinesAfterDeleteSP,
        distrafterdeletesp = @DistrAfterDeleteSP

        WHERE  batchtype = @BatchType

        IF @@ERROR &gt; 0
        BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypessetup_select](
        @BatchType VARCHAR(255))
        AS
        BEGIN
        SELECT   [BatchType],
        [ApproveSP],
        [ApproveStatus],
        [ProcessSP],
        [ProcessStatus],
        [HeadRowSetupSP],
        [LineRowSetupSP],
        [DistrRowSetupSP],
        [HeadRowSelectSP],
        [LineRowSelectSP],
        [DistrRowSelectSP],
        [HeadValidationSP],
        [LinesValidationSP],
        [DistrValidationSP],
        [AfterCloseLinesSP],
        [AfterCloseDistrSP],
        [HeadValue1Descr],
        [HeadValue2Descr],
        [HeadValue3Descr],
        [HeadValue4Descr],
        [LineValue1Descr],
        [LineValue2Descr],
        [LineValue3Descr],
        [LineValue4Descr],
        [DistrValue1Descr],
        [DistrValue2Descr],
        [DistrValue3Descr],
        [DistrValue4Descr],
        [HeadValidationStatus],
        [LinesValidationStatus],
        [DistrValidationStatus],
        [HeadCalculationSP],
        [HeadCalculationStatus],
        [LinesCalculationSP],
        [LinesCalculationStatus],
        [DistrCalculationSP],
        [DistrCalculationStatus],
        [HeadAfterLoadSP],
        [LinesAfterLoadSP],
        [DistrAfterLoadSP],
        [HeadAfterSaveSP],
        [LinesAfterSaveSP],
        [DistrAfterSaveSP],
        [HeadAfterDeleteSP],
        [LinesAfterDeleteSP],
        [DistrAfterDeleteSP]
        FROM     [MoBatch].bi_batchtypes
        WHERE    batchtype = @BatchType
        ORDER BY SEQUENCE
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypes_insert](
        @BatchType  VARCHAR(255),
        @License    VARCHAR(255),
        @Sequence   INT,
        @BatchCatCd VARCHAR(255))
        AS
        BEGIN
        SET nocount  OFF;

        IF @BatchCatCd = '(None)'
        BEGIN
        SELECT @BatchCatCd = NULL
        END

        INSERT INTO [MoBatch].[BI_BatchTypes]
        ([BatchType],
        [License],
        [Sequence],
        [BatchCatCd])
        VALUES     (@BatchType,
        @License,
        @Sequence,
        @BatchCatCd)

        IF @@ERROR &gt; 0
        BEGIN
        RAISERROR ('Insert BI_BatchTypes Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypes_delete](
        -- ===========================================================
        -- Author:        R. Blomstrand
        -- Create date: 23/09/2008
        -- Description:   Used by Batch-It to delete batch types
        -- ===========================================================
        @BatchType VARCHAR(255))
        AS
        BEGIN
        SET nocount  OFF;

        DELETE [MoBatch].[BI_BatchTypes]
        WHERE  [BatchType] = @BatchType

        IF @@ERROR &gt; 0
        BEGIN
        RAISERROR ('Delete BI_BatchTypes Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_batchtypes_lock_select](
        @BatchType       VARCHAR(255)  = NULL,
        @HeaderID        VARCHAR(50)  = NULL,
        @WindowsUserName VARCHAR(255)  = NULL)
        AS
        BEGIN
        DECLARE  @BatchLocking NVARCHAR(50)
        SELECT @BatchLocking = [Value]
        FROM   [MoBatch].[BI_AppSettings]
        WHERE  [Setting] = 'BatchLocking'

        IF @BatchLocking = 'Header ID'
        BEGIN
        SELECT l.[BatchType],
        l.[HeaderID],
        l.[LockUser],
        u.[FirstName],
        u.[SurName],
        l.[LockTime]
        FROM   [MoBatch].[BI_Locks] l
        LEFT OUTER JOIN [MoBatch].[BI_Users] u
        ON u.userid = l.lockuser
        WHERE  (l.[BatchType] = @BatchType
        OR @BatchType IS NULL)
        AND (l.[HeaderID] = @HeaderID
        OR @HeaderID IS NULL)
        AND (l.lockuser != @WindowsUserName
        OR @BatchType IS NULL)
        END
        ELSE
        BEGIN
        IF @BatchType IS NULL
        BEGIN
        -- Get locks for all batches and users
        SELECT bt.[BatchType],
        '' AS [HeaderID],
        bt.[LockUser],
        u.[FirstName],
        u.[SurName],
        bt.[LockTime]
        FROM     [MoBatch].[BI_batchtypes] bt
        LEFT OUTER JOIN [MoBatch].[BI_Users] u
        ON u.userid = bt.lockuser
        WHERE    bt.lockuser IS NOT NULL
        ORDER BY [BatchType]
        END
        ELSE
        BEGIN
        -- Get locks for specific batch (and exclude current user)
        SELECT bt.[BatchType],
        '' AS [HeaderID],
        bt.[LockUser],
        u.[FirstName],
        u.[SurName],
        bt.[LockTime]
        FROM     [MoBatch].[BI_batchtypes] bt
        LEFT OUTER JOIN [MoBatch].[BI_Users] u
        ON u.userid = bt.lockuser
        WHERE    bt.lockuser IS NOT NULL
        AND bt.lockuser != @WindowsUserName
        AND bt.[BatchType] = @BatchType
        ORDER BY [BatchType]
        END
        END
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roles_update]
        @RoleId    VARCHAR(50),
        @RoleDescr VARCHAR(150)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_Roles]
        SET    [RoleId] = @RoleId,
        [RoleDescr] = @RoleDescr
        WHERE  [RoleId] = @RoleId

        -- Begin Return Select - do not remove
        SELECT [RoleId],
        [RoleDescr]
        FROM   [MoBatch].[BI_Roles]
        WHERE  [RoleId] = @RoleId
        -- End Return Select - do not remove
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roles_delete]
        @RoleId VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_Roles]
        WHERE       [RoleId] = @RoleId

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roles_select]
        @RoleId VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [RoleId],
        [RoleDescr]
        FROM     [MoBatch].[BI_Roles]
        WHERE    ([RoleId] = @RoleId
        OR @RoleId IS NULL)
        ORDER BY [RoleDescr]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_roles_insert]
        @RoleId    VARCHAR(50),
        @RoleDescr VARCHAR(150)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_Roles]
        ([RoleId],
        [RoleDescr])
        SELECT @RoleId,
        @RoleDescr

        -- Begin Return Select - do not remove
        SELECT [RoleId],
        [RoleDescr]
        FROM   [MoBatch].[BI_Roles]
        WHERE  [RoleId] = @RoleId
        -- End Return Select - do not remove
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_rptcategories_delete]
        @RptCategoryID VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_RPTCategories]
        WHERE       [RptCategoryID] = @RptCategoryID

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_rptcategories_insert]
        @RptCategoryID    VARCHAR(50),
        @RptCategoryDescr VARCHAR(200),
        @Sequence         INT,
        @BatchReport      BIT,
        @BatchType        VARCHAR(50),
        @BatchLevel       CHAR(1)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_RPTCategories]
        ([RptCategoryID],
        [BatchLevel],
        [BatchReport],
        [BatchType],
        [RptCategoryDescr],
        [Sequence])
        SELECT @RptCategoryID,
        @BatchLevel,
        Isnull(@BatchReport,0),
        @BatchType,
        @RptCategoryDescr,
        @Sequence

        -- Begin Return Select !- do not remove
        SELECT [RptCategoryID],
        [RptCategoryDescr],
        [Sequence],
        [BatchReport],
        [BatchType],
        [BatchLevel]
        FROM   [MoBatch].[BI_RPTCategories]
        WHERE  [RptCategoryID] = @RptCategoryID
        -- End Return Select !- do not remove
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_rptcategories_update]
        @RptCategoryID    VARCHAR(50),
        @RptCategoryDescr VARCHAR(200),
        @Sequence         INT,
        @BatchReport      BIT,
        @BatchType        VARCHAR(50),
        @BatchLevel       CHAR(1)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_RPTCategories]
        SET    [RptCategoryID] = @RptCategoryID,
        [BatchLevel] = @BatchLevel,
        [BatchReport] = Isnull(@BatchReport,0),
        [BatchType] = @BatchType,
        [RptCategoryDescr] = @RptCategoryDescr,
        [Sequence] = @Sequence
        WHERE  [RptCategoryID] = @RptCategoryID

        -- Begin Return Select - do not remove
        SELECT [RptCategoryID],
        [RptCategoryDescr],
        [Sequence],
        [BatchReport],
        [BatchType],
        [BatchLevel]
        FROM   [MoBatch].[BI_RPTCategories]
        WHERE  [RptCategoryID] = @RptCategoryID
        -- End Return Select - do not remove
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_rptcategories_select]
        @RptCategoryID VARCHAR(50),
        @BatchReport   BIT,
        @BatchType     VARCHAR(50),
        @BatchLevel    CHAR(1)
        AS
        BEGIN
        SET nocount  ON
        SELECT [RptCategoryID],
        [RptCategoryDescr],
        [Sequence],
        [BatchReport],
        [BatchType],
        [BatchLevel]
        FROM   [MoBatch].[BI_RPTCategories]
        WHERE  (@RptCategoryID IS NULL
        OR [RptCategoryID] = @RptCategoryID)
        AND (@BatchReport IS NULL
        OR [BatchReport] = @BatchReport)
        AND (@BatchType IS NULL
        OR [BatchType] = @BatchType)
        AND (@BatchLevel IS NULL
        OR [BatchLevel] = @BatchLevel)
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filters_delete]
        @FilterID INT
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_Filters]
        WHERE       [FilterID] = @FilterID

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filters_insert]
        @OldFilterID     INT,
        @BatchType       VARCHAR(50),
        @BatchLevel      CHAR(1),
        @FilterDescr     VARCHAR(255),
        @FilterOwner     VARCHAR(255),
        @FilterSQL       VARCHAR(MAX),
        @WindowsUserName VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        IF @OldFilterID = 0
        BEGIN
        INSERT INTO [MoBatch].[BI_Filters]
        ([BatchType],
        [BatchLevel],
        [FilterDescr],
        [FilterOwner],
        [FilterSQL])
        SELECT @BatchType,
        @BatchLevel,
        @FilterDescr,
        @WindowsUserName,
        @FilterSQL

        SELECT [FilterID],
        [BatchType],
        [BatchLevel],
        [FilterDescr],
        [FilterOwner],
        [FilterSQL]
        FROM   [MoBatch].[BI_Filters]
        WHERE  [FilterID] = Scope_identity()
        END
        ELSE
        BEGIN
        UPDATE [MoBatch].[BI_Filters]
        SET    [FilterDescr] = @FilterDescr,
        [FilterSQL] = @FilterSQL
        WHERE  [FilterID] = @OldFilterID

        SELECT [FilterID],
        [BatchType],
        [BatchLevel],
        [FilterDescr],
        [FilterOwner],
        [FilterSQL]
        FROM   [MoBatch].[BI_Filters]
        WHERE  [FilterID] = @OldFilterID
        END

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filters_select]
        @FilterID INT
        AS
        BEGIN
        SET nocount  ON
        SELECT [FilterID],
        [BatchType],
        [BatchLevel],
        [FilterDescr],
        [FilterOwner],
        [FilterSQL]
        FROM   [MoBatch].[BI_Filters]
        WHERE  ([FilterID] = @FilterID
        OR @FilterID IS NULL)
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_filtersdefault_select]
        @BatchType       VARCHAR(50),
        @BatchLevel      CHAR(1),
        @GetMyDefault    INT  = 0,
        @MineOnly        INT  = 0,
        @InclAssigned    INT  = 0,
        @WindowsUserName VARCHAR(255)
        AS
        BEGIN
        -- SET NOCOUNT ON added to prevent extra result sets from
        -- interfering with SELECT statements.
        SET nocount  ON;
        DECLARE  @MyRole VARCHAR(50)

        IF @GetMyDefault = 1
        BEGIN
        -- Get my role ID (use in criteria)
        SELECT @MyRole = Max(roleid)
        FROM   [MoBatch].bi_users
        WHERE  userid = @WindowsUserName

        -- Select all filters that are defaults for user or users role
        -- Note! Ordering to ensure that filters against user comes
        -- before filters against users role
        SELECT DISTINCT f.[FilterID],
        f.[BatchType],
        f.[BatchLevel],
        f.[FilterDescr],
        f.[FilterSQL],
        Isnull(fa.[AssignToRole],NULL) [AssignToRole],
        Isnull(fa.[RoleDefault],0) [RoleDefault],
        Isnull(fa.[AssignToUser],NULL) [AssignToUser],
        Isnull(fa.[UserDefault],0) [UserDefault]
        FROM     [MoBatch].[BI_Filters] f
        JOIN [MoBatch].[BI_FilterAssigned] fa
        ON (fa.filterid = f.filterid)
        WHERE    f.[BatchType] = @BatchType
        AND f.[BatchLevel] = @BatchLevel
        AND ((fa.[AssignToRole] = @MyRole
        AND fa.roledefault = 1)
        OR (fa.[AssignToUser] = @WindowsUserName
        AND fa.userdefault = 1))
        ORDER BY [UserDefault] DESC
        END
        ELSE
        BEGIN
        -- Not just selecting my default SQL
        IF @MineOnly = 0
        BEGIN
        IF @InclAssigned = 1
        BEGIN
        -- INCLUDE ASSIGNED, ALL (NOT JUST MY) FILTERS
        SELECT DISTINCT f.[FilterID],
        f.[BatchType],
        f.[BatchLevel],
        f.[FilterDescr],
        f.[FilterSQL],
        Isnull(fa.[AssignToRole],NULL) [AssignToRole],
        Isnull(fa.[RoleDefault],0) [RoleDefault],
        Isnull(fa.[AssignToUser],NULL) [AssignToUser],
        Isnull(fa.[UserDefault],0) [UserDefault]
        FROM     [MoBatch].[BI_Filters] f
        LEFT OUTER JOIN [MoBatch].[BI_FilterAssigned] fa
        ON (fa.filterid = f.filterid)
        WHERE    f.[BatchType] = @BatchType
        AND f.[BatchLevel] = @BatchLevel
        ORDER BY f.[FilterDescr]
        END
        ELSE
        BEGIN
        -- DO NOT INCLUDE ASSIGNED, ALL (NOT JUST MY) FILTERS
        SELECT DISTINCT f.[FilterID],
        f.[BatchType],
        f.[BatchLevel],
        f.[FilterDescr],
        f.[FilterSQL],
        NULL [AssignToRole],
        0 [RoleDefault],
        NULL [AssignToUser],
        0 [UserDefault]
        FROM     [MoBatch].[BI_Filters] f
        WHERE    f.[BatchType] = @BatchType
        AND f.[BatchLevel] = @BatchLevel
        ORDER BY f.[FilterDescr]
        END
        END
        ELSE
        BEGIN
        -- Get my role ID (use in criteria)
        SELECT @MyRole = Max(roleid)
        FROM   [MoBatch].bi_users
        WHERE  userid = @WindowsUserName

        IF @InclAssigned = 1
        BEGIN
        -- INCLUDE ASSIGNED, JUST MY FILTERS
        SELECT DISTINCT f.[FilterID],
        f.[BatchType],
        f.[BatchLevel],
        f.[FilterDescr],
        f.[FilterSQL],
        Isnull(fa.[AssignToRole],NULL) [AssignToRole],
        Isnull(fa.[RoleDefault],0) [RoleDefault],
        Isnull(fa.[AssignToUser],NULL) [AssignToUser],
        Isnull(fa.[UserDefault],0) [UserDefault]
        FROM     [MoBatch].[BI_Filters] f
        LEFT OUTER JOIN [MoBatch].[BI_FilterAssigned] fa
        ON (fa.filterid = f.filterid)
        WHERE    f.[BatchType] = @BatchType
        AND f.[BatchLevel] = @BatchLevel
        AND (fa.[AssignToRole] = @MyRole
        OR fa.[AssignToUser] = @WindowsUserName)
        ORDER BY f.[FilterDescr]
        END
        ELSE
        BEGIN
        -- DO NOT INCLUDE ASSIGNED, JUST MY FILTERS
        SELECT DISTINCT f.[FilterID],
        f.[BatchType],
        f.[BatchLevel],
        f.[FilterDescr],
        f.[FilterSQL],
        NULL [AssignToRole],
        0 [RoleDefault],
        NULL [AssignToUser],
        0 [UserDefault]
        FROM     [MoBatch].[BI_Filters] f
        JOIN [MoBatch].[BI_FilterAssigned] fa
        ON (fa.filterid = f.filterid)
        WHERE    f.[BatchType] = @BatchType
        AND f.[BatchLevel] = @BatchLevel
        AND (fa.[AssignToRole] = @MyRole
        OR fa.[AssignToUser] = @WindowsUserName)
        ORDER BY f.[FilterDescr]
        END
        END
        END
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_appsettings_select]
        @Setting NVARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [Setting],
        [Description],
        [Value]
        FROM     [MoBatch].[BI_AppSettings]
        WHERE    ([Setting] = @Setting
        OR @Setting IS NULL)
        ORDER BY [Sequence]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_appsettings_update]
        @Setting NVARCHAR(50),
        @Value   NVARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON
        BEGIN TRAN
        UPDATE [MoBatch].[BI_AppSettings]
        SET    [Value] = @Value
        WHERE  [Setting] = @Setting
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_get_columns](
        @BatchType       VARCHAR(50),
        @BatchLevel      CHAR(1),
        @Table           VARCHAR(100),
        @AlwaysGetRename INT)
        AS
        BEGIN
        -- If no table specified (because just entered form and user not yet selected
        -- from drop-down) then get the table name used for existing setup (if any)
        IF Ltrim(@Table) = ''
        BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_columns bic
        WHERE  bic.batchtype = @BatchType
        AND bic.[BatchLevel] = @BatchLevel
        END
        SELECT @BatchType batchtype,
        @BatchLevel batchlevel,
        @Table [Table],
        name [Column],
        (CASE
        WHEN @AlwaysGetRename = 1
        THEN name
        ELSE NULL
        END) [Rename To],
        column_id [Sequence],
        NULL [LookUp_SP],
        NULL [Select_SP],
        NULL [Validation_SP],
        0 [Hide],
        0 [ReadOnly],
        0 [ReadOnly Existing],
        0 [Filter On],
        0 [Required],
        0 [Batch ID],
        0 [Line ID],
        0 [Distr ID],
        0 [Status Col],
        NULL [Format],
        'NotSet' [Alignment]
        FROM   sys.columns sc
        WHERE  object_id = Object_id(@Table)
        AND NOT EXISTS (SELECT 'x'
        FROM   [MoBatch].bi_columns bic
        WHERE  bic.batchtype = @BatchType
        AND bic.[BatchLevel] = @BatchLevel
        AND bic.[Table] = @Table
        AND bic.[Column] = sc.name)
        UNION
        SELECT batchtype,
        [BatchLevel],
        [Table],
        [Column],
        (CASE
        WHEN @AlwaysGetRename = 1
        THEN Isnull(Nullif([Rename To],''),[Column])
        ELSE [Rename To]
        END) [Rename To],
        [Sequence],
        [LookUp_SP],
        [Select_SP],
        [Validation_SP],
        [Hide],
        [ReadOnly],
        [ReadOnly Existing],
        [Filter On],
        [Required],
        [Batch ID],
        [Line ID],
        [Distr ID],
        [Status Col],
        [Format],
        Isnull([Alignment],'NotSet') [Alignment]
        FROM   [MoBatch].bi_columns bic
        WHERE  batchtype = @BatchType
        AND [BatchLevel] = @BatchLevel
        AND [Table] = @Table
        AND EXISTS (SELECT 'x'
        FROM   sys.columns sc
        WHERE  object_id = Object_id(bic.[Table])
        AND name = bic.[Column])
        ORDER BY batchtype,
        [Table],
        [Sequence]
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_columns_delete](
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1))
        AS
        BEGIN
        DELETE [MoBatch].[BI_Columns]
        WHERE  batchtype = @BatchType
        AND batchlevel = @BatchLevel;
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_options_select]
        @Option_Type VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   option_value [Value],
        option_text [Text]
        FROM     [MoBatch].bi_options
        WHERE    option_type = @Option_Type
        ORDER BY SEQUENCE
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_users_select_name]
        @UserId VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [UserId],
        Ltrim([FirstName]
        + ' '
        + [SurName]) [Name]
        FROM     [MoBatch].[BI_Users]
        ORDER BY [Name]
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_userdetails]
        @SelectFor VARCHAR(50)
        AS
        BEGIN
        -- SET NOCOUNT ON added to prevent extra result sets from
        -- interfering with SELECT statements.
        SET nocount  ON;

        IF @SelectFor = 'ALL'
        BEGIN
        -- Return user details of all users
        SELECT [UserId],
        [FirstName],
        [SurName],
        [RoleId]
        FROM   [MoBatch].[BI_Users]
        END
        ELSE
        BEGIN
        -- Return user details of specified user
        SELECT [UserId],
        [FirstName],
        [SurName],
        [RoleId]
        FROM   [MoBatch].[BI_Users]
        WHERE  [UserId] = @SelectFor
        END
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_users_insert]
        @UserId    VARCHAR(255),
        @FirstName VARCHAR(255),
        @RoleId    VARCHAR(50),
        @SurName   VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_Users]
        ([UserId],
        [FirstName],
        [RoleId],
        [SurName])
        SELECT @UserId,
        @FirstName,
        @RoleId,
        @SurName

        -- Begin Return Select - do not remove
        SELECT [UserId],
        [FirstName],
        [RoleId],
        [SurName]
        FROM   [MoBatch].[BI_Users]
        WHERE  [UserId] = @UserId
        -- End Return Select - do not remove
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_users_update]
        @UserId    VARCHAR(255),
        @FirstName VARCHAR(255),
        @RoleId    VARCHAR(50),
        @SurName   VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_Users]
        SET    [UserId] = @UserId,
        [FirstName] = @FirstName,
        [RoleId] = @RoleId,
        [SurName] = @SurName
        WHERE  [UserId] = @UserId

        -- Begin Return Select - do not remove
        SELECT [UserId],
        [FirstName],
        [RoleId],
        [SurName]
        FROM   [MoBatch].[BI_Users]
        WHERE  [UserId] = @UserId
        -- End Return Select - do not remove
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_users_delete]
        @UserId VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_Users]
        WHERE       [UserId] = @UserId

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_users_select]
        @UserId VARCHAR(255)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [UserId],
        [FirstName],
        [RoleId],
        [SurName]
        FROM     [MoBatch].[BI_Users]
        WHERE    ([UserId] = @UserId
        OR @UserId IS NULL)
        ORDER BY [UserId]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_reports_select]
        @ReportName    VARCHAR(100),
        @RptCategoryID VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [ReportName],
        [RptCategoryID],
        [ReportURL],
        [Sequence]
        FROM     [MoBatch].[BI_Reports]
        WHERE    ([ReportName] = @ReportName
        OR @ReportName IS NULL)
        AND ([RptCategoryID] = @RptCategoryID
        OR @RptCategoryID IS NULL)
        ORDER BY [Sequence]
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_reports_insert]
        @ReportName    VARCHAR(100),
        @RptCategoryID VARCHAR(50),
        @ReportURL     VARCHAR(500),
        @Sequence      INT
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_Reports]
        ([ReportName],
        [RptCategoryID],
        [ReportURL],
        [Sequence])
        SELECT @ReportName,
        @RptCategoryID,
        @ReportURL,
        @Sequence

        -- Begin Return Select - do not remove
        SELECT [ReportName],
        [RptCategoryID],
        [ReportURL],
        [Sequence]
        FROM   [MoBatch].[BI_Reports]
        WHERE  [ReportName] = @ReportName
        AND [RptCategoryID] = @RptCategoryID
        -- End Return Select - do not remove
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_reports_update]
        @ReportName    VARCHAR(100),
        @RptCategoryID VARCHAR(50),
        @ReportURL     VARCHAR(500),
        @Sequence      INT
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        UPDATE [MoBatch].[BI_Reports]
        SET    [ReportName] = @ReportName,
        [RptCategoryID] = @RptCategoryID,
        [ReportURL] = @ReportURL,
        [Sequence] = @Sequence
        WHERE  [ReportName] = @ReportName

        -- Begin Return Select !- do not remove
        SELECT [ReportName],
        [RptCategoryID],
        [ReportURL],
        [Sequence]
        FROM   [MoBatch].[BI_Reports]
        WHERE  [ReportName] = @ReportName
        -- End Return Select !- do not remove
        COMMIT TRAN
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_reports_delete]
        @ReportName    VARCHAR(100),
        @RptCategoryID VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_Reports]
        WHERE       [ReportName] = @ReportName
        AND [RptCategoryID] = @RptCategoryID

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filtercriteria_insert]
        @FilterID        INT,
        @SearchID        INT,
        @SearchField     VARCHAR(255),
        @SearchCondition VARCHAR(50),
        @SearchValue     VARCHAR(255),
        @SearchJoin      VARCHAR(10)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_FilterCriteria]
        ([FilterID],
        [SearchID],
        [SearchField],
        [SearchCondition],
        [SearchValue],
        [SearchJoin])
        SELECT @FilterID,
        @SearchID,
        @SearchField,
        @SearchCondition,
        @SearchValue,
        @SearchJoin

        -- Begin Return Select - do not remove
        SELECT [FilterID],
        [SearchID],
        [SearchField],
        [SearchCondition],
        [SearchValue],
        [SearchJoin]
        FROM   [MoBatch].[BI_FilterCriteria]
        WHERE  [FilterID] = @FilterID
        AND [SearchID] = @SearchID
        -- End Return Select - do not remove
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filtercriteria_select]
        @FilterID INT
        AS
        BEGIN
        SET nocount  ON
        SELECT [FilterID],
        [SearchID],
        [SearchField],
        [SearchCondition],
        [SearchValue],
        [SearchJoin]
        FROM   [MoBatch].[BI_FilterCriteria]
        WHERE  ([FilterID] = @FilterID
        OR @FilterID IS NULL)
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filtercriteria_delete]
        @FilterID INT
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_FilterCriteria]
        WHERE       [FilterID] = @FilterID

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filterassigned_select]
        @FilterID INT
        AS
        BEGIN
        SET nocount  ON
        SELECT [FilterID],
        [AssignID],
        [AssignToRole],
        [AssignToUser],
        [RoleDefault],
        [UserDefault]
        FROM   [MoBatch].[BI_FilterAssigned]
        WHERE  [FilterID] = @FilterID
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filterassigned_insert]
        @FilterID     INT,
        @AssignID     INT,
        @AssignToRole VARCHAR(50),
        @AssignToUser VARCHAR(255),
        @RoleDefault  INT,
        @UserDefault  INT
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        INSERT INTO [MoBatch].[BI_FilterAssigned]
        ([AssignID],
        [FilterID],
        [AssignToRole],
        [AssignToUser],
        [RoleDefault],
        [UserDefault])
        SELECT @AssignID,
        @FilterID,
        @AssignToRole,
        @AssignToUser,
        @RoleDefault,
        @UserDefault

        -- Begin Return Select - do not remove
        SELECT [FilterID],
        [AssignID],
        [AssignToRole],
        [AssignToUser],
        [RoleDefault],
        [UserDefault]
        FROM   [MoBatch].[BI_FilterAssigned]
        WHERE  [AssignID] = @AssignID
        AND [FilterID] = @FilterID
        -- End Return Select - do not remove
        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_filterassigned_delete]
        @FilterID INT
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DELETE FROM [MoBatch].[BI_FilterAssigned]
        WHERE       [FilterID] = @FilterID

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_train_default]
        @StructureCode VARCHAR(50)
        AS
        BEGIN
        SET nocount  ON
        SET xact_abort  ON

        BEGIN TRAN

        DECLARE  @LastSequence INT
        SELECT @LastSequence = Max([Sequence])
        FROM   [MoBatch].[BI_DM_Structure_Cols]
        WHERE  [Structurecode] = @StructureCode

        -- Create temp table
        CREATE TABLE #default_training (
        [Sequence] INT,
        [SqlLine]  VARCHAR(MAX))

        ---------------------------
        -- First the Insert portion
        ---------------------------
        INSERT INTO #default_training
        SELECT 0 AS [Sequence],
        'INSERT INTO MINING MODEL ['
        + @StructureCode
        + '] (' AS [SqlLine]
        FROM   [MoBatch].[BI_DM_Structure]
        WHERE  [Structurecode] = @StructureCode

        ----------------------
        -- Then the TO columns
        ----------------------
        -- If columns set up against structure then create default using these
        INSERT INTO #default_training
        SELECT   [Sequence],
        '['
        + [Column]
        + (CASE
        WHEN [Sequence] = @LastSequence
        THEN '] '
        ELSE '], '
        END) AS [SqlLine]
        FROM     [MoBatch].[BI_DM_Structure_Cols]
        WHERE    [Structurecode] = @StructureCode
        ORDER BY [Sequence]

        -- And if no columns against the structure then just indicate to the
        -- user where the fields should go
        IF @@ROWCOUNT = 0
        BEGIN
        INSERT INTO #default_training
        SELECT 1 AS [Sequence],
        '[Replace this with fields...]' AS [SqlLine]
        END

        --------------------------------------------------------------------------
        -- Then close TO columns, and provide beginning of query FROM datasource
        --------------------------------------------------------------------------
        INSERT INTO #default_training
        SELECT 1000 AS [Sequence],
        ') OpenQuery(DS_'
        + Db_name()
        + ', ''SELECT ' AS [SqlLine]

        ------------------------
        -- Then the FROM columns
        ------------------------
        -- If columns set up against structure then create default using these
        INSERT INTO #default_training
        SELECT   [Sequence]
        + 1000 AS [Sequence],
        '['
        + [Column]
        + (CASE
        WHEN [Sequence] = @LastSequence
        THEN '] '
        ELSE '], '
        END) AS [SqlLine]
        FROM     [MoBatch].[BI_DM_Structure_Cols]
        WHERE    [Structurecode] = @StructureCode
        ORDER BY [Sequence]

        -- And if no columns against the structure then just indicate to the
        -- user where the fields should go
        IF @@ROWCOUNT = 0
        BEGIN
        INSERT INTO #default_training
        SELECT 1001 AS [Sequence],
        '[Replace this with fields...]' AS [SqlLine]
        END

        ---------------------------------------------
        -- Finally end the Dmx (including FROM table)
        ---------------------------------------------
        INSERT INTO #default_training
        SELECT 2001 AS [Sequence],
        'FROM ['
        + bt.[Table]
        + ']'')' AS [SqlLine]
        FROM   [MoBatch].bi_tables bt
        INNER JOIN [MoBatch].[BI_DM_Structure] AS dms
        ON dms.[BatchType] = bt.[BatchType]
        AND dms.[BatchLevel] = bt.[BatchLevel]
        WHERE  dms.[Structurecode] = @StructureCode

        -------------------------------
        -- Now select the final product
        -------------------------------
        SELECT [SqlLine]
        FROM     #default_training
        ORDER BY [Sequence]

        DROP TABLE #default_training

        COMMIT
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_columns_insert](
               @BatchType        VARCHAR(50),
               @BatchLevel       CHAR(1),
               @Table            VARCHAR(100),
               @Column           VARCHAR(100),
               @RenameTo         VARCHAR(100),
               @Sequence         INT,
               @Lookup_SP        VARCHAR(100),
               @Select_SP        VARCHAR(100),
               @Validation_SP    VARCHAR(100),
               @Hide             BIT,
               @ReadOnly         BIT,
               @ReadOnlyExisting BIT,
               @FilterOn         BIT,
               @Required         BIT,
               @BatchID          BIT,
               @LineID           BIT,
               @DistrID          BIT,
               @StatusCol        BIT,
               @Format           VARCHAR(50),
               @Alignment        VARCHAR(50))
AS
  BEGIN
    SET nocount  OFF;
    
    DECLARE  @Computed BIT
                       
    SELECT @Computed = Isnull(is_computed,0)
    FROM   sys.columns c
    WHERE  c.object_id = Object_id(@Table)
           AND name = @Column
                      
    INSERT INTO [MoBatch].[BI_Columns]
               (batchtype,
                [BatchLevel],
                [Table],
                [Column],
                [Rename To],
                [Sequence],
                [LookUp_SP],
                [Select_SP],
                [Validation_SP],
                [Hide],
                [ReadOnly],
                [ReadOnly Existing],
                [Filter On],
                [Required],
                [Batch ID],
                [Line ID],
                [Distr ID],
                [Status Col],
                [Computed],
                [Format],
                [Alignment])
    VALUES     (@BatchType,
                @BatchLevel,
                @Table,
                @Column,
                @RenameTo,
                @Sequence,
                @LookUp_SP,
                @Select_SP,
                @Validation_SP,
                @Hide,
                @ReadOnly,
                @ReadOnlyExisting,
                @FilterOn,
                @Required,
                @BatchID,
                @LineID,
                @DistrID,
                @StatusCol,
                @Computed,
                @Format,
                @Alignment)
               
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_RecordSpParamInfo](
               @SPName VARCHAR(50)  = ' ')
AS
  BEGIN
    SET nocount  ON;
    --
    DELETE FROM BI_SP_ParameterInfo
    WHERE       spname = @SPName
    --
    DECLARE  @nSQL VARCHAR(MAX)
    SET @nSQL = 'SELECT
                        SPName = SP.Name
                        , ParameterName = P.name
                        , ParameterID = P.parameter_id
                        , TypeName = T.name
                        , ParameterSize = P.max_length
                        , RequiredParm = convert(int,0)
                        , OutputParm = is_output
                    FROM '
                  + 'sys.parameters P WITH (nolock)
                            inner join sys.objects SP WITH (nolock)
                                on SP.type = ''' + 'P' + '''
                                and SP.name = '''
                  + @SPName + '''
                                and P.[object_id] = SP.[object_id]
                            inner join sys.types T
                                on T.user_type_id = P.user_type_id
                        order by P.Parameter_id'
    --
    
    INSERT INTO BI_SP_ParameterInfo
	    EXEC( @nSQL)

    UPDATE a
    SET    requiredparm = 1
    FROM   BI_SP_ParameterInfo a
           INNER JOIN BI_SP_ParameterInfo rp WITH (nolock)
             ON rp.spname = a.spname
                AND rp.parametername = a.parametername
  END</commandtext>
      <comment>Move all MoBatch objects to new MoBatch schema</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_GetSpParamInfo]
               @SpName    VARCHAR(1024),
               @NumParams INT
AS
  BEGIN
    IF @NumParams &lt;&gt; -1
      BEGIN
        DECLARE  @CountParams INT
        SELECT @CountParams = Count(* )
        FROM   [MoBatch].bi_sp_parameterinfo WITH (NOLOCK)
        WHERE  spname = @SpName
        -- If different number of params than expected then
        -- recalculate parameter entries to ensure that this is correct
        IF @CountParams &lt;&gt; @NumParams
          BEGIN
            EXEC [MoBatch].[A_sp_bi_recordspparaminfo]
              @SPName
          END
      END
    SELECT *
    FROM   [MoBatch].[BI_sp_parameterinfo] WITH (NOLOCK)
    WHERE  spname = @SpName
    ORDER BY ParameterID
  END</commandtext>
      <comment>Sort parameters by Parameter ID</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   syscolumns
               WHERE  name = 'DropDown'
                      AND id = Object_id('[MoBatch].[BI_AppSettings]'))
  ALTER TABLE mobatch.bi_appsettings
  ADD dropdown BIT   NULL</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'DefaultHelp')
  INSERT INTO [MoBatch].[BI_AppSettings]
             ([Setting],
              [Description],
              [Value],
              [Sequence])
  VALUES     ('DefaultHelp',
              'Whether default help is standard or custom document',
              'Standard',
              '2')</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'NegForeColour')
  INSERT INTO [MoBatch].[BI_AppSettings]
             ([Setting],
              [Description],
              [Value],
              [Sequence],
              [DropDown])
  SELECT 'NegForeColour',
         'Forecolour to use for negative amounts in Batch Grid',
         '255,255,0,0',
         3,
         1</commandtext>
      <commandtext>UPDATE [MoBatch].[BI_AppSettings]
SET    dropdown = 1
WHERE  setting IN ('BatchLocking','DefaultHelp','NegForeColour')</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_Options]
               WHERE  [Option_Type] = 'DefaultHelp')
  INSERT INTO [MoBatch].[BI_Options]
             ([Option_Type],
              [Option_Value],
              [Option_Text],
              [Sequence])
  SELECT 'DefaultHelp',
         'Standard',
         'Standard Help Doc',
         1
  UNION 
  SELECT 'DefaultHelp',
         'Custom',
         'Custom Help Document',
         2</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_Options]
               WHERE  [Option_Type] = 'NegForeColour')
  INSERT INTO [MoBatch].[BI_Options]
             ([Option_Type],
              [Option_Value],
              [Option_Text],
              [Sequence])
  SELECT 'NegForeColour',
         '255,0,0,0',
         'Black (Better performance)',
         1
  UNION 
  SELECT 'NegForeColour',
         '255,255,0,0',
         'Red',
         2
  UNION 
  SELECT 'NegForeColour',
         '255,139,0,0',
         'Dark Red',
         3
  UNION 
  SELECT 'NegForeColour',
         '255,0,0,255',
         'Blue',
         4
  UNION 
  SELECT 'NegForeColour',
         '255,255,255,0',
         'Yellow',
         5
  UNION 
  SELECT 'NegForeColour',
         '255,0,128,0',
         'Green',
         6</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_appsettings_select]
          @Setting NVARCHAR(50)  = ''
AS
  BEGIN
    SET nocount  ON
    SELECT aset.[Setting],
           aset.[Description],
           aset.[Value],
           aset.[Value] AS [ValueDescription],
           aset.[dropdown],
           aset.[Sequence]
    FROM   [MoBatch].[BI_AppSettings] aset WITH (NOLOCK)
    WHERE  ([Setting] = @Setting
             OR @Setting = '')
           AND Isnull(aset.[dropdown],0) = 0
    UNION 
    SELECT aset.[Setting],
           aset.[Description],
           aset.[Value],
           opt.option_text AS [ValueDescription],
           aset.[dropdown],
           aset.[Sequence]
    FROM   [MoBatch].[BI_AppSettings] aset WITH (NOLOCK)
           LEFT OUTER JOIN [MoBatch].[BI_Options] AS opt WITH (NOLOCK)
             ON opt.[Option_Type] = aset.[Setting]
                AND opt.[Option_Value] = aset.[Value]
    WHERE  ([Setting] = @Setting
             OR @Setting = '')
           AND Isnull(aset.[dropdown],0) = 1
    ORDER BY [Sequence]
  END</commandtext>
      <comment>Cater for defaulting Help Doc</comment>
    </command>
  </Version>
  <Version number="1.0.14.0">
    <command>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headrowsetupsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linerowsetupsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distrrowsetupsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headrowselectsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linerowselectsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distrrowselectsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headvalidationsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linesvalidationsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distrvalidationsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN aftercloselinessp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN afterclosedistrsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headcalculationsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linescalculationsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distrcalculationsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headafterloadsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linesafterloadsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distrafterloadsp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headaftersavesp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linesaftersavesp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distraftersavesp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN headafterdeletesp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN linesafterdeletesp VARCHAR(1024) NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_BatchTypes]
        ALTER COLUMN distrafterdeletesp VARCHAR(1024) NULL</commandtext>
      <comment>Cater for larger SP name + parameters in events</comment>
    </command>
  </Version>
  <Version number="1.0.15.0">
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_structure_train_default]
          @StructureCode VARCHAR(50)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    
    BEGIN TRAN
    
    DECLARE  @LastSequence INT
    SELECT @LastSequence = Max([Sequence])
    FROM   [MoBatch].[BI_DM_Structure_Cols]
    WHERE  [Structurecode] = @StructureCode
                             
    -- Create temp table
    CREATE TABLE #default_training (
      [Sequence] INT,
      [SqlLine]  VARCHAR(MAX))
    
    ---------------------------
    -- First the Insert portion
    ---------------------------
    INSERT INTO #default_training
    SELECT 0 AS [Sequence],
           'INSERT INTO MINING STRUCTURE ['
             + @StructureCode
             + '] (' AS [SqlLine]
    FROM   [MoBatch].[BI_DM_Structure]
    WHERE  [Structurecode] = @StructureCode
                             
    ----------------------
    -- Then the TO columns
    ----------------------
    -- If columns set up against structure then create default using these
    INSERT INTO #default_training
    SELECT   [Sequence],
             '['
               + [Column]
               + (CASE 
                    WHEN [Sequence] = @LastSequence
                    THEN '] '
                    ELSE '], '
                  END) AS [SqlLine]
    FROM     [MoBatch].[BI_DM_Structure_Cols]
    WHERE    [Structurecode] = @StructureCode
    ORDER BY [Sequence]
             
    -- And if no columns against the structure then just indicate to the
    -- user where the fields should go
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO #default_training
        SELECT 1 AS [Sequence],
               '[Replace this with fields...]' AS [SqlLine]
      END
      
    --------------------------------------------------------------------------
    -- Then close TO columns, and provide beginning of query FROM datasource
    --------------------------------------------------------------------------
    INSERT INTO #default_training
    SELECT 1000 AS [Sequence],
           ') OpenQuery(DS_'
             + Db_name()
             + ', ''SELECT ' AS [SqlLine]
           
    ------------------------
    -- Then the FROM columns
    ------------------------
    -- If columns set up against structure then create default using these
    INSERT INTO #default_training
    SELECT   [Sequence]
               + 1000 AS [Sequence],
             '['
               + [Column]
               + (CASE 
                    WHEN [Sequence] = @LastSequence
                    THEN '] '
                    ELSE '], '
                  END) AS [SqlLine]
    FROM     [MoBatch].[BI_DM_Structure_Cols]
    WHERE    [Structurecode] = @StructureCode
    ORDER BY [Sequence]
             
    -- And if no columns against the structure then just indicate to the
    -- user where the fields should go
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO #default_training
        SELECT 1001 AS [Sequence],
               '[Replace this with fields...]' AS [SqlLine]
      END
      
    ---------------------------------------------
    -- Finally end the Dmx (including FROM table)
    ---------------------------------------------
    INSERT INTO #default_training
    SELECT 2001 AS [Sequence],
           'FROM ['
             + bt.[Table]
             + ']'')' AS [SqlLine]
    FROM   [MoBatch].bi_tables bt
           INNER JOIN [MoBatch].[BI_DM_Structure] AS dms
             ON dms.[BatchType] = bt.[BatchType]
                AND dms.[BatchLevel] = bt.[BatchLevel]
    WHERE  dms.[Structurecode] = @StructureCode
                                 
    -------------------------------
    -- Now select the final product
    -------------------------------
    SELECT [SqlLine]
    FROM     #default_training
    ORDER BY [Sequence]
             
    DROP TABLE #default_training
    
    COMMIT
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_Query_Upsert]
          @QueryCode         VARCHAR(20),
          @Description       VARCHAR(125),
          @ModelCode         VARCHAR(20),
          @QueryDMX          NVARCHAR(MAX),
          @FeedToSPName      VARCHAR(1024),
          @IconText          VARCHAR(50),
          @IconFilename      VARCHAR(1024),
          @AmendedCellColour VARCHAR(10)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    
    BEGIN TRAN
    
    UPDATE [MoBatch].[BI_DM_Query]
    SET    [QueryCode] = @QueryCode,
           [Description] = @Description,
           [ModelCode] = @ModelCode,
           [QueryDMX] = @QueryDMX,
           [FeedToSPName] = @FeedToSPName,
           [IconText] = @IconText,
           [IconFilename] = @IconFilename,
           [AmendedCellColour] = @AmendedCellColour
    WHERE  [QueryCode] = @QueryCode
                         
    IF @@ROWCOUNT = 0
      BEGIN
        DECLARE  @BatchType  VARCHAR(50),
                 @BatchLevel CHAR(1)
        -- Get Batchtype and Batchlevel
        SELECT @BatchType = batchtype,
               @BatchLevel = batchlevel
        FROM   [MoBatch].[BI_dm_structure] dms,
               [MoBatch].bi_dm_model dmm
        WHERE  dms.structurecode = dmm.structurecode
               AND dmm.modelcode = @ModelCode
        INSERT INTO [MoBatch].[BI_DM_Query]
                   ([QueryCode],
                    [BatchLevel],
                    [BatchType],
                    [Description],
                    [FeedToSPName],
                    [ModelCode],
                    [QueryDMX],
                    [IconText],
                    [IconFilename],
                    [AmendedCellColour])
        SELECT @QueryCode,
               @BatchLevel,
               @BatchType,
               @Description,
               @FeedToSPName,
               @ModelCode,
               @QueryDMX,
               @IconText,
               @IconFilename,
               @AmendedCellColour
      END
      
    COMMIT TRAN
  END</commandtext>
      <comment>Correct bugs in DM</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Validate_SP](
               @SP VARCHAR(100))
AS
  BEGIN
    DECLARE  @Count INT
                    
    SELECT @Count = Count(* )
    FROM   sys.procedures
    WHERE  name = @SP
                       
    IF @Count = 0
      BEGIN
        SELECT parameter = 'INVALID SP'
      END
    ELSE
      BEGIN
        SELECT   parameter = parametername
                               + ' ('
                               + Rtrim(typename
                                         + ' '
                                         + Cast(parametersize AS VARCHAR))
                               + ')'
        FROM     [MoBatch].bi_sp_parameterinfo
        WHERE    spname = @SP
        ORDER BY parameterid
      END
  END</commandtext>
      <comment>Corrected bugs re MoBatch Schema</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineAfterDeleteSP')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesAfterDeleteSP' ,
    N'LineAfterDeleteSP' ,
    'COLUMN'</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineAfterLoadSP')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesAfterLoadSP' ,
    N'LineAfterLoadSP' ,
    'COLUMN'</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineAfterSaveSP')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesAfterSaveSP' ,
    N'LineAfterSaveSP' ,
    'COLUMN'</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineCalculationSP')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesCalculationSP' ,
    N'LineCalculationSP' ,
    'COLUMN'</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineCalculationStatus')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesCalculationStatus' ,
    N'LineCalculationStatus' ,
    'COLUMN'</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineValidationSP')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesValidationSP' ,
    N'LineValidationSP' ,
    'COLUMN'</commandtext>
      <commandtext>IF NOT EXISTS (SELECT *
               FROM   sys.columns
               WHERE  OBJECT_NAME(object_id) = 'BI_BatchTypes'
                      AND name = 'LineValidationStatus')
  EXECUTE sp_rename
    N'MoBatch.BI_BatchTypes.LinesValidationStatus' ,
    N'LineValidationStatus' ,
    'COLUMN'</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [ApproveSP],
             [ApproveStatus],
             [ProcessSP],
             [ProcessStatus],
             [HeadRowSetupSP],
             [LineRowSetupSP],
             [DistrRowSetupSP],
             [HeadRowSelectSP],
             [LineRowSelectSP],
             [DistrRowSelectSP],
             [HeadValidationSP],
             [LineValidationSP],
             [DistrValidationSP],
             [AfterCloseLinesSP],
             [AfterCloseDistrSP],
             [HeadValue1Descr],
             [HeadValue2Descr],
             [HeadValue3Descr],
             [HeadValue4Descr],
             [LineValue1Descr],
             [LineValue2Descr],
             [LineValue3Descr],
             [LineValue4Descr],
             [DistrValue1Descr],
             [DistrValue2Descr],
             [DistrValue3Descr],
             [DistrValue4Descr],
             [HeadValidationStatus],
             [LineValidationStatus],
             [DistrValidationStatus],
             [HeadCalculationSP],
             [HeadCalculationStatus],
             [LineCalculationSP],
             [LineCalculationStatus],
             [DistrCalculationSP],
             [DistrCalculationStatus],
             [HeadAfterLoadSP],
             [LineAfterLoadSP],
             [DistrAfterLoadSP],
             [HeadAfterSaveSP],
             [LineAfterSaveSP],
             [DistrAfterSaveSP],
             [HeadAfterDeleteSP],
             [LineAfterDeleteSP],
             [DistrAfterDeleteSP]
    FROM     [MoBatch].bi_batchtypes
    WHERE    batchtype = @BatchType
    ORDER BY SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Update](
               @BatchType              VARCHAR(255),
               @ApproveSP              VARCHAR(255),
               @ApproveStatus          VARCHAR(50),
               @ProcessSP              VARCHAR(255),
               @ProcessStatus          VARCHAR(50),
               @HeadRowSetupSP         VARCHAR(255),
               @LineRowSetupSP         VARCHAR(255),
               @DistrRowSetupSP        VARCHAR(255),
               @HeadRowSelectSP        VARCHAR(255),
               @LineRowSelectSP        VARCHAR(255),
               @DistrRowSelectSP       VARCHAR(255),
               @HeadValidationSP       VARCHAR(255),
               @LineValidationSP       VARCHAR(255),
               @DistrValidationSP      VARCHAR(255),
               @AfterCloseLinesSP      VARCHAR(255),
               @AfterCloseDistrSP      VARCHAR(255),
               @HeadValue1Descr        VARCHAR(50),
               @HeadValue2Descr        VARCHAR(50),
               @HeadValue3Descr        VARCHAR(50),
               @HeadValue4Descr        VARCHAR(50),
               @LineValue1Descr        VARCHAR(50),
               @LineValue2Descr        VARCHAR(50),
               @LineValue3Descr        VARCHAR(50),
               @LineValue4Descr        VARCHAR(50),
               @DistrValue1Descr       VARCHAR(50),
               @DistrValue2Descr       VARCHAR(50),
               @DistrValue3Descr       VARCHAR(50),
               @DistrValue4Descr       VARCHAR(50),
               @HeadValidationStatus   VARCHAR(50),
               @LineValidationStatus   VARCHAR(50),
               @DistrValidationStatus  VARCHAR(50),
               @HeadCalculationSP      VARCHAR(255),
               @HeadCalculationStatus  VARCHAR(50),
               @LineCalculationSP      VARCHAR(255),
               @LineCalculationStatus  VARCHAR(50),
               @DistrCalculationSP     VARCHAR(255),
               @DistrCalculationStatus VARCHAR(50),
               @HeadAfterLoadSP        VARCHAR(255),
               @LineAfterLoadSP        VARCHAR(255),
               @DistrAfterLoadSP       VARCHAR(255),
               @HeadAfterSaveSP        VARCHAR(255),
               @LineAfterSaveSP        VARCHAR(255),
               @DistrAfterSaveSP       VARCHAR(255),
               @HeadAfterDeleteSP      VARCHAR(255),
               @LineAfterDeleteSP      VARCHAR(255),
               @DistrAfterDeleteSP     VARCHAR(255))
AS
  BEGIN
    SET nocount  OFF;
    
    UPDATE [MoBatch].bi_batchtypes
    SET    approvesp = @ApproveSP,
           approvestatus = @ApproveStatus,
           processsp = @ProcessSP,
           processstatus = @ProcessStatus,
           headrowsetupsp = @HeadRowSetupSP,
           linerowsetupsp = @LineRowSetupSP,
           distrrowsetupsp = @DistrRowSetupSP,
           headrowselectsp = @HeadRowSelectSP,
           linerowselectsp = @LineRowSelectSP,
           distrrowselectsp = @DistrRowSelectSP,
           headvalidationsp = @HeadValidationSP,
           linevalidationsp = @LineValidationSP,
           distrvalidationsp = @DistrValidationSP,
           aftercloselinessp = @AfterCloseLinesSP,
           afterclosedistrsp = @AfterCloseDistrSP,
           headvalue1descr = @HeadValue1Descr,
           headvalue2descr = @HeadValue2Descr,
           headvalue3descr = @HeadValue3Descr,
           headvalue4descr = @HeadValue4Descr,
           linevalue1descr = @LineValue1Descr,
           linevalue2descr = @LineValue2Descr,
           linevalue3descr = @LineValue3Descr,
           linevalue4descr = @LineValue4Descr,
           distrvalue1descr = @DistrValue1Descr,
           distrvalue2descr = @DistrValue2Descr,
           distrvalue3descr = @DistrValue3Descr,
           distrvalue4descr = @DistrValue4Descr,
           headvalidationstatus = @HeadValidationStatus,
           linevalidationstatus = @LineValidationStatus,
           distrvalidationstatus = @DistrValidationStatus,
           headcalculationsp = @HeadCalculationSP,
           headcalculationstatus = @HeadCalculationStatus,
           linecalculationsp = @LineCalculationSP,
           linecalculationstatus = @LineCalculationStatus,
           distrcalculationsp = @DistrCalculationSP,
           distrcalculationstatus = @DistrCalculationStatus,
           headafterloadsp = @HeadAfterLoadSP,
           lineafterloadsp = @LineAfterLoadSP,
           distrafterloadsp = @DistrAfterLoadSP,
           headaftersavesp = @HeadAfterSaveSP,
           lineaftersavesp = @LineAfterSaveSP,
           distraftersavesp = @DistrAfterSaveSP,
           headafterdeletesp = @HeadAfterDeleteSP,
           lineafterdeletesp = @LineAfterDeleteSP,
           distrafterdeletesp = @DistrAfterDeleteSP
                                
    WHERE  batchtype = @BatchType
                       
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name) &gt; 0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_StoredProcedures_List]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineValidationSP' [CallEvent],
                    NULL [Column],
                    linevalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineCalculationSP' [CallEvent],
                    NULL [Column],
                    linecalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterLoadSP' [CallEvent],
                    NULL [Column],
                    lineafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterSaveSP' [CallEvent],
                    NULL [Column],
                    lineaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    lineafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
	ORDER BY [SP_Name]
  END</commandtext>
      <comment>Rename cols to consistent convention</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_columns bic
        WHERE  bic.batchtype = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
    SELECT @BatchType batchtype,
           @BatchLevel batchlevel,
           @Table [Table],
           name [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN name
              ELSE NULL
            END) [Rename To],
           column_id [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           0 [Hide],
           0 [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           0 [Computed],
           NULL [Format],
           'NotSet' [Alignment]
    FROM   sys.columns sc
    WHERE  object_id = Object_id(@Table)
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_columns bic
                           WHERE  bic.batchtype = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.name)
    UNION 
    SELECT batchtype,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [Hide],
           (CASE 
              WHEN [Computed] = 1
              THEN 1
              ELSE [ReadOnly]
            END) AS [ReadOnly],
           [ReadOnly Existing],
           [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col],
           [Computed],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment]
    FROM   [MoBatch].bi_columns bic
    WHERE  batchtype = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Table] = @Table
           AND EXISTS (SELECT 'x'
                       FROM   sys.columns sc
                       WHERE  object_id = Object_id(bic.[Table])
                              AND name = bic.[Column])
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Amendments for new MoBatch Grid</comment>
    </command>
  </Version>
  <Version number="1.0.16.0" />
  <Version number="1.0.17.0" />
  <Version number="1.0.18.0">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_columns bic
        WHERE  bic.batchtype = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
    SELECT @BatchType batchtype,
           @BatchLevel batchlevel,
           @Table [Table],
           name [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN name
              ELSE NULL
            END) [Rename To],
           column_id [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           0 [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           NULL [Format],
           'NotSet' [Alignment]
    FROM   sys.columns sc
    WHERE  object_id = OBJECT_ID(@Table)
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_columns bic
                           WHERE  bic.batchtype = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.name)
    UNION 
    SELECT batchtype,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              WHEN sc.[is_Computed] = 1
              THEN 1
              ELSE [ReadOnly]
            END) AS [ReadOnly],
           [ReadOnly Existing],
           [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment]
    FROM   [MoBatch].bi_columns bic
           INNER JOIN sys.columns sc
             ON sc.[object_id] = OBJECT_ID(bic.[Table])
                AND sc.name = bic.[Column]
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Handle identity columns like computed columns</comment>
    </command>
    <command>
      <commandtext>CREATE TABLE [MoBatch].[BI_Layout](
	[Key] [nvarchar](50) NOT NULL,
	[UserId] [nvarchar](50) NOT NULL,
	[RoleId] [nvarchar](50) NOT NULL,
	[BatchType] [nvarchar](50) NOT NULL,
	[BatchLevel] [nvarchar](1) NOT NULL,
	[Value] [nvarchar](max) NULL,
 CONSTRAINT [PK_BI_Layout_1] PRIMARY KEY CLUSTERED 
(
	[Key] ASC,
	[UserId] ASC,
	[RoleId] ASC,
	[BatchType] ASC,
	[BatchLevel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_Layout_Select]
           @Key        NVARCHAR(50),
           @UserId     NVARCHAR(255) = '',
           @RoleId     NVARCHAR(50) = '',
           @BatchType  NVARCHAR(50) = '',
           @BatchLevel NVARCHAR(1) = ''
AS
  BEGIN
    SELECT [Value]
    FROM   [MoBatch].[BI_Layout] WITH (NOLOCK)
    WHERE  [Key] = @Key
           AND (@UserId = '' 
                 OR [userId] = @UserId)
           AND (@RoleId = '' 
                 OR [RoleId] = @RoleId)
           AND (@BatchType = '' 
                 OR [BatchType] = @BatchType)
           AND (@BatchLevel = '' 
                 OR [BatchLevel] = @BatchLevel)
  END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_Layout_Upsert]
           @Key        NVARCHAR(50),
           @UserId     NVARCHAR(255) = '',
           @RoleId     NVARCHAR(50) = '',
           @BatchType  NVARCHAR(50) = '',
           @BatchLevel NVARCHAR(1) = '',
           @Value      NVARCHAR(MAX)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
        
    BEGIN TRAN
        
    UPDATE [MoBatch].[BI_Layout]
    SET    [Value] = @Value
    WHERE  [Key] = @Key
           AND (@UserId = ''
                 OR [userId] = @UserId)
           AND (@RoleId = ''
                 OR [RoleId] = @RoleId)
           AND (@BatchType = ''
                 OR [BatchType] = @BatchType)
           AND (@BatchLevel = ''
                 OR [BatchLevel] = @BatchLevel)
                                            
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Layout]
                   ([Key],
                    [UserId],
                    [RoleId],
                    [BatchType],
                    [BatchLevel],
                    [Value])
        SELECT @Key,
               @UserId,
               @RoleId,
               @BatchType,
               @BatchLevel,
               @Value
      END
      
    COMMIT TRAN
  END</commandtext>
      <comment>Cater for new MoBatch Grid Layout</comment>
    </command>
  </Version>
  <Version number="1.0.19.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_BatchTypes ADD
	HeadDefaultSP varchar(1024) NULL,
	LineDefaultSP varchar(1024) NULL,
	DistrDefaultSP varchar(1024) NULL</commandtext>
      <comment>Cater for SP to default values for row being added</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Columns ADD
	ToolTip_SP varchar(1024) NULL</commandtext>
      <comment>Cater for tooltip SP against columns</comment>
    </command>
    <command>
      <commandtext>CREATE PROCEDURE mobatch.a_sp_Lookup_Reports
AS
  BEGIN
    SELECT   a.reportname,
             a.reporturl,
             b.rptcategorydescr,
             b.batchtype,
             b.batchlevel
    FROM     mobatch.bi_reports a WITH (NOLOCK)
             INNER JOIN mobatch.bi_rptcategories b WITH (NOLOCK)
               ON a.rptcategoryid = b.rptcategoryid
    ORDER BY b.SEQUENCE,
             a.SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_StoredProcedures_List]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    ToolTip_SP [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineValidationSP' [CallEvent],
                    NULL [Column],
                    linevalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineCalculationSP' [CallEvent],
                    NULL [Column],
                    linecalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterLoadSP' [CallEvent],
                    NULL [Column],
                    lineafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterSaveSP' [CallEvent],
                    NULL [Column],
                    lineaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    lineafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadDefaultSP' [CallEvent],
                    NULL [Column],
                    HeadDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineDefaultSP' [CallEvent],
                    NULL [Column],
                    LineDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrDefaultSP' [CallEvent],
                    NULL [Column],
                    DistrDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
    UNION ALL
    SELECT DISTINCT NULL [BatchType],
                    NULL [BatchLevel],
                    'Report: '
                      + reportname [CallEvent],
                    NULL [Column],
                    REPLACE(reporturl,'GRID:','') [SP_Name]
    FROM   [MoBatch].bi_reports
    WHERE  reporturl LIKE 'GRID:%'
    ORDER BY [SP_Name]
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this Batch-It database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ToolTip_SP sp_name
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT REPLACE(reporturl, 'GRID:','') sp_name
    FROM   [MoBatch].bi_reports
    WHERE  reporturl like 'GRID:%'
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name) &gt; 0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Columns_Insert](
               @BatchType        VARCHAR(50),
               @BatchLevel       CHAR(1),
               @Table            VARCHAR(100),
               @Column           VARCHAR(100),
               @RenameTo         VARCHAR(100),
               @Sequence         INT,
               @Lookup_SP        VARCHAR(1024),
               @Select_SP        VARCHAR(1024),
               @Validation_SP    VARCHAR(1024),
               @ToolTip_SP       VARCHAR(1024),
               @Hide             BIT,
               @ReadOnly         BIT,
               @ReadOnlyExisting BIT,
               @FilterOn         BIT,
               @Required         BIT,
               @BatchID          BIT,
               @LineID           BIT,
               @DistrID          BIT,
               @StatusCol        BIT,
               @Format           VARCHAR(50),
               @Alignment        VARCHAR(50))
AS
  BEGIN
    SET nocount  OFF;
    
    DECLARE  @Computed BIT
                       
    SELECT @Computed = Isnull(is_computed,0)
    FROM   sys.columns c
    WHERE  c.object_id = Object_id(@Table)
           AND name = @Column
                      
    INSERT INTO [MoBatch].[BI_Columns]
               (batchtype,
                [BatchLevel],
                [Table],
                [Column],
                [Rename To],
                [Sequence],
                [LookUp_SP],
                [Select_SP],
                [Validation_SP],
                [ToolTip_SP],
                [Hide],
                [ReadOnly],
                [ReadOnly Existing],
                [Filter On],
                [Required],
                [Batch ID],
                [Line ID],
                [Distr ID],
                [Status Col],
                [Computed],
                [Format],
                [Alignment])
    VALUES     (@BatchType,
                @BatchLevel,
                @Table,
                @Column,
                @RenameTo,
                @Sequence,
                @LookUp_SP,
                @Select_SP,
                @Validation_SP,
                @ToolTip_SP,
                @Hide,
                @ReadOnly,
                @ReadOnlyExisting,
                @FilterOn,
                @Required,
                @BatchID,
                @LineID,
                @DistrID,
                @StatusCol,
                @Computed,
                @Format,
                @Alignment)
               
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_columns bic
        WHERE  bic.batchtype = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
    SELECT @BatchType batchtype,
           @BatchLevel batchlevel,
           @Table [Table],
           name [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN name
              ELSE NULL
            END) [Rename To],
           column_id [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           0 [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           NULL [Format],
           'NotSet' [Alignment]
    FROM   sys.columns sc
    WHERE  object_id = OBJECT_ID(@Table)
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_columns bic
                           WHERE  bic.batchtype = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.name)
    UNION 
    SELECT batchtype,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [ToolTip_SP],
           [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              WHEN sc.[is_Computed] = 1
              THEN 1
              ELSE [ReadOnly]
            END) AS [ReadOnly],
           [ReadOnly Existing],
           [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment]
    FROM   [MoBatch].bi_columns bic
           INNER JOIN sys.columns sc
             ON sc.[object_id] = OBJECT_ID(bic.[Table])
                AND sc.name = bic.[Column]
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [ApproveSP],
             [ApproveStatus],
             [ProcessSP],
             [ProcessStatus],
             [HeadRowSetupSP],
             [LineRowSetupSP],
             [DistrRowSetupSP],
             [HeadRowSelectSP],
             [LineRowSelectSP],
             [DistrRowSelectSP],
             [HeadValidationSP],
             [LineValidationSP],
             [DistrValidationSP],
             [AfterCloseLinesSP],
             [AfterCloseDistrSP],
             [HeadValue1Descr],
             [HeadValue2Descr],
             [HeadValue3Descr],
             [HeadValue4Descr],
             [LineValue1Descr],
             [LineValue2Descr],
             [LineValue3Descr],
             [LineValue4Descr],
             [DistrValue1Descr],
             [DistrValue2Descr],
             [DistrValue3Descr],
             [DistrValue4Descr],
             [HeadValidationStatus],
             [LineValidationStatus],
             [DistrValidationStatus],
             [HeadCalculationSP],
             [HeadCalculationStatus],
             [LineCalculationSP],
             [LineCalculationStatus],
             [DistrCalculationSP],
             [DistrCalculationStatus],
             [HeadAfterLoadSP],
             [LineAfterLoadSP],
             [DistrAfterLoadSP],
             [HeadAfterSaveSP],
             [LineAfterSaveSP],
             [DistrAfterSaveSP],
             [HeadAfterDeleteSP],
             [LineAfterDeleteSP],
             [DistrAfterDeleteSP],
             [HeadDefaultSP],
             [LineDefaultSP],
             [DistrDefaultSP]
    FROM     [MoBatch].BI_Batchtypes
    WHERE    batchtype = @BatchType
    ORDER BY SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Update](
               @BatchType              VARCHAR(255),
               @ApproveSP              VARCHAR(255),
               @ApproveStatus          VARCHAR(50),
               @ProcessSP              VARCHAR(255),
               @ProcessStatus          VARCHAR(50),
               @HeadRowSetupSP         VARCHAR(1024),
               @LineRowSetupSP         VARCHAR(1024),
               @DistrRowSetupSP        VARCHAR(1024),
               @HeadRowSelectSP        VARCHAR(1024),
               @LineRowSelectSP        VARCHAR(1024),
               @DistrRowSelectSP       VARCHAR(1024),
               @HeadValidationSP       VARCHAR(1024),
               @LineValidationSP       VARCHAR(1024),
               @DistrValidationSP      VARCHAR(1024),
               @AfterCloseLinesSP      VARCHAR(1024),
               @AfterCloseDistrSP      VARCHAR(1024),
               @HeadValue1Descr        VARCHAR(50),
               @HeadValue2Descr        VARCHAR(50),
               @HeadValue3Descr        VARCHAR(50),
               @HeadValue4Descr        VARCHAR(50),
               @LineValue1Descr        VARCHAR(50),
               @LineValue2Descr        VARCHAR(50),
               @LineValue3Descr        VARCHAR(50),
               @LineValue4Descr        VARCHAR(50),
               @DistrValue1Descr       VARCHAR(50),
               @DistrValue2Descr       VARCHAR(50),
               @DistrValue3Descr       VARCHAR(50),
               @DistrValue4Descr       VARCHAR(50),
               @HeadValidationStatus   VARCHAR(50),
               @LineValidationStatus   VARCHAR(50),
               @DistrValidationStatus  VARCHAR(50),
               @HeadCalculationSP      VARCHAR(1024),
               @HeadCalculationStatus  VARCHAR(50),
               @LineCalculationSP      VARCHAR(1024),
               @LineCalculationStatus  VARCHAR(50),
               @DistrCalculationSP     VARCHAR(1024),
               @DistrCalculationStatus VARCHAR(50),
               @HeadAfterLoadSP        VARCHAR(1024),
               @LineAfterLoadSP        VARCHAR(1024),
               @DistrAfterLoadSP       VARCHAR(1024),
               @HeadAfterSaveSP        VARCHAR(1024),
               @LineAfterSaveSP        VARCHAR(1024),
               @DistrAfterSaveSP       VARCHAR(1024),
               @HeadAfterDeleteSP      VARCHAR(1024),
               @LineAfterDeleteSP      VARCHAR(1024),
               @DistrAfterDeleteSP     VARCHAR(1024),
               @HeadDefaultSP          VARCHAR(1024),
               @LineDefaultSP          VARCHAR(1024),
               @DistrDefaultSP         VARCHAR(1024))
AS
  BEGIN
    SET nocount  OFF;
    
    UPDATE [MoBatch].bi_batchtypes
    SET    approvesp = @ApproveSP,
           approvestatus = @ApproveStatus,
           processsp = @ProcessSP,
           processstatus = @ProcessStatus,
           headrowsetupsp = @HeadRowSetupSP,
           linerowsetupsp = @LineRowSetupSP,
           distrrowsetupsp = @DistrRowSetupSP,
           headrowselectsp = @HeadRowSelectSP,
           linerowselectsp = @LineRowSelectSP,
           distrrowselectsp = @DistrRowSelectSP,
           headvalidationsp = @HeadValidationSP,
           linevalidationsp = @LineValidationSP,
           distrvalidationsp = @DistrValidationSP,
           aftercloselinessp = @AfterCloseLinesSP,
           afterclosedistrsp = @AfterCloseDistrSP,
           headvalue1descr = @HeadValue1Descr,
           headvalue2descr = @HeadValue2Descr,
           headvalue3descr = @HeadValue3Descr,
           headvalue4descr = @HeadValue4Descr,
           linevalue1descr = @LineValue1Descr,
           linevalue2descr = @LineValue2Descr,
           linevalue3descr = @LineValue3Descr,
           linevalue4descr = @LineValue4Descr,
           distrvalue1descr = @DistrValue1Descr,
           distrvalue2descr = @DistrValue2Descr,
           distrvalue3descr = @DistrValue3Descr,
           distrvalue4descr = @DistrValue4Descr,
           headvalidationstatus = @HeadValidationStatus,
           linevalidationstatus = @LineValidationStatus,
           distrvalidationstatus = @DistrValidationStatus,
           headcalculationsp = @HeadCalculationSP,
           headcalculationstatus = @HeadCalculationStatus,
           linecalculationsp = @LineCalculationSP,
           linecalculationstatus = @LineCalculationStatus,
           distrcalculationsp = @DistrCalculationSP,
           distrcalculationstatus = @DistrCalculationStatus,
           headafterloadsp = @HeadAfterLoadSP,
           lineafterloadsp = @LineAfterLoadSP,
           distrafterloadsp = @DistrAfterLoadSP,
           headaftersavesp = @HeadAfterSaveSP,
           lineaftersavesp = @LineAfterSaveSP,
           distraftersavesp = @DistrAfterSaveSP,
           headafterdeletesp = @HeadAfterDeleteSP,
           lineafterdeletesp = @LineAfterDeleteSP,
           distrafterdeletesp = @DistrAfterDeleteSP,
           headdefaultsp = @HeadDefaultSP,
           linedefaultsp = @LineDefaultSP,
           distrdefaultsp = @DistrDefaultSP
                                
    WHERE  batchtype = @BatchType
                       
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <comment>MoBatch Grid amendments</comment>
    </command>
  </Version>
  <Version number="1.0.21.0">
    <command>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[BI_GenericSearch]')
                  AND TYPE IN (N'U'))
  DROP TABLE [MoBatch].[BI_GenericSearch]</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[BI_GenericSearch_SavedSearches]')
                  AND TYPE IN (N'U'))
  DROP TABLE [MoBatch].[BI_GenericSearch_SavedSearches]</commandtext>
      <commandtext>CREATE TABLE [MoBatch].[BI_GenericSearch] (
  [RowID]        [INT]   IDENTITY ( 1 , 1 )   NOT NULL,
  [RowGuid]      [UNIQUEIDENTIFIER]   NOT NULL,
  [BatchLevel]   [VARCHAR](1028)   NULL,
  [BatchType]    [VARCHAR](1028)   NULL,
  [BatchColumn]  [VARCHAR](1028)   NULL,
  [Expression]   [NVARCHAR](1028)   NULL,
  [Operator]     [NVARCHAR](50)   NULL,
  [Value]        [NVARCHAR](MAX)   NULL,
  [TargetColumn] [VARCHAR](1024)   NULL)
ON [PRIMARY]</commandtext>
      <commandtext>CREATE TABLE [MoBatch].[BI_GenericSearch_SavedSearches] (
  [RowID]       [INT]   IDENTITY ( 1 , 1 )   NOT NULL,
  [RowGuid]     [UNIQUEIDENTIFIER]   NOT NULL,
  [User]        [NVARCHAR](1028)   NULL,
  [LastRan]     [DATETIME]   NULL,
  [SearchLabel] [NVARCHAR](1028)   NULL,
  [MatchType]   [NVARCHAR](50)   NULL,
  [Role]        [NVARCHAR](1024)   NULL)
ON [PRIMARY]</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_GenericSearch]')
                  AND TYPE IN (N'P',N'PC'))
  DROP PROCEDURE [MoBatch].[a_sp_BI_GenericSearch]</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_GenericSearch_BuildSQL]')
                  AND TYPE IN (N'P',N'PC'))
  DROP PROCEDURE [MoBatch].[a_sp_BI_GenericSearch_BuildSQL]</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_GenericSearch_SavedSearches_Insert]')
                  AND TYPE IN (N'P',N'PC'))
  DROP PROCEDURE [MoBatch].[a_sp_BI_GenericSearch_SavedSearches_Insert]</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_GenericSearch_SearchCriteria_Insert]')
                  AND TYPE IN (N'P',N'PC'))
  DROP PROCEDURE [MoBatch].[a_sp_BI_GenericSearch_SearchCriteria_Insert]</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_GS_LookupSearchPresets]')
                  AND TYPE IN (N'P',N'PC'))
  DROP PROCEDURE [MoBatch].[a_sp_BI_GS_LookupSearchPresets]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_GenericSearch](
                @RowGuid   UNIQUEIDENTIFIER,
                @MatchType VARCHAR(50))
AS
  BEGIN
         
    --DROP TABLE #T1
    --
    SELECT batchtype,
           batchlevel
    INTO     #t1
    FROM     mobatch.bi_genericsearch WITH (NOLOCK)
    WHERE    rowguid = @RowGuid
    GROUP BY batchtype,
             batchlevel
    ORDER BY batchtype,
             batchlevel
    --
    SELECT gs_resultid = CONVERT(INT,0),
           [Batch Type] = CONVERT(VARCHAR(MAX),''),
           [Batch Level] = CONVERT(VARCHAR(MAX),''),
           [Row Count] = CONVERT(INT,0)
    INTO   ##searchheader
    WHERE  1 = 0
    --
    DECLARE  @BatchType  VARCHAR(50),
             @BatchLevel VARCHAR(50),
             @SQL        VARCHAR(MAX),
             @Rows       INT,
             @SearchCnt  INT,
             @SQLret     VARCHAR(MAX),
             @Count      INT
    SELECT @SearchCnt = 0
                                      
    DECLARE  @Table  TABLE(
                           id         INT   IDENTITY ( 1 , 1 ),
                           batchtype  VARCHAR(50),
                           batchlevel VARCHAR(50)
                           )
    INSERT INTO @TABLE
               (batchtype,
                batchlevel)
    SELECT batchtype,
           batchlevel
    FROM   #t1
                  
    DECLARE  @ID    INT,
             @MAXID INT
    SELECT @ID = 1,
           @MaxID = Max(id)
    FROM   @TABLE
                  
    WHILE @ID &lt;= @MaxID
      BEGIN
        SELECT @BatchType = batchtype,
               @BatchLevel = batchlevel
        FROM   @TABLE
        WHERE  id = @ID
        --
        --SELECT * FROM @Table
        --
        --SELECT @SearchCnt, @BatchType, @BatchLevel, @Rows
        --
        PRINT @BatchType
          + ': '
          + @BatchLevel
        EXEC [Mobatch].[a_sp_BI_GenericSearch_buildSQL]
          @RowGuid ,
          @BatchType ,
          @BatchLevel ,
          @SearchCnt ,
          @MatchType ,
          @SQL OUTPUT
                               
        PRINT @SQL
                      
        EXEC( @SQL)
        --SELECT @Rows = @@ROWCOUNT
        SELECT @Count = [Row count]
        FROM     ##searchheader
        ORDER BY [GS_ResultID] DESC
                               
        --IF @Count &gt; 0 BEGIN
        --SELECT * FROM Mobatch.BI_GenericSearch_ResultHeader
        --WHERE [row Count] &gt; 0
        --
        --SELECT * FROM #SearchHeader
        --WHERE 1 = 0
        --
        SELECT *
        FROM   ##searchlines
        --END
        --ELSE BEGIN
        --     SELECT * FROM ##SearchHeader 
        --     WHERE 1 = 0                
        --END
                      
        --
        SELECT @SearchCnt = @SearchCnt
                              + 1,
               @SQL = NULL,
               @BatchType = NULL,
               @BatchLevel = NULL
                             
        DROP TABLE ##searchlines
        --DROP TABLE ##SearchHeader
        SELECT @ID = @ID
                       + 1
      --
      END
             
    SELECT *
    FROM   ##searchheader
    DROP TABLE ##searchheader
  --WHERE [row Count] &gt; 0
         
                
  --TRUNCATE TABLE Mobatch.BI_GenericSearch_ResultHeader
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_GenericSearch_BuildSQL](
                @Guid      UNIQUEIDENTIFIER,
                @Type      VARCHAR(50),
                @Level     VARCHAR(50),
                @SearchId  INT,
                @MatchType VARCHAR(50)  = NULL,
                @SQL       VARCHAR(MAX)  OUTPUT)
AS
  BEGIN
  
    DECLARE  @Expression     VARCHAR(50),
             @Operator       VARCHAR(50),
             @Value          VARCHAR(50),
             @Id             INT,
             @MaxID          INT,
             @TableName      VARCHAR(50),
             @BatchQualifier VARCHAR(50),
             @RowCount       INT
    --, @SQL varchar(max)
    SELECT @SQL = ''
                         
    DECLARE  @Table  TABLE(
                           rowid          INT   IDENTITY ( 1 , 1 ),
                           batchlevel     VARCHAR(1028),
                           batchtype      VARCHAR(1024),
                           [Table]        VARCHAR(1028),
                           expression     NVARCHAR(1028),
                           operator       NVARCHAR(50),
                           VALUE          NVARCHAR(MAX),
                           header         VARCHAR(1024),
                           lines          VARCHAR(1024),
                           distr          VARCHAR(1024),
                           batchqualifier VARCHAR(1024)
                           )
    INSERT INTO @Table
    SELECT DISTINCT @Level,
                    @Type,
                    c.[Table],
                    gs.expression,
                    gs.operator,
                    gs.VALUE,
                    (SELECT c.[Column]
                     FROM   mobatch.bi_columns c WITH (NOLOCK)
                     WHERE  batchtype = @Type
                            AND batchlevel = 'H'
                            AND c.[batch ID] = 1),
                    (SELECT c.[Column]
                     FROM   mobatch.bi_columns c WITH (NOLOCK)
                     WHERE  batchtype = @Type
                            AND batchlevel = 'L'
                            AND c.[Line ID] = 1),
                    (SELECT c.[Column]
                     FROM   mobatch.bi_columns c WITH (NOLOCK)
                     WHERE  batchtype = @Type
                            AND batchlevel = 'D'
                            AND c.[Distr ID] = 1),
                    b.qualifier
    FROM   mobatch.bi_genericsearch gs WITH (NOLOCK)
           INNER JOIN mobatch.bi_columns c WITH (NOLOCK)
             ON c.batchtype = gs.batchtype
                AND c.batchlevel = CASE gs.batchlevel 
                                     WHEN 'Header'
                                     THEN 'H'
                                     WHEN 'Lines'
                                     THEN 'L'
                                     WHEN 'Distribution'
                                     THEN 'D'
                                     ELSE gs.batchlevel
                                   END
           INNER JOIN mobatch.bi_tables b WITH (NOLOCK)
             ON b.batchtype = c.batchtype
                AND b.batchlevel = c.batchlevel
    WHERE  rowguid = @Guid
           AND gs.batchlevel = @Level
           AND gs.batchtype = @Type
                                     
    SELECT @MaxID = MAX(rowid),
           @ID = 1
    FROM   @Table
                         
           
    SELECT @Expression = expression,
           @Operator = operator,
           @Value = VALUE,
           @TableName = [Table],
           @BatchQualifier = batchqualifier
    FROM   @Table
    --WHERE RowID = @ID
    SELECT @SQL = @SQL
                    + '
                             INSERT INTO ##SearchHeader
                             SELECT 
                                      GS_ResultID = '
                    + Convert(VARCHAR,@SearchId)
                    + '
                                    , [Batch Type]= '''
                    + @Type
                    + '''
                                    , [Batch Level] = '''
                    + CASE @Level 
                        WHEN 'H'
                        THEN 'Header'
                        WHEN 'L'
                        THEN 'Lines'
                        WHEN 'D'
                        THEN 'Distribution'
                        ELSE ''
                      END
                    + '''
                                    , [Row Count] = count(*)
                             FROM '
                    + @TableName
                    + ' A WITH (NOLOCK)  
                             '
                      
    --SELECT @SQL = @SQL + '
    --INSERT INTO Mobatch.BI_GenericSearch_ResultHeader           
    --SELECT 
    --       GS_ResultID = ' + Convert(varchar, @SearchId) + '
    --     , [Batch Type]= ''' +  @Type + '''
    --     , [Batch Level] = ''' + @Level + '''
    --     , [Row Count] = count(*)
    --FROM ' + @TableName + ' A WITH (NOLOCK)       
    --'
    SELECT @Expression = NULL,
           @Operator = NULL,
           @Value = NULL,
           @ID = 1,
           @MaxId = 0
                           
    SELECT @MaxID = MAX(rowid),
           @ID = 1
    FROM   @Table
                  
    SELECT @SQL = @SQL
                    + ' WHERE '
                             
    WHILE @ID &lt;= @MaxID
      BEGIN
             
        --     IF  @ID &gt; @MaxID BEGIN
        --            SELECT @SQL = SUBSTRING(@SQL, 0 , LEN(@SQL) - LEN(@MatchType))
        --            SELECT @SQL = @SQL + CASE  
        --                                WHEN LEN(ISNULL(@BatchQualifier, ' ')) &gt; 2 THEN ' AND ' + @BatchQualifier + ''
        --                                ELSE ''
        --                         END + '
        --'
        --            EXEC (@SQL)
        --            SELECT @RowCount = [Row Count]
        --            FROM Mobatch.BI_GenericSearch_ResultHeader
        --            IF @RowCount = 0 BEGIN
        --                   TRUNCATE TABLE Mobatch.BI_GenericSearch_ResultHeader
        --                   SET @SearchId = 0
        --                   CONTINUE
        --            END
        --     END
        SELECT @Expression = expression,
               @Operator = operator,
               @Value = VALUE
        FROM   @Table
        WHERE  rowid = @ID
                                     
        SELECT @SQL = @SQL
                        + @Expression
                        + ' '
                        + @Operator
                        + ' '
                        + CASE 
                            WHEN @Operator = 'LIKE'
                            THEN '''%'
                                   + @Value
                                   + '%'' 
                                                                '
                            ELSE ''''
                                   + @value
                                   + ''' 
                                                                '
                          END
                        + CASE 
                            WHEN @MatchType = ' AND '
                                  OR @MatchType = ' OR '
                            THEN @MatchType
                            ELSE ''
                          END
        SET @ID = @ID
                    + 1
      END
      
    SELECT @SQL = SUBSTRING(@SQL,0,LEN(@SQL)
                                     - LEN(@MatchType))
    SELECT @SQL = @SQL
                    + CASE 
                        WHEN LEN(ISNULL(@BatchQualifier,' ')) &gt; 2
                        THEN ' AND '
                               + @BatchQualifier
                               + ''
                        ELSE ''
                      END
                    + '
                             '
    SELECT @Expression = NULL,
           @Operator = NULL,
           @Value = NULL,
           @ID = 1
                        
    SELECT @SQL = @SQL
                    + '            
                             SELECT 
                                      GS_ResultID = '
                    + Convert(VARCHAR,@SearchId)
                    + '
                                    , A.*
                             INTO ##SearchLines
                             FROM '
                    + @TableName
                    + ' A WITH (NOLOCK)  
                             '
                             
    SELECT @MaxID = MAX(rowid),
           @ID = 1
    FROM   @Table
                  
    SELECT @SQL = @SQL
                    + ' WHERE '
                             
    WHILE @ID &lt;= @MaxID
      BEGIN
             
        SELECT @Expression = expression,
               @Operator = operator,
               @Value = VALUE
        FROM   @Table
        WHERE  rowid = @ID
                                     
        SELECT @SQL = @SQL
                        + @Expression
                        + ' '
                        + @Operator
                        + ' '
                        + CASE 
                            WHEN @Operator = 'LIKE'
                            THEN '''%'
                                   + @Value
                                   + '%''
                                                                '
                            ELSE ''''
                                   + @value
                                   + '''
                                                                '
                          END
                        + CASE 
                            WHEN @MatchType = ' AND '
                                  OR @MatchType = ' OR '
                            THEN @MatchType
                            ELSE ''
                          END
        SET @ID = @ID
                    + 1
      END
      
    SELECT @SQL = SUBSTRING(@SQL,0,LEN(@SQL)
                                     - LEN(' AND '))
    SELECT @SQL = @SQL
                    + CASE 
                        WHEN LEN(ISNULL(@BatchQualifier,' ')) &gt; 2
                        THEN ' AND '
                               + @BatchQualifier
                               + ''
                        ELSE ''
                      END
                    + '
                             '
                             
  --     PRINT @SQL
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_GenericSearch_SavedSearches_Insert]
                @RowGuid     UNIQUEIDENTIFIER,
                @User        NVARCHAR(1024),
                @SearchLabel NVARCHAR(1024),
                @MatchType   NVARCHAR(50)
AS
  BEGIN
    INSERT INTO mobatch.bi_genericsearch_savedsearches
               (rowguid,
                [User],
                searchlabel,
                matchtype)
    VALUES     (@RowGuid,
                @User,
                @SearchLabel,
                @MatchType)
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_GenericSearch_SearchCriteria_Insert]
                @RowGuid       UNIQUEIDENTIFIER,
                @BatchLevel    VARCHAR(1024),
                @BatchType     VARCHAR(1024),
                @Expression    NVARCHAR(1024),
                @MatchOperator NVARCHAR(50),
                @Value         NVARCHAR(MAX)
AS
  BEGIN
    INSERT INTO [MoBatch].[BI_GenericSearch]
               (rowguid,
                batchlevel,
                batchtype,
                batchcolumn,
                expression,
                operator,
                VALUE)
    VALUES     (@RowGuid,
                @BatchLevel,
                @BatchType,
                NULL,
                @Expression,
                @MatchOperator,
                @Value)
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_GS_LookupSearchPresets]
                @WindowsUser VARCHAR(MAX)
AS
  BEGIN
    DECLARE  @Role VARCHAR(MAX)
    SELECT @Role = r.roleid
    FROM   bi_roles r WITH (NOLOCK)
           INNER JOIN bi_users u
             ON r.roleid = u.roleid
                                         
    DECLARE  @Saved  TABLE(
                           rownumber   INT   IDENTITY ( 1 , 1 ),
                           searchlabel NVARCHAR(MAX),
                           matchtype   VARCHAR(MAX),
                           rowguid     UNIQUEIDENTIFIER,
                           [Role]      VARCHAR(MAX),
                           [User]      VARCHAR(MAX)
                           )
                    
    INSERT INTO @Saved
               (searchlabel,
                matchtype,
                rowguid,
                [Role],
                [User])
    SELECT searchlabel,
           matchtype,
           rowguid,
           [Role],
           [User]
    FROM   bi_genericsearch_savedsearches ss WITH (NOLOCK)
    WHERE  (ISNULL(ss.[Role],'%') = @Role
             OR ISNULL(ss.[User],'%') = @WindowsUser)
           AND ISNULL(ss.searchlabel,'') &lt;&gt; ''
                                                          
                                                          
    SELECT searchlabel,
           matchtype
    FROM   @Saved -- First result set
                  
    DECLARE  @RowNum   INT,
             @RowCount INT
    SELECT @RowNum = 1,
           @RowCount = COUNT(* )
    FROM   @Saved
                  
    DECLARE  @RowGuid UNIQUEIDENTIFIER
                             
    WHILE (@RowNum &lt;= @RowCount)
      BEGIN
        SELECT @RowGuid = rowguid
        FROM   @Saved
        WHERE  rownumber = @RowNum
                                  
        SELECT gs.batchtype,
               gs.batchlevel,
               ISNULL(gs.batchcolumn,gs.expression) AS [BatchColumn],
               COALESCE(gs.targetcolumn,gs.batchcolumn,gs.expression) AS [TargetColumn],
               REPLACE(gs.expression,ISNULL(gs.batchcolumn,gs.expression),
                       '$COLUMN$') AS [Expression],
               gs.operator,
               NULL AS [Value]
        FROM   mobatch.bi_genericsearch gs WITH (NOLOCK)
        WHERE  rowguid = @RowGuid
                                
        SELECT @RowNum = @RowNum
                           + 1
      END
  END</commandtext>
      <comment>Generic Search Objects</comment>
    </command>
  </Version>
  <Version number="1.1.0.0">
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_New_Access]
-- This stored procedure is used to re-create all access permutations
-- To run: EXEC a_sp_BI_Setup_New_Access
AS
  BEGIN
    SET nocount  ON;
    SET xact_abort  ON;
    BEGIN TRANSACTION;
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    -- Delete existing access
    DELETE [MoBatch].[BI_Access]
    ----------------------------------------------------------
    -- Insert Access not related to customizable batch screens
    ----------------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'menuBatchGrid',
           'New Batch Grid Menu Option'
    UNION ALL
    SELECT 'menuBatchEntry',
           'Batch Entry Menu Option'
    UNION ALL
    SELECT 'menuReports',
           'Configure Report Menus'
    UNION ALL
    SELECT 'menuConfiguration',
           'Configuration Menu Function'
    UNION ALL
    SELECT 'menuAccess',
           'Configure Access'
    UNION ALL
    SELECT 'menuBatchCategories',
           'Configure Batch Categories'
    UNION ALL
    SELECT 'menuBatchTypes',
           'Configure Batch Types'
    UNION ALL
    SELECT 'Batch Types Update',
           'Configure Batch Types - Update existing entries'
    UNION ALL
    SELECT 'menuBatchScreenSetup',
           'Configure Batch Screen Setup'
    UNION ALL
    SELECT 'Batch Screen Setup Update',
           'Configure Batch Screen Setup - Update existing entries'
    UNION ALL
    SELECT 'menuReportCategories',
           'Configure Report Categories'
    UNION ALL
    SELECT 'menuReportItems',
           'Configure Report Items'
    UNION ALL
    SELECT 'menuWizard',
           'Configure Wizard Facility'
    UNION ALL
    SELECT 'menuDataMining',
           'Configure Data Mining'
    UNION ALL
    SELECT 'menuAppSettings',
           'Configure Application Settings'
    UNION ALL
    SELECT 'menuReleaseLocks',
           'Release Batch Locks'
    ------------------------------
    -- Insert Access per BatchType
    ------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'DM '
             + [QueryCode] COLLATE sql_latin1_general_cp1_ci_as,
           'Data Mining - '
             + [QueryCode]
    FROM   [MoBatch].[BI_DM_Query]
    ------------------------------
    -- Insert Access per BatchType
    ------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype,
           batchtype
             + ' Access Screen'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Add',
           batchtype
             + ' - Add new entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Delete',
           batchtype
             + ' - Delete existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Update',
           batchtype
             + ' - Update existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbOpen',
           batchtype
             + ' - Open Lines Screen'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbCalculate',
           batchtype
             + ' - Calculate Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbValidate',
           batchtype
             + ' - Validate Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbApprove',
           batchtype
             + ' - Approve Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' tsbProcess',
           batchtype
             + ' - Process Batches'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines Add',
           batchtype
             + ' Lines - Add new entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines Delete',
           batchtype
             + ' Lines - Delete existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines Update',
           batchtype
             + ' Lines - Update existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines tsbOpen',
           batchtype
             + ' Lines - Open Distribution Screen'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines tsbCalculate',
           batchtype
             + ' Lines - Calculate Lines'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Lines tsbValidate',
           batchtype
             + ' Lines - Validate Lines'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions Add',
           batchtype
             + ' Distributions - Add new entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions Delete',
           batchtype
             + ' Distributions - Delete existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions Update',
           batchtype
             + ' Distributions - Update existing entries'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions tsbCalculate',
           batchtype
             + ' Distributions - Calculate Distributions'
    FROM   bi_batchtypes
    UNION ALL
    SELECT batchtype
             + ' Distributions tsbValidate',
           batchtype
             + ' Distributions - Validate Distributions'
    FROM   bi_batchtypes
    UNION ALL
    SELECT 'Rpt Cat '
             + rptcategoryid COLLATE sql_latin1_general_cp1_ci_as,
           'Report Category - '
             + rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_rptcategories
    UNION ALL
    SELECT 'Batch Cat '
             + batchcatcd COLLATE sql_latin1_general_cp1_ci_as,
           'Batch Category - '
             + batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_batchcategory
    WHERE  batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */
    -- Delete existing roles referring to access
    DELETE r
    FROM   [MoBatch].[BI_RoleAccess] r
    WHERE  NOT EXISTS (SELECT 'x'
                       FROM   [MoBatch].[BI_Access] a
                       WHERE  a.[AccessId] = r.[AccessId])
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    WITH CHECK ADD CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY ( [AccessId] ) REFERENCES [MoBatch].[BI_Access]([AccessId])
    ALTER TABLE [MoBatch].[BI_RoleAccess]
     CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    COMMIT;
    RAISERROR (N'[MoBatch].[BI_Access]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
  END</commandtext>
      <commandtext>EXEC MoBatch.a_sp_BI_Setup_New_Access</commandtext>
      <comment>Create access for new grid menu option </comment>
    </command>
  </Version>
  <Version number="1.1.1.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Reports ADD
	IsDefault bit NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_Lookup_Reports]
AS
  BEGIN
    SELECT   a.reportname,
             a.reporturl,
             b.rptcategorydescr,
             b.batchtype,
             b.batchlevel,
             ISNULL(a.isdefault,0) AS [IsDefault]
    FROM     mobatch.bi_reports a WITH (NOLOCK)
             INNER JOIN mobatch.bi_rptcategories b WITH (NOLOCK)
               ON a.rptcategoryid = b.rptcategoryid
    ORDER BY b.SEQUENCE,
             a.SEQUENCE
  END</commandtext>
      <comment>Amendments for new MoBatch Grid</comment>
    </command>
  </Version>
  <Version number="1.1.2.0" />
  <Version number="1.1.3.0">
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   MoBatch.BI_AppSettings
               WHERE  [Setting] = 'CommandTimeOut')
  INSERT INTO MoBatch.BI_AppSettings
             ([Setting],
              [Description],
              [Value],
              [Sequence],
              [DropDown])
  VALUES     ('CommandTimeOut',
              'Timeout period in seconds when executing stored procedures',
              '30',
              4,
              0)</commandtext>
      <comment>Store timeout in DB</comment>
    </command>
  </Version>
  <Version number="1.1.4.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_BatchTypes ADD
	[AutoDrill] bit NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [AutoDrill] = ISNULL([AutoDrill], 0),
             [ApproveSP],
             [ApproveStatus],
             [ProcessSP],
             [ProcessStatus],
             [HeadRowSetupSP],
             [LineRowSetupSP],
             [DistrRowSetupSP],
             [HeadRowSelectSP],
             [LineRowSelectSP],
             [DistrRowSelectSP],
             [HeadValidationSP],
             [LineValidationSP],
             [DistrValidationSP],
             [AfterCloseLinesSP],
             [AfterCloseDistrSP],
             [HeadValue1Descr],
             [HeadValue2Descr],
             [HeadValue3Descr],
             [HeadValue4Descr],
             [LineValue1Descr],
             [LineValue2Descr],
             [LineValue3Descr],
             [LineValue4Descr],
             [DistrValue1Descr],
             [DistrValue2Descr],
             [DistrValue3Descr],
             [DistrValue4Descr],
             [HeadValidationStatus],
             [LineValidationStatus],
             [DistrValidationStatus],
             [HeadCalculationSP],
             [HeadCalculationStatus],
             [LineCalculationSP],
             [LineCalculationStatus],
             [DistrCalculationSP],
             [DistrCalculationStatus],
             [HeadAfterLoadSP],
             [LineAfterLoadSP],
             [DistrAfterLoadSP],
             [HeadAfterSaveSP],
             [LineAfterSaveSP],
             [DistrAfterSaveSP],
             [HeadAfterDeleteSP],
             [LineAfterDeleteSP],
             [DistrAfterDeleteSP],
             [HeadDefaultSP],
             [LineDefaultSP],
             [DistrDefaultSP]
    FROM     [MoBatch].bi_batchtypes
    WHERE    batchtype = @BatchType
    ORDER BY SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Update](
               @BatchType              VARCHAR(255),
               @AutoDrill              BIT,
               @ApproveSP              VARCHAR(255),
               @ApproveStatus          VARCHAR(50),
               @ProcessSP              VARCHAR(255),
               @ProcessStatus          VARCHAR(50),
               @HeadRowSetupSP         VARCHAR(1024),
               @LineRowSetupSP         VARCHAR(1024),
               @DistrRowSetupSP        VARCHAR(1024),
               @HeadRowSelectSP        VARCHAR(1024),
               @LineRowSelectSP        VARCHAR(1024),
               @DistrRowSelectSP       VARCHAR(1024),
               @HeadValidationSP       VARCHAR(1024),
               @LineValidationSP       VARCHAR(1024),
               @DistrValidationSP      VARCHAR(1024),
               @AfterCloseLinesSP      VARCHAR(1024),
               @AfterCloseDistrSP      VARCHAR(1024),
               @HeadValue1Descr        VARCHAR(50),
               @HeadValue2Descr        VARCHAR(50),
               @HeadValue3Descr        VARCHAR(50),
               @HeadValue4Descr        VARCHAR(50),
               @LineValue1Descr        VARCHAR(50),
               @LineValue2Descr        VARCHAR(50),
               @LineValue3Descr        VARCHAR(50),
               @LineValue4Descr        VARCHAR(50),
               @DistrValue1Descr       VARCHAR(50),
               @DistrValue2Descr       VARCHAR(50),
               @DistrValue3Descr       VARCHAR(50),
               @DistrValue4Descr       VARCHAR(50),
               @HeadValidationStatus   VARCHAR(50),
               @LineValidationStatus   VARCHAR(50),
               @DistrValidationStatus  VARCHAR(50),
               @HeadCalculationSP      VARCHAR(1024),
               @HeadCalculationStatus  VARCHAR(50),
               @LineCalculationSP      VARCHAR(1024),
               @LineCalculationStatus  VARCHAR(50),
               @DistrCalculationSP     VARCHAR(1024),
               @DistrCalculationStatus VARCHAR(50),
               @HeadAfterLoadSP        VARCHAR(1024),
               @LineAfterLoadSP        VARCHAR(1024),
               @DistrAfterLoadSP       VARCHAR(1024),
               @HeadAfterSaveSP        VARCHAR(1024),
               @LineAfterSaveSP        VARCHAR(1024),
               @DistrAfterSaveSP       VARCHAR(1024),
               @HeadAfterDeleteSP      VARCHAR(1024),
               @LineAfterDeleteSP      VARCHAR(1024),
               @DistrAfterDeleteSP     VARCHAR(1024),
               @HeadDefaultSP          VARCHAR(1024),
               @LineDefaultSP          VARCHAR(1024),
               @DistrDefaultSP         VARCHAR(1024))
AS
  BEGIN
    SET nocount  OFF;
            
    UPDATE [MoBatch].bi_batchtypes
    SET    autodrill = @AutoDrill,
           approvesp = @ApproveSP,
           approvestatus = @ApproveStatus,
           processsp = @ProcessSP,
           processstatus = @ProcessStatus,
           headrowsetupsp = @HeadRowSetupSP,
           linerowsetupsp = @LineRowSetupSP,
           distrrowsetupsp = @DistrRowSetupSP,
           headrowselectsp = @HeadRowSelectSP,
           linerowselectsp = @LineRowSelectSP,
           distrrowselectsp = @DistrRowSelectSP,
           headvalidationsp = @HeadValidationSP,
           linevalidationsp = @LineValidationSP,
           distrvalidationsp = @DistrValidationSP,
           aftercloselinessp = @AfterCloseLinesSP,
           afterclosedistrsp = @AfterCloseDistrSP,
           headvalue1descr = @HeadValue1Descr,
           headvalue2descr = @HeadValue2Descr,
           headvalue3descr = @HeadValue3Descr,
           headvalue4descr = @HeadValue4Descr,
           linevalue1descr = @LineValue1Descr,
           linevalue2descr = @LineValue2Descr,
           linevalue3descr = @LineValue3Descr,
           linevalue4descr = @LineValue4Descr,
           distrvalue1descr = @DistrValue1Descr,
           distrvalue2descr = @DistrValue2Descr,
           distrvalue3descr = @DistrValue3Descr,
           distrvalue4descr = @DistrValue4Descr,
           headvalidationstatus = @HeadValidationStatus,
           linevalidationstatus = @LineValidationStatus,
           distrvalidationstatus = @DistrValidationStatus,
           headcalculationsp = @HeadCalculationSP,
           headcalculationstatus = @HeadCalculationStatus,
           linecalculationsp = @LineCalculationSP,
           linecalculationstatus = @LineCalculationStatus,
           distrcalculationsp = @DistrCalculationSP,
           distrcalculationstatus = @DistrCalculationStatus,
           headafterloadsp = @HeadAfterLoadSP,
           lineafterloadsp = @LineAfterLoadSP,
           distrafterloadsp = @DistrAfterLoadSP,
           headaftersavesp = @HeadAfterSaveSP,
           lineaftersavesp = @LineAfterSaveSP,
           distraftersavesp = @DistrAfterSaveSP,
           headafterdeletesp = @HeadAfterDeleteSP,
           lineafterdeletesp = @LineAfterDeleteSP,
           distrafterdeletesp = @DistrAfterDeleteSP,
           headdefaultsp = @HeadDefaultSP,
           linedefaultsp = @LineDefaultSP,
           distrdefaultsp = @DistrDefaultSP
    WHERE  batchtype = @BatchType
                                                                     
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <comment>App config settings for new MoBatch grid</comment>
    </command>
  </Version>
  <Version number="1.1.22.0">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_RecordSpParamInfo](
               @SPName VARCHAR(128)  = ' ')
AS
  BEGIN
    SET nocount  ON;
    --
    DELETE FROM BI_SP_ParameterInfo
    WHERE       spname = @SPName
    --
    DECLARE  @nSQL VARCHAR(MAX)
    SET @nSQL = 'SELECT
                        SPName = SP.Name
                        , ParameterName = P.name
                        , ParameterID = P.parameter_id
                        , TypeName = T.name
                        , ParameterSize = P.max_length
                        , RequiredParm = convert(int,0)
                        , OutputParm = is_output
                    FROM '
                  + 'sys.parameters P WITH (nolock)
                            inner join sys.objects SP WITH (nolock)
                                on SP.type = ''' + 'P' + '''
                                and SP.name = '''
                  + @SPName + '''
                                and P.[object_id] = SP.[object_id]
                            inner join sys.types T
                                on T.user_type_id = P.user_type_id
                        order by P.Parameter_id'
    --
    
    INSERT INTO BI_SP_ParameterInfo
	    EXEC( @nSQL)

    UPDATE a
    SET    requiredparm = 1
    FROM   BI_SP_ParameterInfo a
           INNER JOIN BI_SP_ParameterInfo rp WITH (nolock)
             ON rp.spname = a.spname
                AND rp.parametername = a.parametername
  END</commandtext>
      <comment>Fixing SP</comment>
    </command>
  </Version>
  <Version number="1.1.26.0">
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   MoBatch.BI_AppSettings
               WHERE  [Setting] = 'CustomHelpFile')
	INSERT INTO [MoBatch].[BI_AppSettings]
		   ([Setting],
		    [Description],
		    [Value],
		    [Sequence],
		    [DropDown])
	VALUES     (N'CustomHelpFile',
		    N'Customized MoBatch document file. Amend if applicable',
		    N'MoBatch_Sample_Custom.chm',
		    1,
		    0)</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   MoBatch.BI_AppSettings
               WHERE  [Setting] = 'StandardHelpFile')
	INSERT INTO [MoBatch].[BI_AppSettings]
		   ([Setting],
		    [Description],
		    [Value],
		    [Sequence],
		    [DropDown])
	VALUES     (N'StandardHelpFile',
		    N'Current standard MoBatch document file. NOT TO BE AMENDED!',
		    N'MoBatch_1.0.0.chm',
		    1,
		    0)</commandtext>
      <comment>Help Documentation</comment>
    </command>
  </Version>
  <Version number="1.1.27.0">
    <command>
      <commandtext>CREATE TABLE [MoBatch].[BI_Buttons](
        [BatchType] [varchar](50) NOT NULL,
        [BatchLevel] [char](1) NOT NULL,
        [Sequence] [int] NOT NULL,
        [ButtonLabel] [varchar](30) NULL,
        [ButtonImageFile] [varchar](1024) NULL,
        [ButtonSP] [varchar](1024) NULL,
        [ButtonStatus] [varchar](50) NULL,
        PRIMARY KEY CLUSTERED
        (
        [BatchType] ASC,
        [BatchLevel] ASC,
        [Sequence] ASC
        )WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
        ) ON [PRIMARY]</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_Buttons_Select]
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1)
        AS
        BEGIN
        SET nocount  ON
        SELECT   [ButtonLabel],
        [ButtonImageFile],
        [ButtonSP],
        [ButtonStatus]
        FROM     [MoBatch].[BI_Buttons] WITH (NOLOCK)
        WHERE    [BatchType] = @BatchType
        AND [BatchLevel] = @BatchLevel
        ORDER BY [Sequence]
        END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_Buttons_Insert]
           @BatchType       VARCHAR(50),
           @BatchLevel      CHAR(1),
           @Sequence        INT,
           @ButtonLabel     VARCHAR(30),
           @ButtonImageFile VARCHAR(1024),
           @ButtonSP        VARCHAR(1024),
           @ButtonStatus    VARCHAR(50)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    BEGIN TRAN
        
    -- Entries will be inserted in sequence order, but whenever inserting
    -- we must first remove old entries so if inserting first entry then
    -- remove all previous entries for the batch/level
    IF @Sequence = 1
      BEGIN
        DELETE [MoBatch].[BI_Buttons]
        WHERE  [BatchType] = @BatchType
               AND [BatchLevel] = @BatchLevel
      END
          
    INSERT INTO [MoBatch].[BI_Buttons]
               ([BatchType],
                [BatchLevel],
                [Sequence],
                [ButtonLabel],
                [ButtonImageFile],
                [ButtonSP],
                [ButtonStatus])
    SELECT @BatchType,
           @BatchLevel,
           @Sequence,
           @ButtonLabel,
           @ButtonImageFile,
           @ButtonSP,
           @ButtonStatus
    COMMIT
  END</commandtext>
      <comment>Action buttons</comment>
    </command>
  </Version>
  <Version number="1.1.28.0">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypes_Delete](
-- ===========================================================
-- Author:        R. Blomstrand
-- Create date: 23/09/2008
-- Description:   Used by MoBatch to delete batch types
-- ===========================================================
   @BatchType VARCHAR(255))
AS
  BEGIN
    SET nocount  OFF;
    BEGIN TRANSACTION;

    DELETE FROM [MoBatch].[BI_Tables]
    WHERE       [BatchType] = @BatchType
                                              
    DELETE [MoBatch].[BI_BatchTypes]
    WHERE  [BatchType] = @BatchType
                         
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Delete BI_BatchTypes Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
    ELSE
      BEGIN
        COMMIT;
      END
  END</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.objects
           WHERE  object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_Tables_Delete]')
                  AND TYPE IN (N'P',N'PC'))
  DROP PROCEDURE [MoBatch].[a_sp_BI_Tables_Delete]</commandtext>
      <commandtext>DELETE t
FROM   [MoBatch].[BI_Tables] t
       LEFT OUTER JOIN [MoBatch].[BI_BatchTypes] bt
         ON t.batchtype = bt.batchtype
WHERE  bt.batchtype IS NULL;</commandtext>
      <comment>Correct handling batch types removal</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_New_Access]
-- This stored procedure is used to re-create all access permutations
-- To run: EXEC MoBatch.a_sp_BI_Setup_New_Access
AS
  BEGIN
    SET nocount  ON;
    SET xact_abort  ON;
    BEGIN TRANSACTION;
    ----------------------------------------------------------
    -- Temporarily disable constraint to allow deleting Access
    ----------------------------------------------------------
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access]

    -------------------------
    -- Delete existing access
    -------------------------
    DELETE [MoBatch].[BI_Access]

    ------------------------------
    -- Insert Standard Menu access
    ------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'menuBatchGrid',
           'New Batch Grid Menu Option'
    UNION ALL
    SELECT 'menuBatchEntry',
           'Batch Entry Menu Option'
    UNION ALL
    SELECT 'menuReports',
           'Configure Report Menus'
    UNION ALL
    SELECT 'menuConfiguration',
           'Configuration Menu Function'
    UNION ALL
    SELECT 'menuAccess',
           'Configure Access'
    UNION ALL
    SELECT 'menuBatchCategories',
           'Configure Batch Categories'
    UNION ALL
    SELECT 'menuBatchTypes',
           'Configure Batch Types'
    UNION ALL
    SELECT 'Batch Types Update',
           'Configure Batch Types - Update existing entries'
    UNION ALL
    SELECT 'menuBatchScreenSetup',
           'Configure Batch Screen Setup'
    UNION ALL
    SELECT 'Batch Screen Setup Update',
           'Configure Batch Screen Setup - Update existing entries'
    UNION ALL
    SELECT 'menuReportCategories',
           'Configure Report Categories'
    UNION ALL
    SELECT 'menuReportItems',
           'Configure Report Items'
    UNION ALL
    SELECT 'menuWizard',
           'Configure Wizard Facility'
    UNION ALL
    SELECT 'menuDataMining',
           'Configure Data Mining'
    UNION ALL
    SELECT 'menuAppSettings',
           'Configure Application Settings'
    UNION ALL
    SELECT 'menuReleaseLocks',
           'Release Batch Locks'

    -------------------------------------------------
    -- Insert Data Mining Button Access per BatchType
    -------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'DM '
             + [QueryCode] COLLATE sql_latin1_general_cp1_ci_as,
           'Data Mining - '
             + [QueryCode]
    FROM   [MoBatch].[BI_DM_Query]

    ------------------------------
    -- Insert Action Button access
    ------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' ActionButton '
			 + buttonlabel COLLATE sql_latin1_general_cp1_ci_as,
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Action Button '
			 + buttonlabel
	FROM   MoBatch.BI_Buttons

    -----------------------------------
    -- Insert Access for each BatchType
    -----------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype,
           batchtype
             + ' Access Screen'
    FROM   MoBatch.BI_BatchTypes

    -----------------------------------------------
    -- Insert batchtype access common to all levels
    -----------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Add',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Add new entries'
	FROM   MoBatch.BI_Tables
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Delete',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Delete existing entries'
	FROM   MoBatch.BI_Tables
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Update',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Update existing entries'
	FROM   MoBatch.BI_Tables

    -----------------------------------------------------------
    -- Insert batchtype button access applicable to Header only
    -----------------------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + ' tsbApprove',
		   batchtype
			 + ' - Approve Batches'
	FROM   MoBatch.BI_BatchTypes
    UNION ALL
	SELECT batchtype
			 + ' tsbProcess',
		   batchtype
			 + ' - Process Batches'
	FROM   MoBatch.BI_BatchTypes

    ----------------------------------------------------
    -- Insert Access applicable to header and lines only
    ----------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype
             + ' tsbOpen',
           batchtype
             + ' - Open Lines Screen'
    FROM   MoBatch.BI_Tables
    WHERE BatchLevel = 'H'
	UNION
	    SELECT batchtype
             + ' Lines tsbOpen',
           batchtype
             + ' Lines - Open Distribution Screen'
    FROM   MoBatch.BI_Tables
    WHERE BatchLevel = 'L'

    ------------------------------------------------------
    -- Insert batchtype button access common to all levels
    ------------------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' tsbCalculate',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Calculate '
			 + (CASE 
				  WHEN batchlevel = 'H'
				  THEN ' Batches'
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
	FROM   MoBatch.BI_Tables
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' tsbValidate',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Validate '
			 + (CASE 
				  WHEN batchlevel = 'H'
				  THEN ' Batches'
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
	FROM   MoBatch.BI_Tables

    --------------------------------
    -- Insert report category access
    --------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'Rpt Cat '
             + rptcategoryid COLLATE sql_latin1_general_cp1_ci_as,
           'Report Category - '
             + rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_rptcategories

    -------------------------------
    -- Insert batch category access
    -------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'Batch Cat '
             + batchcatcd COLLATE sql_latin1_general_cp1_ci_as,
           'Batch Category - '
             + batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_batchcategory
    WHERE  batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */

	-------------------------------------------------------------
    -- Delete existing roles linked to access that does not exist
	-------------------------------------------------------------
    DELETE r
    FROM   [MoBatch].[BI_RoleAccess] r
    WHERE  NOT EXISTS (SELECT 'x'
                       FROM   [MoBatch].[BI_Access] a
                       WHERE  a.[AccessId] = r.[AccessId])

    ------------------------------------------------
    -- Re-enable constraint to allow deleting Access
    ------------------------------------------------
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    WITH CHECK ADD CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY ( [AccessId] ) REFERENCES [MoBatch].[BI_Access]([AccessId])

    ALTER TABLE [MoBatch].[BI_RoleAccess]
     CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    COMMIT;

    RAISERROR (N'[MoBatch].[BI_Access]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
  END</commandtext>
      <commandtext>EXEC MoBatch.a_sp_BI_Setup_New_Access</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_StoredProcedures_List]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    ToolTip_SP [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineValidationSP' [CallEvent],
                    NULL [Column],
                    linevalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineCalculationSP' [CallEvent],
                    NULL [Column],
                    linecalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterLoadSP' [CallEvent],
                    NULL [Column],
                    lineafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterSaveSP' [CallEvent],
                    NULL [Column],
                    lineaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    lineafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadDefaultSP' [CallEvent],
                    NULL [Column],
                    HeadDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineDefaultSP' [CallEvent],
                    NULL [Column],
                    LineDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrDefaultSP' [CallEvent],
                    NULL [Column],
                    DistrDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    'ActionButtonSP' [CallEvent],
                    NULL [Column],
                    ButtonSp [SP_Name]
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
    UNION ALL
    SELECT DISTINCT NULL [BatchType],
                    NULL [BatchLevel],
                    'Report: '
                      + reportname [CallEvent],
                    NULL [Column],
                    REPLACE(reporturl,'GRID:','') [SP_Name]
    FROM   [MoBatch].bi_reports
    WHERE  reporturl LIKE 'GRID:%'
    ORDER BY [SP_Name]
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ToolTip_SP sp_name
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ButtonSp sp_name
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT REPLACE(reporturl, 'GRID:','') sp_name
    FROM   [MoBatch].bi_reports
    WHERE  reporturl like 'GRID:%'
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name) &gt; 0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Buttons_Select]
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1)
AS
  BEGIN
    SET nocount  ON
		SELECT   [ButtonLabel],
				 [ButtonSP],
				 [ButtonImageFile],
				 [ButtonStatus]
		FROM     [MoBatch].[BI_Buttons] WITH (NOLOCK)
		WHERE    [BatchType] = @BatchType
				 AND [BatchLevel] = @BatchLevel
		ORDER BY [Sequence]
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Buttons_Insert]
           @BatchType       VARCHAR(50),
           @BatchLevel      CHAR(1),
           @Sequence        INT,
           @ButtonLabel     VARCHAR(30),
           @ButtonSP        VARCHAR(1024),
           @ButtonImageFile VARCHAR(1024),
           @ButtonStatus    VARCHAR(50)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    BEGIN TRAN
        
    INSERT INTO [MoBatch].[BI_Buttons]
               ([BatchType],
                [BatchLevel],
                [Sequence],
                [ButtonLabel],
                [ButtonSP],
                [ButtonImageFile],
                [ButtonStatus])
    SELECT @BatchType,
           @BatchLevel,
           @Sequence,
           @ButtonLabel,
           @ButtonSP,
           @ButtonImageFile,
           @ButtonStatus
    COMMIT
  END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_Buttons_Delete]
          @BatchType  VARCHAR(50),
          @BatchLevel CHAR(1)
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    BEGIN TRAN
    DELETE [MoBatch].[BI_Buttons]
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
    COMMIT
  END</commandtext>
      <comment>Access cater for Action Buttons +  correct invalid levels inserted</comment>
    </command>
  </Version>
  <Version number="1.1.31.0">
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'AddnewRowPosition')
  INSERT INTO [MoBatch].[BI_AppSettings]
             ([Setting],
              [Description],
              [Value],
              [Sequence],
              [DropDown])
  VALUES     ('AddnewRowPosition',
              'Whether to add new rows at top or bottom of batch grid.',
              'Top',
              '1',
              1)</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_Options]
               WHERE  [Option_Type] = 'AddnewRowPosition')
  INSERT INTO [MoBatch].[BI_Options]
             ([Option_Type],
              [Option_Value],
              [Option_Text],
              [Sequence])
  SELECT 'AddnewRowPosition',
         'Top',
         'Add new rows at top of grid',
         1
  UNION 
  SELECT 'AddnewRowPosition',
         'Bottom',
         'Add new rows at bottom of grid',
         2</commandtext>
      <comment>App Config Setting for add rows top or bottom</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_BatchTypes ADD
	HeadOverrideSP varchar(1024) NULL,
	LineOverrideSP varchar(1024) NULL,
	DistrOverrideSP varchar(1024) NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [AutoDrill] = ISNULL([AutoDrill],0),
             [ApproveSP],
             [ApproveStatus],
             [ProcessSP],
             [ProcessStatus],
             [HeadRowSetupSP],
             [LineRowSetupSP],
             [DistrRowSetupSP],
             [HeadRowSelectSP],
             [LineRowSelectSP],
             [DistrRowSelectSP],
             [HeadValidationSP],
             [LineValidationSP],
             [DistrValidationSP],
             [AfterCloseLinesSP],
             [AfterCloseDistrSP],
             [HeadValue1Descr],
             [HeadValue2Descr],
             [HeadValue3Descr],
             [HeadValue4Descr],
             [LineValue1Descr],
             [LineValue2Descr],
             [LineValue3Descr],
             [LineValue4Descr],
             [DistrValue1Descr],
             [DistrValue2Descr],
             [DistrValue3Descr],
             [DistrValue4Descr],
             [HeadValidationStatus],
             [LineValidationStatus],
             [DistrValidationStatus],
             [HeadCalculationSP],
             [HeadCalculationStatus],
             [LineCalculationSP],
             [LineCalculationStatus],
             [DistrCalculationSP],
             [DistrCalculationStatus],
             [HeadAfterLoadSP],
             [LineAfterLoadSP],
             [DistrAfterLoadSP],
             [HeadAfterSaveSP],
             [LineAfterSaveSP],
             [DistrAfterSaveSP],
             [HeadAfterDeleteSP],
             [LineAfterDeleteSP],
             [DistrAfterDeleteSP],
             [HeadDefaultSP],
             [LineDefaultSP],
             [DistrDefaultSP],
             [HeadOverrideSP],
             [LineOverrideSP],
             [DistrOverrideSP]
    FROM     [MoBatch].bi_batchtypes WITH (NOLOCK)
    WHERE    batchtype = @BatchType
    ORDER BY SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Update](
               @BatchType              VARCHAR(255),
               @AutoDrill              BIT,
               @ApproveSP              VARCHAR(255),
               @ApproveStatus          VARCHAR(50),
               @ProcessSP              VARCHAR(255),
               @ProcessStatus          VARCHAR(50),
               @HeadRowSetupSP         VARCHAR(1024),
               @LineRowSetupSP         VARCHAR(1024),
               @DistrRowSetupSP        VARCHAR(1024),
               @HeadRowSelectSP        VARCHAR(1024),
               @LineRowSelectSP        VARCHAR(1024),
               @DistrRowSelectSP       VARCHAR(1024),
               @HeadValidationSP       VARCHAR(1024),
               @LineValidationSP       VARCHAR(1024),
               @DistrValidationSP      VARCHAR(1024),
               @AfterCloseLinesSP      VARCHAR(1024),
               @AfterCloseDistrSP      VARCHAR(1024),
               @HeadValue1Descr        VARCHAR(50),
               @HeadValue2Descr        VARCHAR(50),
               @HeadValue3Descr        VARCHAR(50),
               @HeadValue4Descr        VARCHAR(50),
               @LineValue1Descr        VARCHAR(50),
               @LineValue2Descr        VARCHAR(50),
               @LineValue3Descr        VARCHAR(50),
               @LineValue4Descr        VARCHAR(50),
               @DistrValue1Descr       VARCHAR(50),
               @DistrValue2Descr       VARCHAR(50),
               @DistrValue3Descr       VARCHAR(50),
               @DistrValue4Descr       VARCHAR(50),
               @HeadValidationStatus   VARCHAR(50),
               @LineValidationStatus   VARCHAR(50),
               @DistrValidationStatus  VARCHAR(50),
               @HeadCalculationSP      VARCHAR(1024),
               @HeadCalculationStatus  VARCHAR(50),
               @LineCalculationSP      VARCHAR(1024),
               @LineCalculationStatus  VARCHAR(50),
               @DistrCalculationSP     VARCHAR(1024),
               @DistrCalculationStatus VARCHAR(50),
               @HeadAfterLoadSP        VARCHAR(1024),
               @LineAfterLoadSP        VARCHAR(1024),
               @DistrAfterLoadSP       VARCHAR(1024),
               @HeadAfterSaveSP        VARCHAR(1024),
               @LineAfterSaveSP        VARCHAR(1024),
               @DistrAfterSaveSP       VARCHAR(1024),
               @HeadAfterDeleteSP      VARCHAR(1024),
               @LineAfterDeleteSP      VARCHAR(1024),
               @DistrAfterDeleteSP     VARCHAR(1024),
               @HeadDefaultSP          VARCHAR(1024),
               @LineDefaultSP          VARCHAR(1024),
               @DistrDefaultSP         VARCHAR(1024),
               @HeadOverrideSP         VARCHAR(1024),
               @LineOverrideSP         VARCHAR(1024),
               @DistrOverrideSP        VARCHAR(1024))
AS
  BEGIN
    SET nocount  OFF;
                
    UPDATE [MoBatch].bi_batchtypes
    SET    autodrill = @AutoDrill,
           approvesp = @ApproveSP,
           approvestatus = @ApproveStatus,
           processsp = @ProcessSP,
           processstatus = @ProcessStatus,
           headrowsetupsp = @HeadRowSetupSP,
           linerowsetupsp = @LineRowSetupSP,
           distrrowsetupsp = @DistrRowSetupSP,
           headrowselectsp = @HeadRowSelectSP,
           linerowselectsp = @LineRowSelectSP,
           distrrowselectsp = @DistrRowSelectSP,
           headvalidationsp = @HeadValidationSP,
           linevalidationsp = @LineValidationSP,
           distrvalidationsp = @DistrValidationSP,
           aftercloselinessp = @AfterCloseLinesSP,
           afterclosedistrsp = @AfterCloseDistrSP,
           headvalue1descr = @HeadValue1Descr,
           headvalue2descr = @HeadValue2Descr,
           headvalue3descr = @HeadValue3Descr,
           headvalue4descr = @HeadValue4Descr,
           linevalue1descr = @LineValue1Descr,
           linevalue2descr = @LineValue2Descr,
           linevalue3descr = @LineValue3Descr,
           linevalue4descr = @LineValue4Descr,
           distrvalue1descr = @DistrValue1Descr,
           distrvalue2descr = @DistrValue2Descr,
           distrvalue3descr = @DistrValue3Descr,
           distrvalue4descr = @DistrValue4Descr,
           headvalidationstatus = @HeadValidationStatus,
           linevalidationstatus = @LineValidationStatus,
           distrvalidationstatus = @DistrValidationStatus,
           headcalculationsp = @HeadCalculationSP,
           headcalculationstatus = @HeadCalculationStatus,
           linecalculationsp = @LineCalculationSP,
           linecalculationstatus = @LineCalculationStatus,
           distrcalculationsp = @DistrCalculationSP,
           distrcalculationstatus = @DistrCalculationStatus,
           headafterloadsp = @HeadAfterLoadSP,
           lineafterloadsp = @LineAfterLoadSP,
           distrafterloadsp = @DistrAfterLoadSP,
           headaftersavesp = @HeadAfterSaveSP,
           lineaftersavesp = @LineAfterSaveSP,
           distraftersavesp = @DistrAfterSaveSP,
           headafterdeletesp = @HeadAfterDeleteSP,
           lineafterdeletesp = @LineAfterDeleteSP,
           distrafterdeletesp = @DistrAfterDeleteSP,
           headdefaultsp = @HeadDefaultSP,
           linedefaultsp = @LineDefaultSP,
           distrdefaultsp = @DistrDefaultSP,
           headoverridesp = @HeadOverrideSP,
           lineoverridesp = @LineOverrideSP,
           distroverridesp = @DistrOverrideSP
    WHERE  batchtype = @BatchType
                                                                                            
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ToolTip_SP sp_name
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ButtonSp sp_name
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT REPLACE(reporturl, 'GRID:','') sp_name
    FROM   [MoBatch].bi_reports
    WHERE  reporturl like 'GRID:%'
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name) &gt; 0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_StoredProcedures_List]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    ToolTip_SP [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineValidationSP' [CallEvent],
                    NULL [Column],
                    linevalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineCalculationSP' [CallEvent],
                    NULL [Column],
                    linecalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterLoadSP' [CallEvent],
                    NULL [Column],
                    lineafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterSaveSP' [CallEvent],
                    NULL [Column],
                    lineaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    lineafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadDefaultSP' [CallEvent],
                    NULL [Column],
                    HeadDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineDefaultSP' [CallEvent],
                    NULL [Column],
                    LineDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrDefaultSP' [CallEvent],
                    NULL [Column],
                    DistrDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadOverrideSP' [CallEvent],
                    NULL [Column],
                    HeadOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineOverrideSP' [CallEvent],
                    NULL [Column],
                    LineOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrOverrideSP' [CallEvent],
                    NULL [Column],
                    DistrOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    'ActionButtonSP' [CallEvent],
                    NULL [Column],
                    ButtonSp [SP_Name]
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
    UNION ALL
    SELECT DISTINCT NULL [BatchType],
                    NULL [BatchLevel],
                    'Report: '
                      + reportname [CallEvent],
                    NULL [Column],
                    REPLACE(reporturl,'GRID:','') [SP_Name]
    FROM   [MoBatch].bi_reports
    WHERE  reporturl LIKE 'GRID:%'
    ORDER BY [SP_Name]
  END</commandtext>
      <comment>Cater for Supervisor Override</comment>
    </command>
    <command>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_Setup_New_Columns]
-- This stored procedure is adds to MoBatch.BI_Columns any new columns added to 
-- tables referenced by Batch Types (where such column is missing)
-- This is useful when using an SQL script to alter the referenced tables as one
-- can then just execute this SP afterwards without having to save the batch type
-- to recognize the new column(s).
-- Remember that if the SQL script also needs to adjust any of the properties stored
-- in BI_Columns, then this should be updated after executing this SP (or else 
-- nothing yet to update).

-- To run: EXEC MoBatch.a_sp_BI_Setup_New_Columns
AS
  BEGIN
    SET NoCount  ON;
    SET xAct_Abort  ON;
    
    INSERT INTO MobAtch.bi_Columns
               ([Batchtype],
                [Batchlevel],
                [Table],
                [Column],
                [Rename To],
                [Sequence],
                [LookUp_SP],
                [Select_SP],
                [Validation_SP],
                [Hide],
                [ReadOnly],
                [ReadOnly Existing],
                [Filter On],
                [Required],
                [Batch ID],
                [Line ID],
                [Distr ID],
                [Status Col],
                [Computed],
                [Format],
                [Alignment],
                [ToolTip_SP])
    SELECT t.[BatchType] [Batchtype],
           t.[BatchLevel] [Batchlevel],
           t.[Table] [Table],
           Name [Column],
           '' [Rename To],
           Column_Id [Sequence],
           '' [LookUp_SP],
           '' [Select_SP],
           '' [Validation_SP],
           0 [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           '' [Format],
           'NotSet' [Alignment],
           NULL [ToolTip_SP]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN sys.Columns sc WITH (NOLOCK)
             ON sc.Object_Id = OBJECT_ID(t.[Table])
           LEFT OUTER JOIN [MoBatch].bi_Columns bic WITH (NOLOCK)
             ON bic.BatchType = t.BatchType
                AND bic.[BatchLevel] = t.BatchLevel
                AND bic.[Table] = t.[Table]
                AND bic.[Column] = sc.Name
    WHERE  bic.[Column] IS NULL
           
  END</commandtext>
      <comment>SP to auto-add new missing cols to BI_Columns</comment>
    </command>
  </Version>
  <Version number="1.1.32.0">
    <command>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_Document_Summary]
-- Provides in output a summary of the installation
-- EXEC [MoBatch].[a_sp_BI_Document_Summary]
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NoCount  ON;
                        
    --=========================================
    -- Create temp table containing report data
    --=========================================
    CREATE TABLE #MobAtch_Configuration (
      [BatchCatCd]   VARCHAR(100),
      [BatchType]    VARCHAR(100),
      [BatchLevel]   INT,
      [ListSequence] INT,
      [ColumnID]     INT,
      [Section]      VARCHAR(100),
      [Text]         VARCHAR(2040))
        
    DECLARE  @ListSequence INT
                                                                                                                                                  
    --=================
    -- Batch Categories
    --=================
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Reflect Opening separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Categories
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = 'Batch Category : '
                      + [BatchCatDescr]
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                                                                                                                           
    -- Reflect Closing separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
                                                  
    --============
    -- Batch Types
    --============
    -- Reflect Opening separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Types
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    Batch Type : '
                      + [BatchType]
                      + (CASE 
                           WHEN [AutoDrill] = 1
                           THEN ' (with auto-drilldown selected)'
                           ELSE ''
                         END)
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    -- Reflect Closing separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
                                                  
    --=============
    -- Batch Levels
    --=============
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Dashes line before levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- List all batch levels per batch types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        Batch Level : '
                      + (CASE 
                           WHEN [BatchLevel] = 'H'
                           THEN 'Header'
                           WHEN [BatchLevel] = 'L'
                           THEN 'Lines'
                           WHEN [BatchLevel] = 'D'
                           THEN 'Distribution'
                           ELSE 'Unknown'
                         END)
                      + ' - Table: '
                      + [Table]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- Dashes line after levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    --===============
    -- Display Values
    --===============
    -------------------------------
    -- Reflect Display Values title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Display Values',
           [Text] = '            Special Display Values (top of screen) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
                                                                                                                                                                          
    -- Header (Display Value)
    -- Display Value #1 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + HeadValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue1descr IS NOT NULL 
           AND HeadValue1descr &lt;&gt; ''
    -- Display Value #2 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + HeadValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue2descr IS NOT NULL 
           AND HeadValue2descr &lt;&gt; ''
    -- Display Value #3 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + HeadValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue3descr IS NOT NULL 
           AND HeadValue3descr &lt;&gt; ''
    -- Display Value #4 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + HeadValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue4descr IS NOT NULL 
           AND HeadValue4descr &lt;&gt; ''
                                                                                                                                                                                            
                                                                                                                                                                                            
    -- Lines (Display Value)
    -- Display Value #1 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + LineValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue1descr IS NOT NULL 
           AND LineValue1descr &lt;&gt; ''
    -- Display Value #2 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + LineValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue2descr IS NOT NULL 
           AND LineValue2descr &lt;&gt; ''
    -- Display Value #3 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + LineValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue3descr IS NOT NULL 
           AND LineValue3descr &lt;&gt; ''
    -- Display Value #4 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + LineValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue4descr IS NOT NULL 
           AND LineValue4descr &lt;&gt; ''
                                                                                                                                                                                                   
    -- Distribution (Display Value)
    -- Display Value #1 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + dIstrValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue1descr IS NOT NULL 
           AND dIstrValue1descr &lt;&gt; ''
    -- Display Value #2 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + dIstrValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue2descr IS NOT NULL 
           AND dIstrValue2descr &lt;&gt; ''
    -- Display Value #3 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + dIstrValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue3descr IS NOT NULL 
           AND dIstrValue3descr &lt;&gt; ''
    -- Display Value #4 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + dIstrValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue4descr IS NOT NULL 
           AND dIstrValue4descr &lt;&gt; ''
                                                                                                                                                                                                  
                                                                                                                                                                                                  
    --============================================
    -- Special Buttons (and right-click) Processes
    --============================================
    -------------------------------------------
    -- Reflect Special Processing buttons title
    -------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Processing Buttons',
           [Text] = '            Special Processing Buttons (top of screen + right-click) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    ------------------------------
    -- Validation buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + HeadValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadValidationStatus IS NULL 
                                 OR HeadValidationStatus = ''
                           THEN 'ALL'
                           ELSE HeadValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValidationsp IS NOT NULL 
           AND HeadValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Lines (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + LineValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineValidationStatus IS NULL 
                                 OR LineValidationStatus = ''
                           THEN 'ALL'
                           ELSE LineValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValidationsp IS NOT NULL 
           AND LineValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Distribution (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + dIstrValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN dIstrValidationStatus IS NULL 
                                 OR dIstrValidationStatus = ''
                           THEN 'ALL'
                           ELSE dIstrValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValidationsp IS NOT NULL 
           AND dIstrValidationsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    -------------------------------
    -- Calculation buttons (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + HeadCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadCalculationStatus IS NULL 
                                 OR HeadCalculationStatus = ''
                           THEN 'ALL'
                           ELSE HeadCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadCalculationsp IS NOT NULL 
           AND HeadCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Lines (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + LineCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineCalculationStatus IS NULL 
                                 OR LineCalculationStatus = ''
                           THEN 'ALL'
                           ELSE LineCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineCalculationsp IS NOT NULL 
           AND LineCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Distribution (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + dIstrCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN [dIstrCalculationStatus] IS NULL 
                                 OR [dIstrCalculationStatus] = ''
                           THEN 'ALL'
                           ELSE dIstrCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrCalculationsp IS NOT NULL 
           AND dIstrCalculationsp &lt;&gt; ''
                                                                                                                                                                                                              
                                                                                                                                                                                                              
    ---------------------------
    -- Approve buttons (if any)
    ---------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Approve Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Approve SP: `'
                      + Approvesp
                      + '` (for '
                      + (CASE 
                           WHEN ApproveStatus IS NULL 
                                 OR ApproveStatus = ''
                           THEN 'ALL'
                           ELSE ApproveStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Approvesp IS NOT NULL 
           AND Approvesp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    ------------------------------
    -- Processing buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Processing Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Process SP: `'
                      + Processsp
                      + '` (for '
                      + (CASE 
                           WHEN ProcessStatus IS NULL 
                                 OR ProcessStatus = ''
                           THEN 'ALL'
                           ELSE ProcessStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Processsp IS NOT NULL 
           AND Processsp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    -----------------------------------------------------
    -- Special Action buttons (All levels where existing)
    -----------------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                '
                      + ButtonLabel
                      + ' SP: `'
                      + Buttonsp
                      + '` (for '
                      + (CASE 
                           WHEN [ButtonStatus] IS NULL 
                                 OR [ButtonStatus] = ''
                           THEN 'ALL'
                           ELSE ButtonStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_Buttons b WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = b.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --=================================
    -- Special Events Stored Procedures
    --=================================
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    ------------------------------------------
    -- Reflect Special Processing Events title
    ------------------------------------------
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Events',
           [Text] = '            Special Events : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --------------------------
    -- Default Events (if any)
    --------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + HeadDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadDefaultsp IS NOT NULL 
           AND HeadDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Lines (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + LineDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineDefaultsp IS NOT NULL 
           AND LineDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Distributions (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + dIstrDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrDefaultsp IS NOT NULL 
           AND dIstrDefaultsp &lt;&gt; ''
                                                                                                                                                                                               
                                                                                                                                                                                      
    ----------------------------              
    -- Row Setup Events (if any)
    ----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + HeadRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSetUpsp IS NOT NULL 
           AND HeadRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + LinerowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSetUpsp IS NOT NULL 
           AND LinerowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + dIstrRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSetUpsp IS NOT NULL 
           AND dIstrRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                            
    -----------------------------
    -- After Load Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + HeadAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterLoadsp IS NOT NULL 
           AND HeadAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + LineAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterLoadsp IS NOT NULL 
           AND LineAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + dIstRafterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterLoadsp IS NOT NULL 
           AND dIstRafterLoadsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                  
    -----------------------------
    -- Row Select Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + HeadRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSelectsp IS NOT NULL 
           AND HeadRowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + LinerowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSelectsp IS NOT NULL 
           AND LinerowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + dIstrRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSelectsp IS NOT NULL 
           AND dIstrRowSelectsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    --------------------------------------
    -- Supervisor Override Access (if any)
    --------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + HeadOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadOverridesp IS NOT NULL 
           AND HeadOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + LineOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineOverridesp IS NOT NULL 
           AND LineOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + dIstRoverRidesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRoverRidesp IS NOT NULL 
           AND dIstRoverRidesp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                                          
    -----------------------------
    -- After Save Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + HeadAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterSavesp IS NOT NULL 
           AND HeadAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + LineAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterSavesp IS NOT NULL 
           AND LineAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + dIstRafterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterSavesp IS NOT NULL 
           AND dIstRafterSavesp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    -----------------------------
    -- After Delete Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + HeadAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterDeletesp IS NOT NULL 
           AND HeadAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + LineAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterDeletesp IS NOT NULL 
           AND LineAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Distributions (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + dIstRafterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterDeletesp IS NOT NULL 
           AND dIstRafterDeletesp &lt;&gt; ''
                                                                                                                                                                                                                       
                                                                                                                                                                                                                            
    ------------------------------------
    -- After Close Child Events (if any)
    ------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Lines SP: `'
                      + AfterCloseLinessp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterCloseLinessp IS NOT NULL 
           AND AfterCloseLinessp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Distributions SP: `'
                      + AfterClosedIstrsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterClosedIstrsp IS NOT NULL 
           AND AfterClosedIstrsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    --========
    -- Columns
    --========
    -------------------------------
    -- Reflect Columns title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Columns',
           [Text] = '            Columns : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    ----------------------
    -- Reflect each column
    ----------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT   [BatchCatCd] = [BatchCatCd],
             [BatchType] = bt.[BatchType],
             [BatchLevel] = (CASE 
                               WHEN [BatchLevel] = 'H'
                               THEN 1
                               WHEN [BatchLevel] = 'L'
                               THEN 2
                               WHEN [BatchLevel] = 'D'
                               THEN 3
                               ELSE 4
                             END),
             [ListSequence] = @ListSequence,
             [ColumnId] = c.[Sequence],
             [Section] = 'Columns',
             [Text] = REPLACE(REPLACE(REPLACE('                '
                                                + [Column]
                                                + ' ('
                                                + (CASE 
                                                     WHEN NULLIF([Rename To],'') IS NOT NULL
                                                     THEN ', Renamed to `'
                                                            + [Rename To]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Required],0) = 1
                                                     THEN ', Required '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Hide],0) = 1
                                                     THEN ', Hidden '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly],0) = 1
                                                     THEN ', ReadOnly '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly Existing],0) = 1
                                                     THEN ', ReadOnly Existing'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Status Col],0) = 1
                                                     THEN ', Status Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Computed],0) = 1
                                                     THEN ', Computed Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Format],'') IS NOT NULL
                                                     THEN ', Format" `'
                                                            + [Format]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Alignment],'NotSet') &lt;&gt; 'NotSet'
                                                     THEN ', Alignment: `'
                                                            + [Alignment]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Lookup_SP],'') IS NOT NULL
                                                     THEN ', Combobox SP: `'
                                                            + [Lookup_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Select_SP],'') IS NOT NULL
                                                     THEN ', CTRL-L SP: `'
                                                            + [Select_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Validation_SP],'') IS NOT NULL
                                                     THEN ', Cell Validation SP: `'
                                                            + [Validation_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Tooltip_SP],'') IS NOT NULL
                                                     THEN ', Tooltip SP: `'
                                                            + [Tooltip_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + ')',' ()',''),'(, ','('),
                              ' )',')')
    FROM     MobAtch.bi_Columns c
             INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
               ON bt.BatchType = c.BatchType
    ORDER BY c.[Sequence]
                                                              
    --=========================
    -- Remove obsolete headings
    --=========================
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Display Values'
    WHERE  ct.Section = 'Title Display Values'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Processing Buttons'
    WHERE  ct.Section = 'Title Special Processing Buttons'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Events'
    WHERE  ct.Section = 'Title Special Events'
           AND cl.[BatchType] IS NULL
                              
    --================================
    -- Select compiled data for output
    --================================
    SELECT [Text]
    FROM     #MobAtch_Configuration
    ORDER BY [BatchCatCd],
             [BatchType],
             [BatchLevel],
             [ListSequence],
             [ColumnId]
                          
    --=================================
    -- Drop temp table after completion
    --=================================
    DROP TABLE #MobAtch_Configuration
        
  END</commandtext>
      <comment>Documentation Facilty</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Tables]
AS
  BEGIN
    SELECT ' ' Name
    UNION 
    SELECT Name
    FROM   sys.Tables
    WHERE  Substring(Name,1,3) &lt;&gt; 'BI_'
           AND Name &lt;&gt; 'sysdiagrams'
    UNION 
    SELECT Name
    FROM   sys.VIEWS
    ORDER BY name
  END</commandtext>
      <comment>Create batchtypes for views</comment>
    </command>
  </Version>
  <Version number="1.1.33.0">
    <command>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_GrantRolePermissions_MoBatch](
-- ====================================================================================
-- Author:        R. Blomstrand
-- Create date:   09/03/2010
-- Description:   Assign or revoke access for MoBatch usage to a given role (by default 
--                MoBatchRole). This provides SELECT/INSERT/DELETE/UPDATE access to 
--                tables and views, and EXECUTE access to stored procedures
--                Parameters as follows;
--                  Param 1: The name of the role to apply to (default Public)
--                  Param 2: 0 to grant access (default)
--                           1 to revoke access
--                  Param 3: 0 to only apply to objects in MoBatch schema (default)
--                           1 to apply to all objects in database
--                  Param 4: Pattern to match in non-MoBatch tables/views (default %)
--                  Param 5: Pattern to match in non-MoBatch stored procedures (default %)
-- Samples of execution:
--   Grant access to Mobatch schema objects (only) to role Public
--       EXEC  [MoBatch].a_sp_GrantRolePermissions_MoBatch
--   Revoke access to Mobatch schema objects (only) to role Public
--       EXEC  [MoBatch].a_sp_GrantRolePermissions_MoBatch 'Public', 1, 1
--   Grant access to all schema objects to role MoBatchRole where non-MoBatch tables/views
--   contain 'CustomerRegio' and stored procedures beginning with 'a_sp_UTI'
--       EXEC  [MoBatch].a_sp_GrantRolePermissions_MoBatch 'MoBatchRole', 0, 0, 'CustomerRegio%', 'a_sp_UTI%'
-- ====================================================================================
               @Role              VARCHAR(50)  = 'Public',
               @RevokeAccess      INT  = 0,
               @MoBatchOnly       INT  = 1,
               @TableMatchPattern VARCHAR(100) = '%',
               @SpMatchPattern    VARCHAR(100) = '%'
               )
AS
  BEGIN
    -- Determine whether to Grant or revoke based on parameter
    DECLARE  @Action VARCHAR(50)
    IF @RevokeAccess = 1
      BEGIN
        SELECT @Action = 'REVOKE'
      END
    ELSE
      BEGIN
        SELECT @Action = 'GRANT'
      END
    DECLARE  @buffer VARCHAR(MAX)
	SELECT   @buffer = IsNull(@buffer
								+ ';'
								+ CHAR(13)
								+ CHAR(10),'')
						 + CASE 
							 WHEN TYPE IN ('U','V')
							 THEN @Action
									+ ' SELECT, INSERT, UPDATE, DELETE ON ['
									+ s.Name
									+ '].['
									+ o.Name
									+ '] TO ['
									+ @Role
									+ ']'
							 WHEN TYPE = 'P'
							 THEN @Action
									+ ' EXECUTE ON ['
									+ s.Name
									+ '].['
									+ o.Name
									+ '] TO ['
									+ @Role
									+ ']'
						   END
	FROM     sys.Objects o
			 INNER JOIN sys.scHemAs s
			   ON o.scHema_Id = s.scHema_Id
	WHERE    ((o.TYPE IN ('U','V')
			   AND (s.Name = 'MoBatch' 
			         OR o.name = 'DataBaseProperties'
					 OR o.Name LIKE @TableMatchPattern))
			   OR (o.TYPE = 'P'
				   AND (s.Name = 'MoBatch'
						 OR o.Name LIKE @SpMatchPattern)))
			 AND (@MoBatchOnly = 0
				   OR s.Name = 'MoBatch')
	ORDER BY TYPE

    --PRINT @Buffer
    EXEC( @Buffer)
  END</commandtext>
      <comment>Dev tool to set up MoBatch Access for a role</comment>
    </command>
  </Version>
  <Version number="1.1.34.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Tables ADD
	UseNoLock bit NULL,
	OverrideInsert varchar(MAX) NULL,
	OverrideUpdate varchar(MAX) NULL,
	OverrideDelete varchar(MAX) NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Update](
               @BatchType      VARCHAR(50),
               @BatchLevel     CHAR(1),
               @Table          VARCHAR(100),
               @Qualifier      VARCHAR(2000),
               @UseNoLock      BIT,
               @OverrideInsert VARCHAR(MAX),
               @OverrideUpdate VARCHAR(MAX),
               @OverrideDelete VARCHAR(MAX))
AS
  BEGIN
    UPDATE [MoBatch].[BI_Tables]
    SET    [Table] = @Table,
           [Qualifier] = @Qualifier,
           [UseNoLock] = @UseNoLock,
           [OverrideInsert] = @OverrideInsert,
           [OverrideUpdate] = @OverrideUpdate,
           [OverrideDelete] = @OverrideDelete
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
                                                                                          
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Tables]
                   ([BatchType],
                    [BatchLevel],
                    [Table],
                    [Qualifier],
                    [UseNoLock],
                    [OverrideInsert],
                    [OverrideUpdate],
                    [OverrideDelete])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Qualifier,
                    @UseNoLock,
                    @OverrideInsert,
                    @OverrideUpdate,
                    @OverrideDelete)
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Select](
               @BatchType  VARCHAR(50),
               @BatchLevel CHAR(1))
AS
  BEGIN
    IF @BatchLevel IS NULL 
        OR @BatchLevel = ''
      BEGIN
        SELECT [BatchLevel],
               [Table],
               [Qualifier],
               [UseNoLock],
               [OverrideInsert],
               [OverrideUpdate],
               [OverrideDelete]
        FROM   [MoBatch].[BI_Tables] WITH (NOLOCK)
        WHERE  [BatchType] = @BatchType
      END
    ELSE
      BEGIN
        SELECT [BatchLevel],
               [Table],
               [Qualifier],
               [UseNoLock],
               [OverrideInsert],
               [OverrideUpdate],
               [OverrideDelete]
        FROM   [MoBatch].[BI_Tables] WITH (NOLOCK)
        WHERE  [BatchType] = @BatchType
               AND [BatchLevel] = @BatchLevel
      END
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_ConfigureBatchGridOptions_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [AutoDrill] = ISNULL([AutoDrill],0)
    FROM     [MoBatch].bi_batchtypes WITH (NOLOCK)
    WHERE    batchtype = @BatchType
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_ConfigureBatchGridOptions_Update](
                @BatchType VARCHAR(255),
                @AutoDrill BIT)
AS
  BEGIN
    SET NoCount  OFF;
                    
    UPDATE [MoBatch].bi_BatchTypes
    SET    AutoDrill = @AutoDrill
    WHERE  BatchType = @BatchType
                                                                                                                   
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypes Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Name
              ELSE NULL
            END) [Rename_To],
           Column_Id [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CAST(0 AS BIT) [Required],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           NULL [Format],
           'NotSet' [Alignment]
    FROM   sys.Columns sc
    WHERE  Object_Id = OBJECT_ID(@Table)
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name)
    UNION 
    SELECT BatchType,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename_To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [ToolTip_SP],
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = OBJECT_ID(bic.[Table])
                AND sc.Name = bic.[Column]
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Columns_Insert](
               @BatchType         VARCHAR(50),
               @BatchLevel        CHAR(1),
               @Table             VARCHAR(100),
               @Column            VARCHAR(100),
               @Rename_To         VARCHAR(100),
               @Sequence          INT,
               @Lookup_SP         VARCHAR(1024),
               @Select_SP         VARCHAR(1024),
               @Validation_SP     VARCHAR(1024),
               @ToolTip_SP        VARCHAR(1024),
               @Hide              BIT,
               @ReadOnly          BIT,
               @ReadOnly_Existing BIT,
               @Filter_On         BIT,
               @Required          BIT,
               @Batch_ID          BIT,
               @Line_ID           BIT,
               @Distr_ID          BIT,
               @Status_Col        BIT,
               @Computed          BIT,
               @Format            VARCHAR(50),
               @Alignment         VARCHAR(50))
AS
  BEGIN
    SET NoCount  OFF;
            
    SELECT @Computed = Isnull(Is_Computed,0)
    FROM   sys.Columns c
    WHERE  c.Object_Id = Object_id(@Table)
           AND Name = @Column
                                                                  
    UPDATE [MoBatch].[BI_Columns]
    SET    [Table] = @Table,
           [Rename To] = @Rename_To,
           [Sequence] = @Sequence,
           [LookUp_SP] = @LookUp_SP,
           [Select_SP] = @Select_SP,
           [Validation_SP] = @Validation_SP,
           [ToolTip_SP] = @ToolTip_SP,
           [Hide] = @Hide,
           [ReadOnly] = @ReadOnly,
           [ReadOnly Existing] = @ReadOnly_Existing,
           [Filter On] = @Filter_On,
           [Required] = @Required,
           [Batch ID] = @Batch_ID,
           [Line ID] = @Line_ID,
           [Distr ID] = @Distr_ID,
           [Status Col] = @Status_Col,
           [Computed] = @Computed,
           [Format] = @Format,
           [Alignment] = @Alignment
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Column] = @Column
                                                                                     
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Columns]
                   (BatchType,
                    [BatchLevel],
                    [Table],
                    [Column],
                    [Rename To],
                    [Sequence],
                    [LookUp_SP],
                    [Select_SP],
                    [Validation_SP],
                    [ToolTip_SP],
                    [Hide],
                    [ReadOnly],
                    [ReadOnly Existing],
                    [Filter On],
                    [Required],
                    [Batch ID],
                    [Line ID],
                    [Distr ID],
                    [Status Col],
                    [Computed],
                    [Format],
                    [Alignment])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Column,
                    @Rename_To,
                    @Sequence,
                    @LookUp_SP,
                    @Select_SP,
                    @Validation_SP,
                    @ToolTip_SP,
                    @Hide,
                    @ReadOnly,
                    @ReadOnly_Existing,
                    @Filter_On,
                    @Required,
                    @Batch_ID,
                    @Line_ID,
                    @Distr_ID,
                    @Status_Col,
                    @Computed,
                    @Format,
                    @Alignment)
      END
                           
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert/update BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_ConfigureBatchGridProcs_Select](
           -- This stored procedure is used to populate the ConfigureBatchGrid Procs grid
           @BatchType VARCHAR(50),
           @BatchLevel CHAR(1))
AS
  BEGIN
    IF @BatchLevel = 'H'
      BEGIN
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'CalculateSP' [CallEvent],
                        'Row Calculate Procedure' [Stored_Procecure_Type],
                        [HeadCalculationSP] [SP_Name],
                        [HeadCalculationStatus] [On_Status],
                        'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ValidateSP' [CallEvent],
                        'Row Validate Procedure' [Stored_Procecure_Type],
                        [HeadValidationSP] [SP_Name],
                        [HeadValidationStatus] [On_Status],
                        'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ApproveSP' [CallEvent],
                        'Row Approve Procedure' [Stored_Procecure_Type],
                        [ApproveSP] [SP_Name],
                        [ApproveStatus] [On_Status],
                        'Executes when clicking Approve Button or Right-click entry / Approve.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ProcessSP' [CallEvent],
                        'Row Process Procedure' [Stored_Procecure_Type],
                        [ProcessSP] [SP_Name],
                        [ProcessStatus] [On_Status],
                        'Executes when clicking Process Button or Right-click entry / Process.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowSetupSP' [CallEvent],
                        'Row Setup Procedure' [Stored_Procecure_Type],
                        [HeadRowSetupSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for each entry when populating grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterLoadSP' [CallEvent],
                        'After Load Procedure' [Stored_Procecure_Type],
                        [HeadAfterLoadSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowSelectSP' [CallEvent],
                        'Row Select Procedure' [Stored_Procecure_Type],
                        [HeadRowSelectSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterSaveSP' [CallEvent],
                        'After Save Procedure' [Stored_Procecure_Type],
                        [HeadAfterSaveSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after saving the data in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterDeleteSP' [CallEvent],
                        'After Delete Procedure' [Stored_Procecure_Type],
                        [HeadAfterDeleteSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after deleting one or more rows from a grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'DefaultSP' [CallEvent],
                        'Default Procedure' [Stored_Procecure_Type],
                        [HeadDefaultSP] [SP_Name],
                        'N/A' [On_Status],
                        'Used to default cell values for new row being added.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'OverrideSP' [CallEvent],
                        'Override Procedure' [Stored_Procecure_Type],
                        [HeadOverrideSP] [SP_Name],
                        'N/A' [On_Status],
                        'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'CloseLinesSP' [CallEvent],
                        'After Closing Lines Procedure' [Stored_Procecure_Type],
                        [AfterCloseLinesSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for the batch header when returning after closing lines screen (E.g. return count of lines belonging to header).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
      END
    ELSE
      IF @BatchLevel = 'L'
        BEGIN
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CalculateSP' [CallEvent],
                          'Row Calculate Procedure' [Stored_Procecure_Type],
                          [LineCalculationSP] [SP_Name],
                          [LineCalculationStatus] [On_Status],
                          'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'ValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [LineValidationSP] [SP_Name],
                          [LineValidationStatus] [On_Status],
                          'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSetupSP' [CallEvent],
                          'Row Setup Procedure' [Stored_Procecure_Type],
                          [LineRowSetupSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for each entry when populating grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterLoadSP' [CallEvent],
                          'After Load Procedure' [Stored_Procecure_Type],
                          [LineAfterLoadSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSelectSP' [CallEvent],
                          'Row Select Procedure' [Stored_Procecure_Type],
                          [LineRowSelectSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterSaveSP' [CallEvent],
                          'After Save Procedure' [Stored_Procecure_Type],
                          [LineAfterSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after saving the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterDeleteSP' [CallEvent],
                          'After Delete Procedure' [Stored_Procecure_Type],
                          [LineAfterDeleteSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after deleting one or more rows from a grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'DefaultSP' [CallEvent],
                          'Default Procedure' [Stored_Procecure_Type],
                          [LineDefaultSP] [SP_Name],
                          'N/A' [On_Status],
                          'Used to default cell values for new row being added.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'OverrideSP' [CallEvent],
                          'Override Procedure' [Stored_Procecure_Type],
                          [LineOverrideSP] [SP_Name],
                          'N/A' [On_Status],
                          'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CloseDistrSP' [CallEvent],
                          'After Closing Distribution Procedure' [Stored_Procecure_Type],
                          [AfterCloseDistrSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for the batch line when returning after closing distribution screen (E.g. return count of distributions belonging to line).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
        END
      ELSE
        BEGIN
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CalculateSP' [CallEvent],
                          'Row Calculate Procedure' [Stored_Procecure_Type],
                          [DistrCalculationSP] [SP_Name],
                          [DistrCalculationStatus] [On_Status],
                          'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'ValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [DistrValidationSP] [SP_Name],
                          [DistrValidationStatus] [On_Status],
                          'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSetupSP' [CallEvent],
                          'Row Setup Procedure' [Stored_Procecure_Type],
                          [DistrRowSetupSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for each entry when populating grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterLoadSP' [CallEvent],
                          'After Load Procedure' [Stored_Procecure_Type],
                          [DistrAfterLoadSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSelectSP' [CallEvent],
                          'Row Select Procedure' [Stored_Procecure_Type],
                          [DistrRowSelectSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterSaveSP' [CallEvent],
                          'After Save Procedure' [Stored_Procecure_Type],
                          [DistrAfterSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after saving the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterDeleteSP' [CallEvent],
                          'After Delete Procedure' [Stored_Procecure_Type],
                          [DistrAfterDeleteSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after deleting one or more rows from a grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'DefaultSP' [CallEvent],
                          'Default Procedure' [Stored_Procecure_Type],
                          [DistrDefaultSP] [SP_Name],
                          'N/A' [On_Status],
                          'Used to default cell values for new row being added.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'OverrideSP' [CallEvent],
                          'Override Procedure' [Stored_Procecure_Type],
                          [DistrOverrideSP] [SP_Name],
                          'N/A' [On_Status],
                          'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
        END
  END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_ConfigureBatchGridProcs_Update](
           -- This stored procedure is used to update from the ConfigureBatchGrid Procs grid
           @BatchType VARCHAR(50),
           @BatchLevel            CHAR(1),
           @CallEvent             VARCHAR(50),
           @Stored_Procecure_Type VARCHAR(255),
           @SP_Name               VARCHAR(1024),
           @On_Status             VARCHAR(50),
           @Event_Description     VARCHAR(1024))
AS
  BEGIN
    IF @BatchLevel = 'H'
      BEGIN
        IF @CallEvent = 'CalculateSP'
          BEGIN
            UPDATE [MoBatch].bi_BatchTypes
            SET    [HeadCalculationSP] = @SP_Name,
                   [HeadCalculationStatus] = @On_Status
            WHERE  [BatchType] = @BatchType
          END
        ELSE
          IF @CallEvent = 'ValidateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [HeadValidationSP] = @SP_Name,
                     [HeadValidationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ApproveSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [ApproveSP] = @SP_Name,
                       [ApproveStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'ProcessSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [ProcessSP] = @SP_Name,
                         [ProcessStatus] = @On_Status
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'RowSetupSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [HeadRowSetupSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'AfterLoadSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [HeadAfterLoadSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'RowSelectSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [HeadRowSelectSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterSaveSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [HeadAfterSaveSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'AfterDeleteSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [HeadAfterDeleteSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'DefaultSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [HeadDefaultSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
                          ELSE
                            IF @CallEvent = 'OverrideSP'
                              BEGIN
                                UPDATE [MoBatch].bi_BatchTypes
                                SET    [HeadOverrideSP] = @SP_Name
                                WHERE  [BatchType] = @BatchType
                              END
                            ELSE
                              IF @CallEvent = 'CloseLinesSP'
                                BEGIN
                                  UPDATE [MoBatch].bi_BatchTypes
                                  SET    [AfterCloseLinesSP] = @SP_Name
                                  WHERE  [BatchType] = @BatchType
                                END
      END
    ELSE
      IF @BatchLevel = 'L'
        BEGIN
          IF @CallEvent = 'CalculateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [LineCalculationSP] = @SP_Name,
                     [LineCalculationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ValidateSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [LineValidationSP] = @SP_Name,
                       [LineValidationStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'RowSetupSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [LineRowSetupSP] = @SP_Name
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'AfterLoadSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [LineAfterLoadSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'RowSelectSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [LineRowSelectSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'AfterSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineAfterSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterDeleteSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [LineAfterDeleteSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'DefaultSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [LineDefaultSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'OverrideSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [LineOverrideSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
                          ELSE
                            IF @CallEvent = 'CloseDistrSP'
                              BEGIN
                                UPDATE [MoBatch].bi_BatchTypes
                                SET    [AfterCloseDistrSP] = @SP_Name
                                WHERE  [BatchType] = @BatchType
                              END
        END
      ELSE
        BEGIN
          IF @CallEvent = 'CalculateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [DistrCalculationSP] = @SP_Name,
                     [DistrCalculationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ValidateSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [DistrValidationSP] = @SP_Name,
                       [DistrValidationStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'RowSetupSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [DistrRowSetupSP] = @SP_Name
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'AfterLoadSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [DistrAfterLoadSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'RowSelectSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [DistrRowSelectSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'AfterSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrAfterSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterDeleteSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [DistrAfterDeleteSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'DefaultSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [DistrDefaultSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'OverrideSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [DistrOverrideSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
        END
  END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_ConfigureBatchGridDisplayValues_Select](
-- This stored procedure is used to populate the ConfigureBatchGrid Headers grid
@BatchType  VARCHAR(50),
@BatchLevel CHAR(1))
AS
  BEGIN
      IF @BatchLevel = 'H'
        BEGIN
            SELECT DISTINCT [BatchType],
                            @BatchLevel                                                                           [BatchLevel],
                            'Value1Descr'                                                                         [CallEvent],
                            'Display Value 1 Label'                                                               [Stored_Procedure_Type],
                            [HeadValue1Descr]                                                                     [Label_Text],
                            'The label to use for Display Value 1 (value to be added by other stored procedure).' [Event_Description]
            FROM   [MoBatch].bi_BatchTypes
            WHERE  [BatchType] = @BatchType
            UNION ALL
            SELECT DISTINCT [BatchType],
                            @BatchLevel                                                                           [BatchLevel],
                            'Value2Descr'                                                                         [CallEvent],
                            'Display Value 2 Label'                                                               [Stored_Procedure_Type],
                            [HeadValue2Descr]                                                                     [Label_Text],
                            'The label to use for Display Value 2 (value to be added by other stored procedure).' [Event_Description]
            FROM   [MoBatch].bi_BatchTypes
            WHERE  [BatchType] = @BatchType
            UNION ALL
            SELECT DISTINCT [BatchType],
                            @BatchLevel                                                                           [BatchLevel],
                            'Value3Descr'                                                                         [CallEvent],
                            'Display Value 3 Label'                                                               [Stored_Procedure_Type],
                            [HeadValue3Descr]                                                                     [Label_Text],
                            'The label to use for Display Value 3 (value to be added by other stored procedure).' [Event_Description]
            FROM   [MoBatch].bi_BatchTypes
            WHERE  [BatchType] = @BatchType
            UNION ALL
            SELECT DISTINCT [BatchType],
                            @BatchLevel                                                                           [BatchLevel],
                            'Value4Descr'                                                                         [CallEvent],
                            'Display Value 4 Label'                                                               [Stored_Procedure_Type],
                            [HeadValue4Descr]                                                                     [Label_Text],
                            'The label to use for Display Value 4 (value to be added by other stored procedure).' [Event_Description]
            FROM   [MoBatch].bi_BatchTypes
            WHERE  [BatchType] = @BatchType
        END
      ELSE
        IF @BatchLevel = 'L'
          BEGIN
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value1Descr'                                                                         [CallEvent],
                              'Display Value 1 Label'                                                               [Stored_Procedure_Type],
                              [LineValue1Descr]                                                                     [Label_Text],
                              'The label to use for Display Value 1 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
              UNION ALL
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value2Descr'                                                                         [CallEvent],
                              'Display Value 2 Label'                                                               [Stored_Procedure_Type],
                              [LineValue2Descr]                                                                     [Label_Text],
                              'The label to use for Display Value 2 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
              UNION ALL
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value3Descr'                                                                         [CallEvent],
                              'Display Value 3 Label'                                                               [Stored_Procedure_Type],
                              [LineValue3Descr]                                                                     [Label_Text],
                              'The label to use for Display Value 3 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
              UNION ALL
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value4Descr'                                                                         [CallEvent],
                              'Display Value 4 Label'                                                               [Stored_Procedure_Type],
                              [LineValue4Descr]                                                                     [Label_Text],
                              'The label to use for Display Value 4 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
          END
        ELSE
          BEGIN
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value1Descr'                                                                         [CallEvent],
                              'Display Value 1 Label'                                                               [Stored_Procedure_Type],
                              [DistrValue1Descr]                                                                    [Label_Text],
                              'The label to use for Display Value 1 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
              UNION ALL
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value2Descr'                                                                         [CallEvent],
                              'Display Value 2 Label'                                                               [Stored_Procedure_Type],
                              [DistrValue2Descr]                                                                    [Label_Text],
                              'The label to use for Display Value 2 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
              UNION ALL
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value3Descr'                                                                         [CallEvent],
                              'Display Value 3 Label'                                                               [Stored_Procedure_Type],
                              [DistrValue3Descr]                                                                    [Label_Text],
                              'The label to use for Display Value 3 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
              UNION ALL
              SELECT DISTINCT [BatchType],
                              @BatchLevel                                                                           [BatchLevel],
                              'Value4Descr'                                                                         [CallEvent],
                              'Display Value 4 Label'                                                               [Stored_Procedure_Type],
                              [DistrValue4Descr]                                                                    [Label_Text],
                              'The label to use for Display Value 4 (value to be added by other stored procedure).' [Event_Description]
              FROM   [MoBatch].bi_BatchTypes
              WHERE  [BatchType] = @BatchType
          END
  END</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_ConfigureBatchGridDisplayValues_Update](
-- This stored procedure is used to update from the ConfigureBatchGrid Procs grid
@BatchType             VARCHAR(50),
@BatchLevel            CHAR(1),
@CallEvent             VARCHAR(50),
@Stored_Procedure_Type VARCHAR(255),
@Label_Text            VARCHAR(1024),
@Event_Description     VARCHAR(1024))
AS
  BEGIN
      IF @BatchLevel = 'H'
        BEGIN
            IF @CallEvent = 'Value1Descr'
              BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [HeadValue1Descr] = @Label_Text
                  WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'Value2Descr'
                BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [HeadValue2Descr] = @Label_Text
                    WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'Value3Descr'
                  BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [HeadValue3Descr] = @Label_Text
                      WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'Value4Descr'
                    BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [HeadValue4Descr] = @Label_Text
                        WHERE  [BatchType] = @BatchType
                    END
        END
      ELSE
        IF @BatchLevel = 'L'
          BEGIN
              IF @CallEvent = 'Value1Descr'
                BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [LineValue1Descr] = @Label_Text
                    WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'Value2Descr'
                  BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [LineValue2Descr] = @Label_Text
                      WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'Value3Descr'
                    BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineValue3Descr] = @Label_Text
                        WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'Value4Descr'
                      BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [LineValue4Descr] = @Label_Text
                          WHERE  [BatchType] = @BatchType
                      END
          END
        ELSE
          BEGIN
              IF @CallEvent = 'Value1Descr'
                BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [DistrValue1Descr] = @Label_Text
                    WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'Value2Descr'
                  BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [DistrValue2Descr] = @Label_Text
                      WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'Value3Descr'
                    BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrValue3Descr] = @Label_Text
                        WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'Value4Descr'
                      BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [DistrValue4Descr] = @Label_Text
                          WHERE  [BatchType] = @BatchType
                      END
          END
  END</commandtext>
      <comment>NoLock + Override grid SQL</comment>
    </command>
  </Version>
  <Version number="1.1.36.0">
    <command>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_bi_Columns_Delete_Others] (
  @BatchType  VARCHAR(50),
  @BatchLevel CHAR(1),
  @Table      VARCHAR(100)
)
AS
  BEGIN
      DELETE [MoBatch].[BI_Columns]
      WHERE  [batchtype] = @BatchType
             AND [batchlevel] = @BatchLevel
             AND [table] &lt;&gt; @Table
  END</commandtext>
      <comment>Delete changed table entries</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_BatchTypes_Delete](
  -- ===========================================================
  -- Author:        R. Blomstrand
  -- Create date: 23/09/2008
  -- Description:   Used by MoBatch to delete batch types
  -- ===========================================================
  @BatchType VARCHAR(255)
)
AS
  BEGIN
      SET NoCount OFF;

      BEGIN TRANSACTION;

      DELETE FROM [MoBatch].[BI_Buttons]
      WHERE  [BatchType] = @BatchType

      DELETE FROM [MoBatch].[BI_Columns]
      WHERE  [BatchType] = @BatchType

      DELETE FROM [MoBatch].[BI_Tables]
      WHERE  [BatchType] = @BatchType

      DELETE [MoBatch].[BI_BatchTypes]
      WHERE  [BatchType] = @BatchType

      IF @@ERROR &gt; 0
        BEGIN
            RAISERROR ('Delete BI_BatchTypes Failed',
                       16,
                       1)

            ROLLBACK TRANSACTION

            RETURN 1
        END
      ELSE
        BEGIN
            COMMIT;
        END
  END</commandtext>
      <comment>Delete BI_Columns = BI_Buttons wth Batch Type</comment>
    </command>
  </Version>
  <Version number="1.1.37.0">
    <command>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_Rename_BatchType](
-- =============================================
-- Author:      Robert Blomstrand
-- Create date: 01/04/2010
-- Description: Renames Batch Type
-- =============================================
-- EXEC [MoBatch].[a_sp_bi_reName_BatchType] 'Contracts', 'Contract WIP', 'Admin'
  @Old_BatchType VARCHAR(128),
  @New_BatchType VARCHAR(128),
  @AdminRole     VARCHAR(128) = 'Admin'
)
AS
  BEGIN
      SET NoCount ON;

      -- Change batch type wherever referred to
      UPDATE MobAtch.[BI_Columns]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_BatchTypes]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Buttons]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_DM_Structure]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_DM_Structure_Cols]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_DM_Query]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Filters]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_GenericSearch]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Layout]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Locks]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_RPTCategories]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Tables]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      -- Create new access items including new batch type
      EXEC MobAtch.a_sp_bi_SetUp_New_Access

      -- Ensure that Admin Role assigned all access
      EXEC [MoBatch].[a_sp_bi_Assign_Specific_Access]
        @New_BatchType,
        @AdminRole
  END</commandtext>
      <comment>Development Tools</comment>
    </command>
  </Version>
  <Version number="1.1.38.0">
    <command>
      <commandtext>/*
Test Scripts:
DECLARE @nSQL VARCHAR(MAX)
EXEC MoBatch.a_sp_MoBatch_Generate_Upsert @nSQL OUTPUT, @TableName='Contract_Header_WIP'
SELECT @nSQL
*/
CREATE PROCEDURE MoBatch.a_sp_MoBatch_Generate_Upsert
-- Tool to generate an Upsert stored procedure for specified table
-- Can be used for example for batch types insert/update override
/*
Test Scripts:
DECLARE @nSQL VARCHAR(MAX)
EXEC MoBatch.a_sp_MoBatch_Generate_Upsert @nSQL OUTPUT, @TableName='Contract_Header_WIP'
SELECT @nSQL
*/
(
               @nSQL      VARCHAR(MAX)  OUTPUT,
               @TableName VARCHAR(512)  = 'Contract_Header_WIP')
AS
  BEGIN
    SET NoCount  ON;
    
    DECLARE  @nSQL1 VARCHAR(MAX),
             @nSQL2 VARCHAR(MAX),
             @nSQL3 VARCHAR(MAX),
             @nSQL4 VARCHAR(MAX),
             @nSQL5 VARCHAR(MAX),
             @nSQL6 VARCHAR(MAX),
             @nSQL7 VARCHAR(MAX)
    SET @nSQL1 = '
                  CREATE PROCEDURE dbo.a_sp_XXX_Upsert
                  ('
    SET @nSQL2 = '
                  )
                  AS
                  BEGIN
                   SET NOCOUNT ON;
                   --
                   DECLARE @Err INT = 0
                     , @Rows INT = 0;
                   --
                   --
                   WITH [Source]
                   (
                  '
    SET @nSQL3 = '
                   ) AS
                   (
                    SELECT
                  '
    SET @nSQL4 = '
                   )
                   MERGE XXX AS [Target]
                   USING [Source]
                   ON [Target].PK_ID = [Source].PK_ID
                   -- No match, which means this is a new record
                   WHEN NOT MATCHED THEN
                   INSERT 
                   (
                  '
    SET @nSQL5 = '
                   )
                   VALUES 
                   (
                  '
    SET @nSQL6 = '
                   )
                   -- Record found, so we can update the existing row
                   WHEN MATCHED THEN
                   UPDATE SET 
                  '
    SET @nSQL7 = '
                   ;
                   -- Return the AutoIncrement ID field
                   SELECT @Err = @@ERROR
                     , @Rows = @@ROWCOUNT
                     , @PK_ID = COALESCE(SCOPE_IDENTITY(),@PK_ID);
                 
                   RETURN @Err
                  END
                  '
                 
    -- Build the SQL Strings
    SELECT @nSQL1 = @nSQL1
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN '
                                @'
                                 + c.Name
                                 + ' '
                                 + Upper(t.Name)
                                 + CASE 
                                     WHEN t.Name = 'varchar'
                                     THEN '('
                                            + CONVERT(VARCHAR,c.Max_Length)
                                            + ')'
                                     ELSE ''
                                   END
                                 + CASE 
                                     WHEN i.Column_Id IS NOT NULL
                                     THEN ' OUTPUT'
                                     ELSE ''
                                   END
                          ELSE '
                                , @'
                                 + c.Name
                                 + ' '
                                 + Upper(t.Name)
                                 + CASE 
                                     WHEN t.Name = 'varchar'
                                     THEN '('
                                            + CONVERT(VARCHAR,c.Max_Length)
                                            + ')'
                                     ELSE ''
                                   END
                                 + CASE 
                                     WHEN i.Column_Id IS NOT NULL
                                     THEN ' OUTPUT'
                                     ELSE ''
                                   END
                        END,
           @nSQL2 = @nSQL2
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN '
                                '
                                 + c.Name
                          ELSE '
                                , '
                                 + c.Name
                        END,
           @nSQL3 = @nSQL3
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN '
                                @'
                                 + c.Name
                          ELSE '
                                , @'
                                 + c.Name
                        END,
           @nSQL4 = @nSQL4
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN ''
                          WHEN 2
                          THEN '
                                '
                                 + c.Name
                          ELSE '
                                , '
                                 + c.Name
                        END,
           @nSQL5 = @nSQL5
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN ''
                          WHEN 2
                          THEN '
                                [Source].'
                                 + c.Name
                          ELSE '
                                , [Source].'
                                 + c.Name
                        END,
           @nSQL6 = @nSQL6
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN ''
                          WHEN 2
                          THEN '
                                '
                                 + c.Name
                                 + ' = [Source].'
                                 + c.Name
                          ELSE '
                                , '
                                 + c.Name
                                 + ' = [Source].'
                                 + c.Name
                        END
    FROM     sys.Columns AS c WITH (NoLock)
             INNER JOIN sys.Types AS t WITH (NoLock)
               ON c.User_Type_Id = t.User_Type_Id
             INNER JOIN sys.Tables st WITH (NoLock)
               ON st.Object_Id = Object_Id(@TableName)
             LEFT OUTER JOIN sys.Identity_Columns i WITH (NoLock)
               ON st.Object_Id = i.Object_Id
                  AND c.Column_Id = i.Column_Id
    WHERE    c.Object_Id = Object_Id(@TableName)
    ORDER BY c.Column_Id;
    
    --
    DECLARE  @PK_ID VARCHAR(512)
                    
    SELECT   @PK_ID = c.Name
    FROM     sys.Columns AS c WITH (NoLock)
             INNER JOIN sys.Types AS t WITH (NoLock)
               ON c.User_Type_Id = t.User_Type_Id
             INNER JOIN sys.Tables st WITH (NoLock)
               ON st.Object_Id = Object_Id(@TableName)
             INNER JOIN sys.Identity_Columns i WITH (NoLock)
               ON st.Object_Id = i.Object_Id
                  AND c.Column_Id = i.Column_Id
    WHERE    c.Object_Id = Object_Id(@TableName)
    ORDER BY c.Column_Id;
    
    --
    SELECT @nSQL1 = REPLACE(@nSQL1,'XXX',@TableName),
           @nSQL2 = REPLACE(@nSQL2,'XXX',@TableName),
           @nSQL3 = REPLACE(@nSQL3,'XXX',@TableName),
           @nSQL4 = REPLACE(@nSQL4,'XXX',@TableName),
           @nSQL5 = REPLACE(@nSQL5,'XXX',@TableName),
           @nSQL6 = REPLACE(@nSQL6,'XXX',@TableName),
           @nSQL7 = REPLACE(@nSQL7,'XXX',@TableName)
                    
    --
    SELECT @nSQL1 = REPLACE(@nSQL1,'PK_ID',@PK_ID),
           @nSQL2 = REPLACE(@nSQL2,'PK_ID',@PK_ID),
           @nSQL3 = REPLACE(@nSQL3,'PK_ID',@PK_ID),
           @nSQL4 = REPLACE(@nSQL4,'PK_ID',@PK_ID),
           @nSQL5 = REPLACE(@nSQL5,'PK_ID',@PK_ID),
           @nSQL6 = REPLACE(@nSQL6,'PK_ID',@PK_ID),
           @nSQL7 = REPLACE(@nSQL7,'PK_ID',@PK_ID)
                    
    --
    PRINT @nSQL1
    
    PRINT @nSQL2
    
    PRINT @nSQL3
    
    PRINT @nSQL4
    
    PRINT @nSQL5
    
    PRINT @nSQL6
    
    PRINT @nSQL7
  --
  END</commandtext>
      <comment>Config development tool to create Override CRUD</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Tables ADD
	PreventAdd bit NULL,
	PreventUpdate bit NULL,
	PreventDelete bit NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Select](
               @BatchType  VARCHAR(50),
               @BatchLevel CHAR(1))
AS
  BEGIN
    IF @BatchLevel IS NULL 
        OR @BatchLevel = ''
      BEGIN
        SELECT [BatchLevel],
               [Table],
               [Qualifier],
               [UseNoLock],
               [PreventAdd],
               [PreventUpdate],
               [PreventDelete],
               [OverrideInsert],
               [OverrideUpdate],
               [OverrideDelete]
        FROM   [MoBatch].[BI_Tables] WITH (NOLOCK)
        WHERE  [BatchType] = @BatchType
      END
    ELSE
      BEGIN
        SELECT [BatchLevel],
               [Table],
               [Qualifier],
               [UseNoLock],
               [PreventAdd],
               [PreventUpdate],
               [PreventDelete],
               [OverrideInsert],
               [OverrideUpdate],
               [OverrideDelete]
        FROM   [MoBatch].[BI_Tables] WITH (NOLOCK)
        WHERE  [BatchType] = @BatchType
               AND [BatchLevel] = @BatchLevel
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Update](
               @BatchType      VARCHAR(50),
               @BatchLevel     CHAR(1),
               @Table          VARCHAR(100),
               @Qualifier      VARCHAR(2000),
               @UseNoLock      BIT,
               @PreventAdd     BIT,
               @PreventUpdate  BIT,
               @PreventDelete  BIT,
               @OverrideInsert VARCHAR(MAX),
               @OverrideUpdate VARCHAR(MAX),
               @OverrideDelete VARCHAR(MAX))
AS
  BEGIN
    UPDATE [MoBatch].[BI_Tables]
    SET    [Table] = @Table,
           [Qualifier] = @Qualifier,
           [UseNoLock] = @UseNoLock,
           [PreventAdd] = @PreventAdd,
           [PreventUpdate] = @PreventUpdate,
           [PreventDelete] = @PreventDelete,
           [OverrideInsert] = @OverrideInsert,
           [OverrideUpdate] = @OverrideUpdate,
           [OverrideDelete] = @OverrideDelete
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
                                                                                          
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Tables]
                   ([BatchType],
                    [BatchLevel],
                    [Table],
                    [Qualifier],
                    [UseNoLock],
                    [PreventAdd],
                    [PreventUpdate],
                    [PreventDelete],
                    [OverrideInsert],
                    [OverrideUpdate],
                    [OverrideDelete])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Qualifier,
                    @UseNoLock,
                    @PreventAdd,
                    @PreventUpdate,
                    @PreventDelete,
                    @OverrideInsert,
                    @OverrideUpdate,
                    @OverrideDelete)
      END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_New_Access]
-- This stored procedure is used to re-create all access permutations
-- To run: EXEC MoBatch.a_sp_BI_Setup_New_Access
AS
  BEGIN
    SET nocount  ON;
    SET xact_abort  ON;
    BEGIN TRANSACTION;
    ----------------------------------------------------------
    -- Temporarily disable constraint to allow deleting Access
    ----------------------------------------------------------
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access]

    -------------------------
    -- Delete existing access
    -------------------------
    DELETE [MoBatch].[BI_Access]

    ------------------------------
    -- Insert Standard Menu access
    ------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'menuBatchGrid',
           'New Batch Grid Menu Option'
    UNION ALL
    SELECT 'menuBatchEntry',
           'Batch Entry Menu Option'
    UNION ALL
    SELECT 'menuReports',
           'Configure Report Menus'
    UNION ALL
    SELECT 'menuConfiguration',
           'Configuration Menu Function'
    UNION ALL
    SELECT 'menuAccess',
           'Configure Access'
    UNION ALL
    SELECT 'menuBatchCategories',
           'Configure Batch Categories'
    UNION ALL
    SELECT 'menuBatchTypes',
           'Configure Batch Types'
    UNION ALL
    SELECT 'Batch Types Update',
           'Configure Batch Types - Update existing entries'
    UNION ALL
    SELECT 'menuBatchScreenSetup',
           'Configure Batch Screen Setup'
    UNION ALL
    SELECT 'Batch Screen Setup Update',
           'Configure Batch Screen Setup - Update existing entries'
    UNION ALL
    SELECT 'menuReportCategories',
           'Configure Report Categories'
    UNION ALL
    SELECT 'menuReportItems',
           'Configure Report Items'
    UNION ALL
    SELECT 'menuWizard',
           'Configure Wizard Facility'
    UNION ALL
    SELECT 'menuDataMining',
           'Configure Data Mining'
    UNION ALL
    SELECT 'menuAppSettings',
           'Configure Application Settings'
    UNION ALL
    SELECT 'menuReleaseLocks',
           'Release Batch Locks'

    -------------------------------------------------
    -- Insert Data Mining Button Access per BatchType
    -------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'DM '
             + [QueryCode] COLLATE sql_latin1_general_cp1_ci_as,
           'Data Mining - '
             + [QueryCode]
    FROM   [MoBatch].[BI_DM_Query]

    ------------------------------
    -- Insert Action Button access
    ------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' ActionButton '
			 + buttonlabel COLLATE sql_latin1_general_cp1_ci_as,
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Action Button '
			 + buttonlabel
	FROM   MoBatch.BI_Buttons

    -----------------------------------
    -- Insert Access for each BatchType
    -----------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype,
           batchtype
             + ' Access Screen'
    FROM   MoBatch.BI_BatchTypes

    -----------------------------------------------
    -- Insert batchtype access common to all levels
    -----------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Add',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Add new entries'
	FROM   MoBatch.BI_Tables WHERE ISNULL(PreventAdd, 0) &lt;&gt; 1
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Delete',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Delete existing entries'
	FROM   MoBatch.BI_Tables WHERE ISNULL(PreventDelete, 0) &lt;&gt; 1
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Update',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Update existing entries'
	FROM   MoBatch.BI_Tables WHERE ISNULL(PreventUpdate, 0) &lt;&gt; 1

    -----------------------------------------------------------
    -- Insert batchtype button access applicable to Header only
    -----------------------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + ' tsbApprove',
		   batchtype
			 + ' - Approve Batches'
	FROM   MoBatch.BI_BatchTypes
    UNION ALL
	SELECT batchtype
			 + ' tsbProcess',
		   batchtype
			 + ' - Process Batches'
	FROM   MoBatch.BI_BatchTypes

    ----------------------------------------------------
    -- Insert Access applicable to header and lines only
    ----------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype
             + ' tsbOpen',
           batchtype
             + ' - Open Lines Screen'
    FROM   MoBatch.BI_Tables
    WHERE BatchLevel = 'H'
	UNION
	    SELECT batchtype
             + ' Lines tsbOpen',
           batchtype
             + ' Lines - Open Distribution Screen'
    FROM   MoBatch.BI_Tables
    WHERE BatchLevel = 'L'

    ------------------------------------------------------
    -- Insert batchtype button access common to all levels
    ------------------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' tsbCalculate',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Calculate '
			 + (CASE 
				  WHEN batchlevel = 'H'
				  THEN ' Batches'
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
	FROM   MoBatch.BI_Tables
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' tsbValidate',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Validate '
			 + (CASE 
				  WHEN batchlevel = 'H'
				  THEN ' Batches'
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
	FROM   MoBatch.BI_Tables

    --------------------------------
    -- Insert report category access
    --------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'Rpt Cat '
             + rptcategoryid COLLATE sql_latin1_general_cp1_ci_as,
           'Report Category - '
             + rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_rptcategories

    -------------------------------
    -- Insert batch category access
    -------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'Batch Cat '
             + batchcatcd COLLATE sql_latin1_general_cp1_ci_as,
           'Batch Category - '
             + batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_batchcategory
    WHERE  batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */

	-------------------------------------------------------------
    -- Delete existing roles linked to access that does not exist
	-------------------------------------------------------------
    DELETE r
    FROM   [MoBatch].[BI_RoleAccess] r
    WHERE  NOT EXISTS (SELECT 'x'
                       FROM   [MoBatch].[BI_Access] a
                       WHERE  a.[AccessId] = r.[AccessId])

    ------------------------------------------------
    -- Re-enable constraint to allow deleting Access
    ------------------------------------------------
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    WITH CHECK ADD CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY ( [AccessId] ) REFERENCES [MoBatch].[BI_Access]([AccessId])

    ALTER TABLE [MoBatch].[BI_RoleAccess]
     CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    COMMIT;

    RAISERROR (N'[MoBatch].[BI_Access]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
  END</commandtext>
      <comment>Ability to prevent add/update/delete batch type+level</comment>
    </command>
  </Version>
  <Version number="1.1.40.0">
    <command>
      <commandtext>UPDATE MoBatch.BI_Tables
        set [Table] = '[dbo].[' + [Table] + ']'
        where CHARINDEX('.', [Table]) = 0</commandtext>
      <commandtext>UPDATE MoBatch.BI_Columns
        SET [Table] = '[dbo].[' + [Table] + ']'
        WHERE CHARINDEX('.', [Table]) = 0</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Tables]
AS
BEGIN
  SELECT ' ' Name
  UNION
  SELECT '[' + S.name + '].[' + T.Name + ']'
  FROM   sys.Tables T
  INNER JOIN sys.schemas S
  ON T.schema_id = S.schema_id
  WHERE  Substring(T.Name,1,3) &lt;&gt; 'BI_'
  AND T.Name &lt;&gt; 'sysdiagrams'
  UNION
  SELECT '[' + S.name + '].[' + V.Name + ']'
  FROM   sys.VIEWS V
  INNER JOIN sys.schemas S
  ON V.schema_id = S.schema_id
END</commandtext>
      <comment>Allowing for multi-schema support.</comment>
    </command>
  </Version>
  <Version number="1.1.44.0">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_Validate_sp](
  -- EXEC MoBatch.a_sp_bi_Validate_sp 'a_sp_sBi_CtrlL_H_CustName'
  @SP VARCHAR(100)
)
AS
  BEGIN
      DECLARE @Count INT
      DECLARE @Schema VARCHAR(50),
              @SPOnly VARCHAR(50)

      IF CharIndex('.', @SP) &gt; 0
        BEGIN
            SET @Schema = IsNull(LEFT(@SP, CharIndex('.', @SP) - 1), 'dbo')
            SET @SPOnly = IsNull(RIGHT(@SP, len(@SP) - CharIndex('.', @SP)), @SP)
        END
      ELSE
        BEGIN
            SET @SPOnly = @SP
            SET @Schema = 'dbo'
        END

      SELECT @Count = COUNT(*)
      FROM   sys.Procedures p
             INNER JOIN sys.scHemAs ss WITH (NoLock)
               ON ss.Name = @Schema
      WHERE  p.Name = @SPOnly

      IF @Count = 0
        BEGIN
            SELECT Parameter = 'INVALID SP'
        END
      ELSE
        BEGIN
            SELECT Parameter = ParameterName + ' (' + rTrim(TypeName + ' ' + CAST(ParameterSize AS VARCHAR)) + ')'
            FROM   [MoBatch].bi_sp_ParameterInfo
            WHERE  spName = @SP
            ORDER  BY ParameterId
        END
  END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_BI_Document_Summary]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_BI_Document_Summary]</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_BI_Replace_BatchType_Config]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_BI_Replace_BatchType_Config]</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_BI_Setup_New_Columns]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_BI_Setup_New_Columns]</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_BI_Rename_BatchType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_BI_Rename_BatchType]</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_BI_Setup_StoredProcedures]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_BI_Setup_StoredProcedures]</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_GrantRolePermissions_MoBatch]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_GrantRolePermissions_MoBatch]</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_MoBatch_Generate_Upsert]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_MB_Generate_Upsert]</commandtext>
      <commandtext>IF  NOT EXISTS (SELECT * FROM sys.schemas WHERE name = N'MoBatchDev')
BEGIN
	exec('CREATE SCHEMA [MoBatchDev] AUTHORIZATION [dbo]')
END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_Document_Summary]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatch].[a_sp_BI_Document_Summary]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_BI_Document_Summary]
-- Provides in output a summary of the installation
-- EXEC [MoBatch].[a_sp_BI_Document_Summary]
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NoCount  ON;
                        
    --=========================================
    -- Create temp table containing report data
    --=========================================
    CREATE TABLE #MobAtch_Configuration (
      [BatchCatCd]   VARCHAR(100),
      [BatchType]    VARCHAR(100),
      [BatchLevel]   INT,
      [ListSequence] INT,
      [ColumnID]     INT,
      [Section]      VARCHAR(100),
      [Text]         VARCHAR(2040))
        
    DECLARE  @ListSequence INT
                                                                                                                                                  
    --=================
    -- Batch Categories
    --=================
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Reflect Opening separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Categories
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = 'Batch Category : '
                      + [BatchCatDescr]
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                                                                                                                           
    -- Reflect Closing separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
                                                  
    --============
    -- Batch Types
    --============
    -- Reflect Opening separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Types
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    BatchType : '
                      + [BatchType]
                      + (CASE 
                           WHEN [AutoDrill] = 1
                           THEN ' (with auto-drilldown selected)'
                           ELSE ''
                         END)
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    -- Reflect Closing separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
                                                  
    --=============
    -- Batch Levels
    --=============
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Dashes line before levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- List all batch levels per batch types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        Batch Level : '
                      + (CASE 
                           WHEN [BatchLevel] = 'H'
                           THEN 'Header'
                           WHEN [BatchLevel] = 'L'
                           THEN 'Lines'
                           WHEN [BatchLevel] = 'D'
                           THEN 'Distribution'
                           ELSE 'Unknown'
                         END)
                      + ' - Table: '
                      + [Table]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- Dashes line after levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    --===============
    -- Display Values
    --===============
    -------------------------------
    -- Reflect Display Values title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Display Values',
           [Text] = '            Special Display Values (top of screen) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
                                                                                                                                                                          
    -- Header (Display Value)
    -- Display Value #1 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + HeadValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue1descr IS NOT NULL 
           AND HeadValue1descr &lt;&gt; ''
    -- Display Value #2 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + HeadValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue2descr IS NOT NULL 
           AND HeadValue2descr &lt;&gt; ''
    -- Display Value #3 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + HeadValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue3descr IS NOT NULL 
           AND HeadValue3descr &lt;&gt; ''
    -- Display Value #4 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + HeadValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue4descr IS NOT NULL 
           AND HeadValue4descr &lt;&gt; ''
                                                                                                                                                                                            
                                                                                                                                                                                            
    -- Lines (Display Value)
    -- Display Value #1 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + LineValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue1descr IS NOT NULL 
           AND LineValue1descr &lt;&gt; ''
    -- Display Value #2 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + LineValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue2descr IS NOT NULL 
           AND LineValue2descr &lt;&gt; ''
    -- Display Value #3 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + LineValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue3descr IS NOT NULL 
           AND LineValue3descr &lt;&gt; ''
    -- Display Value #4 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + LineValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue4descr IS NOT NULL 
           AND LineValue4descr &lt;&gt; ''
                                                                                                                                                                                                   
    -- Distribution (Display Value)
    -- Display Value #1 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + dIstrValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue1descr IS NOT NULL 
           AND dIstrValue1descr &lt;&gt; ''
    -- Display Value #2 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + dIstrValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue2descr IS NOT NULL 
           AND dIstrValue2descr &lt;&gt; ''
    -- Display Value #3 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + dIstrValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue3descr IS NOT NULL 
           AND dIstrValue3descr &lt;&gt; ''
    -- Display Value #4 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + dIstrValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue4descr IS NOT NULL 
           AND dIstrValue4descr &lt;&gt; ''
                                                                                                                                                                                                  
                                                                                                                                                                                                  
    --============================================
    -- Special Buttons (and right-click) Processes
    --============================================
    -------------------------------------------
    -- Reflect Special Processing buttons title
    -------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Processing Buttons',
           [Text] = '            Special Processing Buttons (top of screen + right-click) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    ------------------------------
    -- Validation buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + HeadValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadValidationStatus IS NULL 
                                 OR HeadValidationStatus = ''
                           THEN 'ALL'
                           ELSE HeadValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValidationsp IS NOT NULL 
           AND HeadValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Lines (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + LineValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineValidationStatus IS NULL 
                                 OR LineValidationStatus = ''
                           THEN 'ALL'
                           ELSE LineValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValidationsp IS NOT NULL 
           AND LineValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Distribution (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + dIstrValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN dIstrValidationStatus IS NULL 
                                 OR dIstrValidationStatus = ''
                           THEN 'ALL'
                           ELSE dIstrValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValidationsp IS NOT NULL 
           AND dIstrValidationsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    -------------------------------
    -- Calculation buttons (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + HeadCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadCalculationStatus IS NULL 
                                 OR HeadCalculationStatus = ''
                           THEN 'ALL'
                           ELSE HeadCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadCalculationsp IS NOT NULL 
           AND HeadCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Lines (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + LineCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineCalculationStatus IS NULL 
                                 OR LineCalculationStatus = ''
                           THEN 'ALL'
                           ELSE LineCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineCalculationsp IS NOT NULL 
           AND LineCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Distribution (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + dIstrCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN [dIstrCalculationStatus] IS NULL 
                                 OR [dIstrCalculationStatus] = ''
                           THEN 'ALL'
                           ELSE dIstrCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrCalculationsp IS NOT NULL 
           AND dIstrCalculationsp &lt;&gt; ''
                                                                                                                                                                                                              
                                                                                                                                                                                                              
    ---------------------------
    -- Approve buttons (if any)
    ---------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Approve Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Approve SP: `'
                      + Approvesp
                      + '` (for '
                      + (CASE 
                           WHEN ApproveStatus IS NULL 
                                 OR ApproveStatus = ''
                           THEN 'ALL'
                           ELSE ApproveStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Approvesp IS NOT NULL 
           AND Approvesp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    ------------------------------
    -- Processing buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Processing Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Process SP: `'
                      + Processsp
                      + '` (for '
                      + (CASE 
                           WHEN ProcessStatus IS NULL 
                                 OR ProcessStatus = ''
                           THEN 'ALL'
                           ELSE ProcessStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Processsp IS NOT NULL 
           AND Processsp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    -----------------------------------------------------
    -- Special Action buttons (All levels where existing)
    -----------------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                '
                      + ButtonLabel
                      + ' SP: `'
                      + Buttonsp
                      + '` (for '
                      + (CASE 
                           WHEN [ButtonStatus] IS NULL 
                                 OR [ButtonStatus] = ''
                           THEN 'ALL'
                           ELSE ButtonStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_Buttons b WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = b.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --=================================
    -- Special Events Stored Procedures
    --=================================
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    ------------------------------------------
    -- Reflect Special Processing Events title
    ------------------------------------------
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Events',
           [Text] = '            Special Events : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --------------------------
    -- Default Events (if any)
    --------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + HeadDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadDefaultsp IS NOT NULL 
           AND HeadDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Lines (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + LineDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineDefaultsp IS NOT NULL 
           AND LineDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Distributions (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + dIstrDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrDefaultsp IS NOT NULL 
           AND dIstrDefaultsp &lt;&gt; ''
                                                                                                                                                                                               
                                                                                                                                                                                      
    ----------------------------              
    -- Row Setup Events (if any)
    ----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + HeadRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSetUpsp IS NOT NULL 
           AND HeadRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + LinerowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSetUpsp IS NOT NULL 
           AND LinerowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + dIstrRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSetUpsp IS NOT NULL 
           AND dIstrRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                            
    -----------------------------
    -- After Load Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + HeadAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterLoadsp IS NOT NULL 
           AND HeadAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + LineAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterLoadsp IS NOT NULL 
           AND LineAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + dIstRafterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterLoadsp IS NOT NULL 
           AND dIstRafterLoadsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                  
    -----------------------------
    -- Row Select Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + HeadRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSelectsp IS NOT NULL 
           AND HeadRowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + LinerowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSelectsp IS NOT NULL 
           AND LinerowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + dIstrRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSelectsp IS NOT NULL 
           AND dIstrRowSelectsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    --------------------------------------
    -- Supervisor Override Access (if any)
    --------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + HeadOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadOverridesp IS NOT NULL 
           AND HeadOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + LineOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineOverridesp IS NOT NULL 
           AND LineOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + dIstRoverRidesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRoverRidesp IS NOT NULL 
           AND dIstRoverRidesp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                                          
    -----------------------------
    -- After Save Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + HeadAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterSavesp IS NOT NULL 
           AND HeadAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + LineAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterSavesp IS NOT NULL 
           AND LineAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + dIstRafterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterSavesp IS NOT NULL 
           AND dIstRafterSavesp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    -----------------------------
    -- After Delete Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + HeadAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterDeletesp IS NOT NULL 
           AND HeadAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + LineAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterDeletesp IS NOT NULL 
           AND LineAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Distributions (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + dIstRafterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterDeletesp IS NOT NULL 
           AND dIstRafterDeletesp &lt;&gt; ''
                                                                                                                                                                                                                       
                                                                                                                                                                                                                            
    ------------------------------------
    -- After Close Child Events (if any)
    ------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Lines SP: `'
                      + AfterCloseLinessp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterCloseLinessp IS NOT NULL 
           AND AfterCloseLinessp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Distributions SP: `'
                      + AfterClosedIstrsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterClosedIstrsp IS NOT NULL 
           AND AfterClosedIstrsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    --========
    -- Columns
    --========
    -------------------------------
    -- Reflect Columns title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Columns',
           [Text] = '            Columns : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    ----------------------
    -- Reflect each column
    ----------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT   [BatchCatCd] = [BatchCatCd],
             [BatchType] = bt.[BatchType],
             [BatchLevel] = (CASE 
                               WHEN [BatchLevel] = 'H'
                               THEN 1
                               WHEN [BatchLevel] = 'L'
                               THEN 2
                               WHEN [BatchLevel] = 'D'
                               THEN 3
                               ELSE 4
                             END),
             [ListSequence] = @ListSequence,
             [ColumnId] = c.[Sequence],
             [Section] = 'Columns',
             [Text] = REPLACE(REPLACE(REPLACE('                '
                                                + [Column]
                                                + ' ('
                                                + (CASE 
                                                     WHEN NULLIF([Rename To],'') IS NOT NULL
                                                     THEN ', Renamed to `'
                                                            + [Rename To]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Required],0) = 1
                                                     THEN ', Required '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Hide],0) = 1
                                                     THEN ', Hidden '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly],0) = 1
                                                     THEN ', ReadOnly '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly Existing],0) = 1
                                                     THEN ', ReadOnly Existing'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Status Col],0) = 1
                                                     THEN ', Status Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Computed],0) = 1
                                                     THEN ', Computed Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Format],'') IS NOT NULL
                                                     THEN ', Format" `'
                                                            + [Format]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Alignment],'NotSet') &lt;&gt; 'NotSet'
                                                     THEN ', Alignment: `'
                                                            + [Alignment]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Lookup_SP],'') IS NOT NULL
                                                     THEN ', Combobox SP: `'
                                                            + [Lookup_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Select_SP],'') IS NOT NULL
                                                     THEN ', CTRL-L SP: `'
                                                            + [Select_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Validation_SP],'') IS NOT NULL
                                                     THEN ', Cell Validation SP: `'
                                                            + [Validation_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Tooltip_SP],'') IS NOT NULL
                                                     THEN ', Tooltip SP: `'
                                                            + [Tooltip_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + ')',' ()',''),'(, ','('),
                              ' )',')')
    FROM     MobAtch.bi_Columns c
             INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
               ON bt.BatchType = c.BatchType
    ORDER BY c.[Sequence]
                                                              
    --=========================
    -- Remove obsolete headings
    --=========================
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Display Values'
    WHERE  ct.Section = 'Title Display Values'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Processing Buttons'
    WHERE  ct.Section = 'Title Special Processing Buttons'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Events'
    WHERE  ct.Section = 'Title Special Events'
           AND cl.[BatchType] IS NULL
                              
    --================================
    -- Select compiled data for output
    --================================
    SELECT [Text]
    FROM     #MobAtch_Configuration
    ORDER BY [BatchCatCd],
             [BatchType],
             [BatchLevel],
             [ListSequence],
             [ColumnId]
                          
    --=================================
    -- Drop temp table after completion
    --=================================
    DROP TABLE #MobAtch_Configuration
        
  END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_Replace_BatchType_Config]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatch].[a_sp_BI_Replace_BatchType_Config]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_BI_Replace_BatchType_Config] 
-- =============================================
-- Author:        R Blomstrand
-- Create date:  03/06/2009
-- Description:   Generates SQL command required to replace batch type
--               configuration settings against a specified batch type. 
--               Also rebuilds all referenced SP info
-- NOTE:         Requires SP sp_generate_inserts to exist in Master!
-- Instructions: Run this SP specifying the relevant batch type as a parameter
--               from the database with the updated configuration. Example:
--                    EXEC a_sp_BI_Replace_BatchType_Config 'Invoices'
--               Copy the SQL commands output to Results and run these on the
--               database that one wishes to update.
-- EXEC [MoBatchDev].[a_sp_BI_Replace_BatchType_Config] 'Invoices'
-- =============================================
      @BatchType varchar(50) = 'XXX'
AS
BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;

      PRINT 'Creating Table'
      -- Create temp table to use to generate the SQL commands (will be selected from at end)
      create table #sp_replacebatch (
        SQLCommand      varchar(MAX))

      DECLARE @FromCommand VARCHAR(256)

      -- Generate SQL commands to delete the existing config data for the specified batch type
      PRINT 'Delete BI_Buttons Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Buttons where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_Columns Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Columns where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_Tables Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Tables where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_BatchTypes Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + '''')

      DECLARE @BatchCatCd VARCHAR(255)
      SELECT @BatchCatCd = BatchCatcd
      FROM   MobAtch.bi_BatchTypes bt
      WHERE  bt.BatchType = @BatchType 
      IF @BatchCatCd IS NOT NULL AND @BatchCatCd &lt;&gt; '' BEGIN
            PRINT 'Insert from BI_BatchCategory Table'
            SET @FromCommand = 'from MoBatch.BI_BatchCategory where EXISTS (SELECT 0 FROM MoBatch.BI_BatchTypes bt WHERE bt.[BatchCatCd] = BI_BatchCategory.BatchCatCd and bt.BatchType = ''' + @BatchType + ''')'
            insert into #sp_replacebatch execute sp_generate_inserts 'BI_BatchCategory', @from = @FromCommand, @owner='MoBatch'
            UPDATE #sp_replacebatch SET SQLCommand = 'IF NOT EXISTS (SELECT 0 FROM MoBatch.BI_BatchCategory WHERE [BatchCatCd] = ''' + @BatchCatCd + ''') ' + SQLCommand WHERE SQLCommand like 'INSERT \[MoBatch\]\.\[BI_BatchCategory\]%' ESCAPE '\'
      END
      
      -- Now generate insert commands for specified batch type
      PRINT 'Set From BI_BatchTypes Table'
      SET @FromCommand = 'from MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_BatchTypes', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Tables Table'
      SET @FromCommand = 'from MoBatch.BI_Tables where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Tables', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Columns Table'
      SET @FromCommand = 'from MoBatch.BI_Columns where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Columns', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Buttons Table'
      SET @FromCommand = 'from MoBatch.BI_Buttons where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Buttons', @from = @FromCommand, @owner='MoBatch'

      -- Finally generate command to details of all SPs used against the specified batch type
      PRINT 'a_sp_BI_Setup_StoredProcedures'
      insert into #sp_replacebatch values ('EXEC MoBatch.a_sp_BI_Setup_StoredProcedures')

      -- Output everything from temp table for user
      PRINT 'Select all'
      select * from #sp_replacebatch
      
      -- And frop the temp table as finished
      PRINT 'Drop Table'
      drop table #sp_replacebatch
END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_Setup_New_Columns]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatch].[a_sp_BI_Setup_New_Columns]</commandtext>
      <commandtext>CREATE PROC [MoBatchDev].[a_sp_BI_Setup_New_Columns]
-- This stored procedure adds to MoBatch.BI_Columns any new columns added to 
-- tables referenced by Batch Types (where such column is missing)
-- This is useful when using an SQL script to alter the referenced tables as one
-- can then just execute this SP afterwards without having to save the batch type
-- to recognize the new column(s).
-- Remember that if the SQL script also needs to adjust any of the properties stored
-- in BI_Columns, then this should be updated after executing this SP (or else 
-- nothing yet to update).

-- To run: EXEC MoBatch.a_sp_BI_Setup_New_Columns
AS
  BEGIN
    SET NoCount  ON;
    SET xAct_Abort  ON;
    
    INSERT INTO MobAtch.bi_Columns
               ([Batchtype],
                [Batchlevel],
                [Table],
                [Column],
                [Rename To],
                [Sequence],
                [LookUp_SP],
                [Select_SP],
                [Validation_SP],
                [Hide],
                [ReadOnly],
                [ReadOnly Existing],
                [Filter On],
                [Required],
                [Batch ID],
                [Line ID],
                [Distr ID],
                [Status Col],
                [Computed],
                [Format],
                [Alignment],
                [ToolTip_SP])
    SELECT t.[BatchType] [Batchtype],
           t.[BatchLevel] [Batchlevel],
           t.[Table] [Table],
           Name [Column],
           '' [Rename To],
           Column_Id [Sequence],
           '' [LookUp_SP],
           '' [Select_SP],
           '' [Validation_SP],
           0 [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           '' [Format],
           'NotSet' [Alignment],
           NULL [ToolTip_SP]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN sys.Columns sc WITH (NOLOCK)
             ON sc.Object_Id = OBJECT_ID(t.[Table])
           LEFT OUTER JOIN [MoBatch].bi_Columns bic WITH (NOLOCK)
             ON bic.BatchType = t.BatchType
                AND bic.[BatchLevel] = t.BatchLevel
                AND bic.[Table] = t.[Table]
                AND bic.[Column] = sc.Name
    WHERE  bic.[Column] IS NULL
           
  END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_Rename_BatchType]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatch].[a_sp_BI_Rename_BatchType]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_BI_Rename_BatchType](
-- =============================================
-- Author:      Robert Blomstrand
-- Create date: 01/04/2010
-- Description: Renames Batch Type
-- =============================================
-- EXEC [MoBatch].[a_sp_bi_reName_BatchType] 'Contracts', 'Contract WIP', 'Admin'
  @Old_BatchType VARCHAR(128),
  @New_BatchType VARCHAR(128),
  @AdminRole     VARCHAR(128) = 'Admin'
)
AS
  BEGIN
      SET NoCount ON;

      -- Change batch type wherever referred to
      UPDATE MobAtch.[BI_Columns]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_BatchTypes]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Buttons]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_DM_Structure]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_DM_Structure_Cols]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_DM_Query]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Filters]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_GenericSearch]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Layout]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Locks]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_RPTCategories]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      UPDATE MobAtch.[BI_Tables]
      SET    [BatchType] = @New_BatchType
      WHERE  [BatchType] = @Old_BatchType

      -- Create new access items including new batch type
      EXEC MobAtch.a_sp_bi_SetUp_New_Access

      -- Ensure that Admin Role assigned all access
      EXEC [MoBatch].[a_sp_bi_Assign_Specific_Access]
        @New_BatchType,
        @AdminRole
  END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatch].[a_sp_BI_Setup_StoredProcedures]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatch].[a_sp_BI_Setup_StoredProcedures]</commandtext>
      <commandtext>CREATE PROC [MoBatchDev].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ToolTip_SP sp_name
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ButtonSp sp_name
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT REPLACE(reporturl, 'GRID:','') sp_name
    FROM   [MoBatch].bi_reports
    WHERE  reporturl like 'GRID:%'
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name)&gt;0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatch].[a_sp_GrantRolePermissions_MoBatch]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatch].[a_sp_GrantRolePermissions_MoBatch]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_GrantRolePermissions_MoBatch](
-- ====================================================================================
-- Author:        R. Blomstrand
-- Create date:   09/03/2010
-- Description:   Assign or revoke access for MoBatch usage to a given role (by default 
--                MoBatchRole). This provides SELECT/INSERT/DELETE/UPDATE access to 
--                tables and views, and EXECUTE access to stored procedures
--                Parameters as follows;
--                  Param 1: The name of the role to apply to (default Public)
--                  Param 2: 0 to grant access (default)
--                           1 to revoke access
--                  Param 3: 0 to only apply to objects in MoBatch schema (default)
--                           1 to apply to all objects in database
--                  Param 4: Pattern to match in non-MoBatch tables/views (default %)
--                  Param 5: Pattern to match in non-MoBatch stored procedures (default %)
-- Samples of execution:
--   Grant access to Mobatch schema objects (only) to role Public
--       EXEC  [MoBatch].a_sp_GrantRolePermissions_MoBatch
--   Revoke access to Mobatch schema objects (only) to role Public
--       EXEC  [MoBatch].a_sp_GrantRolePermissions_MoBatch 'Public', 1, 1
--   Grant access to all schema objects to role MoBatchRole where non-MoBatch tables/views
--   contain 'CustomerRegio' and stored procedures beginning with 'a_sp_UTI'
--       EXEC  [MoBatch].a_sp_GrantRolePermissions_MoBatch 'MoBatchRole', 0, 0, 'CustomerRegio%', 'a_sp_UTI%'
-- ====================================================================================
               @Role              VARCHAR(50)  = 'Public',
               @RevokeAccess      INT  = 0,
               @MoBatchOnly       INT  = 1,
               @TableMatchPattern VARCHAR(100) = '%',
               @SpMatchPattern    VARCHAR(100) = '%'
               )
AS
  BEGIN
    -- Determine whether to Grant or revoke based on parameter
    DECLARE  @Action VARCHAR(50)
    IF @RevokeAccess = 1
      BEGIN
        SELECT @Action = 'REVOKE'
      END
    ELSE
      BEGIN
        SELECT @Action = 'GRANT'
      END
    DECLARE  @buffer VARCHAR(MAX)
	SELECT   @buffer = IsNull(@buffer
								+ ';'
								+ CHAR(13)
								+ CHAR(10),'')
						 + CASE 
							 WHEN TYPE IN ('U','V')
							 THEN @Action
									+ ' SELECT, INSERT, UPDATE, DELETE ON ['
									+ s.Name
									+ '].['
									+ o.Name
									+ '] TO ['
									+ @Role
									+ ']'
							 WHEN TYPE = 'P'
							 THEN @Action
									+ ' EXECUTE ON ['
									+ s.Name
									+ '].['
									+ o.Name
									+ '] TO ['
									+ @Role
									+ ']'
						   END
	FROM     sys.Objects o
			 INNER JOIN sys.scHemAs s
			   ON o.scHema_Id = s.scHema_Id
	WHERE    ((o.TYPE IN ('U','V')
			   AND (s.Name = 'MoBatch' 
			         OR o.name = 'DataBaseProperties'
					 OR o.Name LIKE @TableMatchPattern))
			   OR (o.TYPE = 'P'
				   AND (s.Name = 'MoBatch'
						 OR o.Name LIKE @SpMatchPattern)))
			 AND (@MoBatchOnly = 0
				   OR s.Name = 'MoBatch')
	ORDER BY TYPE

    --PRINT @Buffer
    EXEC( @Buffer)
  END</commandtext>
      <commandtext>IF EXISTS (SELECT *
           FROM   sys.Objects
           WHERE  Object_Id = Object_Id(N'[MoBatch].[a_sp_MoBatch_Generate_Upsert]')
                  AND TYPE IN ( N'P', N'PC' ))
  DROP PROCEDURE [MoBatch].[a_sp_MoBatch_Generate_Upsert]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_mb_Generate_Upsert]
-- Tool to generate an Upsert stored procedure for specified table
-- Can be used for example for batch types insert/update override
/*
Test Scripts:
DECLARE @nSQL VARCHAR(MAX)
EXEC MoBatch.a_sp_MoBatch_Generate_Upsert @nSQL OUTPUT, @TableName='Contract_Header_WIP'
SELECT @nSQL
*/
(
               @nSQL      VARCHAR(MAX)  OUTPUT,
               @TableName VARCHAR(512)  = 'Contract_Header_WIP')
AS
  BEGIN
    SET NoCount  ON;
    
    DECLARE  @nSQL1 VARCHAR(MAX),
             @nSQL2 VARCHAR(MAX),
             @nSQL3 VARCHAR(MAX),
             @nSQL4 VARCHAR(MAX),
             @nSQL5 VARCHAR(MAX),
             @nSQL6 VARCHAR(MAX),
             @nSQL7 VARCHAR(MAX)
    SET @nSQL1 = '
                  CREATE PROCEDURE dbo.a_sp_XXX_Upsert
                  ('
    SET @nSQL2 = '
                  )
                  AS
                  BEGIN
                   SET NOCOUNT ON;
                   --
                   DECLARE @Err INT = 0
                     , @Rows INT = 0;
                   --
                   --
                   WITH [Source]
                   (
                  '
    SET @nSQL3 = '
                   ) AS
                   (
                    SELECT
                  '
    SET @nSQL4 = '
                   )
                   MERGE XXX AS [Target]
                   USING [Source]
                   ON [Target].PK_ID = [Source].PK_ID
                   -- No match, which means this is a new record
                   WHEN NOT MATCHED THEN
                   INSERT 
                   (
                  '
    SET @nSQL5 = '
                   )
                   VALUES 
                   (
                  '
    SET @nSQL6 = '
                   )
                   -- Record found, so we can update the existing row
                   WHEN MATCHED THEN
                   UPDATE SET 
                  '
    SET @nSQL7 = '
                   ;
                   -- Return the AutoIncrement ID field
                   SELECT @Err = @@ERROR
                     , @Rows = @@ROWCOUNT
                     , @PK_ID = COALESCE(SCOPE_IDENTITY(),@PK_ID);
                 
                   RETURN @Err
                  END
                  '
                 
    -- Build the SQL Strings
    SELECT @nSQL1 = @nSQL1
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN '
                                @'
                                 + c.Name
                                 + ' '
                                 + Upper(t.Name)
                                 + CASE 
                                     WHEN t.Name = 'varchar'
                                     THEN '('
                                            + CONVERT(VARCHAR,c.Max_Length)
                                            + ')'
                                     ELSE ''
                                   END
                                 + CASE 
                                     WHEN i.Column_Id IS NOT NULL
                                     THEN ' OUTPUT'
                                     ELSE ''
                                   END
                          ELSE '
                                , @'
                                 + c.Name
                                 + ' '
                                 + Upper(t.Name)
                                 + CASE 
                                     WHEN t.Name = 'varchar'
                                     THEN '('
                                            + CONVERT(VARCHAR,c.Max_Length)
                                            + ')'
                                     ELSE ''
                                   END
                                 + CASE 
                                     WHEN i.Column_Id IS NOT NULL
                                     THEN ' OUTPUT'
                                     ELSE ''
                                   END
                        END,
           @nSQL2 = @nSQL2
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN '
                                '
                                 + c.Name
                          ELSE '
                                , '
                                 + c.Name
                        END,
           @nSQL3 = @nSQL3
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN '
                                @'
                                 + c.Name
                          ELSE '
                                , @'
                                 + c.Name
                        END,
           @nSQL4 = @nSQL4
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN ''
                          WHEN 2
                          THEN '
                                '
                                 + c.Name
                          ELSE '
                                , '
                                 + c.Name
                        END,
           @nSQL5 = @nSQL5
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN ''
                          WHEN 2
                          THEN '
                                [Source].'
                                 + c.Name
                          ELSE '
                                , [Source].'
                                 + c.Name
                        END,
           @nSQL6 = @nSQL6
                      + CASE c.Column_Id 
                          WHEN 1
                          THEN ''
                          WHEN 2
                          THEN '
                                '
                                 + c.Name
                                 + ' = [Source].'
                                 + c.Name
                          ELSE '
                                , '
                                 + c.Name
                                 + ' = [Source].'
                                 + c.Name
                        END
    FROM     sys.Columns AS c WITH (NoLock)
             INNER JOIN sys.Types AS t WITH (NoLock)
               ON c.User_Type_Id = t.User_Type_Id
             INNER JOIN sys.Tables st WITH (NoLock)
               ON st.Object_Id = Object_Id(@TableName)
             LEFT OUTER JOIN sys.Identity_Columns i WITH (NoLock)
               ON st.Object_Id = i.Object_Id
                  AND c.Column_Id = i.Column_Id
    WHERE    c.Object_Id = Object_Id(@TableName)
    ORDER BY c.Column_Id;
    
    --
    DECLARE  @PK_ID VARCHAR(512)
                    
    SELECT   @PK_ID = c.Name
    FROM     sys.Columns AS c WITH (NoLock)
             INNER JOIN sys.Types AS t WITH (NoLock)
               ON c.User_Type_Id = t.User_Type_Id
             INNER JOIN sys.Tables st WITH (NoLock)
               ON st.Object_Id = Object_Id(@TableName)
             INNER JOIN sys.Identity_Columns i WITH (NoLock)
               ON st.Object_Id = i.Object_Id
                  AND c.Column_Id = i.Column_Id
    WHERE    c.Object_Id = Object_Id(@TableName)
    ORDER BY c.Column_Id;
    
    --
    SELECT @nSQL1 = REPLACE(@nSQL1,'XXX',@TableName),
           @nSQL2 = REPLACE(@nSQL2,'XXX',@TableName),
           @nSQL3 = REPLACE(@nSQL3,'XXX',@TableName),
           @nSQL4 = REPLACE(@nSQL4,'XXX',@TableName),
           @nSQL5 = REPLACE(@nSQL5,'XXX',@TableName),
           @nSQL6 = REPLACE(@nSQL6,'XXX',@TableName),
           @nSQL7 = REPLACE(@nSQL7,'XXX',@TableName)
                    
    --
    SELECT @nSQL1 = REPLACE(@nSQL1,'PK_ID',@PK_ID),
           @nSQL2 = REPLACE(@nSQL2,'PK_ID',@PK_ID),
           @nSQL3 = REPLACE(@nSQL3,'PK_ID',@PK_ID),
           @nSQL4 = REPLACE(@nSQL4,'PK_ID',@PK_ID),
           @nSQL5 = REPLACE(@nSQL5,'PK_ID',@PK_ID),
           @nSQL6 = REPLACE(@nSQL6,'PK_ID',@PK_ID),
           @nSQL7 = REPLACE(@nSQL7,'PK_ID',@PK_ID)
                    
    --
    PRINT @nSQL1
    
    PRINT @nSQL2
    
    PRINT @nSQL3
    
    PRINT @nSQL4
    
    PRINT @nSQL5
    
    PRINT @nSQL6
    
    PRINT @nSQL7
  --
  END</commandtext>
      <comment>Move relevant SPs to MoBatchDev schema</comment>
    </command>
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_bi_Users_Select_Name]
  @UserId VARCHAR(255)
AS
  BEGIN
      SET NoCount ON

      SELECT [UserId],
             IsNull(NullIf(rTrim(lTrim(IsNull([FirstName], '') + ' ' + IsNull([SurName], ''))), ''), [UserId]) [Name]
      FROM   [MoBatch].[BI_Users]
      ORDER  BY [Name]
  END</commandtext>
      <comment>Miscellaneous</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_RecordSpParamInfo](
               @SPName VARCHAR(128)  = ' ')
AS
  BEGIN
	DECLARE @Name VARCHAR(MAX), @Schema VARCHAR(MAX)
	
	SELECT @Name = SUBSTRING(@SPName, CHARINDEX('.', @SPName) + 1, LEN(@SPName))
	, @Schema = SUBSTRING(@SPName, 0, CHARINDEX('.', @SPName))
	
	IF LEN(@Schema) = 0
		SET @Schema = 'dbo'
  
    SET nocount  ON;
    --
    DELETE FROM BI_SP_ParameterInfo
    WHERE       spname = @SPName
    --
    DECLARE  @nSQL VARCHAR(MAX)
    SET @nSQL = 'SELECT
                        SPName = ISNULL(NULLIF(SS.Name + ''.'', ''dbo.''), '''') + SP.Name
                        , ParameterName = P.name
                        , ParameterID = P.parameter_id
                        , TypeName = T.name
                        , ParameterSize = P.max_length
                        , RequiredParm = convert(int,0)
                        , OutputParm = is_output
                    FROM '
                  + 'sys.parameters P WITH (nolock)
                            inner join sys.objects SP WITH (nolock)
                                on SP.type = ''' + 'P' + '''
                                and SP.name = '''
                  + @Name + '''
                                and P.[object_id] = SP.[object_id]
                            inner join sys.types T
                                on T.user_type_id = P.user_type_id
                            inner join sys.schemas SS
								on SP.schema_id = SS.schema_id
								and ss.Name = ''' + @Schema + '''
                        order by P.Parameter_id'
    --
    
    INSERT INTO BI_SP_ParameterInfo
	    EXEC( @nSQL)

    UPDATE a
    SET    requiredparm = 1
    FROM   BI_SP_ParameterInfo a
           INNER JOIN BI_SP_ParameterInfo rp WITH (nolock)
             ON rp.spname = a.spname
                AND rp.parametername = a.parametername
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Validate_SP](
               @SP VARCHAR(100))
AS
  BEGIN
    DECLARE  @Count INT
                    
    SELECT @Count = Count(* )
    FROM   sys.procedures sp
    INNER JOIN sys.schemas ss
            ON sp.schema_id = ss.schema_id
    WHERE ISNULL(NULLIF(SS.Name + '.', 'dbo.'), '') + SP.Name = @SP
                       
    IF @Count = 0
      BEGIN
        SELECT parameter = 'INVALID SP'
      END
    ELSE
      BEGIN
        SELECT   parameter = parametername
                               + ' ('
                               + Rtrim(typename
                                         + ' '
                                         + Cast(parametersize AS VARCHAR))
                               + ')'
        FROM     [MoBatch].bi_sp_parameterinfo
        WHERE    spname = @SP
        ORDER BY parameterid
      END
  END</commandtext>
      <comment>Allowing for multi-schema support</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'SuppressOldBatchEntry')
INSERT INTO [MoBatch].[BI_AppSettings]([Setting], [Description], [Value], [Sequence], [DropDown])
SELECT N'SuppressOldBatchEntry', N'Suppress Old Batch Entry', N'False', 5, 1</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_Options]
               WHERE  [Option_Type] = 'SuppressOldBatchEntry')
INSERT INTO [MoBatch].[BI_Options]([Option_Type], [Option_Value], [Option_Text], [Sequence])
SELECT N'SuppressOldBatchEntry', N'True', N'Suppress Old Batch Entry from menu', 2 UNION ALL
SELECT N'SuppressOldBatchEntry', N'False', N'Show Old Batch Entry on menu', 1</commandtext>
      <comment>Application setting to suppress Old Batch Grid</comment>
    </command>
  </Version>
  <Version number="1.1.45.0">
    <command>
      <commandtext>UPDATE MobAtch.bi_sp_ParameterInfo
SET    spName = 'MoBatch.' + spName
WHERE  spName IN ('a_sp_BI_Options_Select', 'a_sp_BI_Get_SPs')</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_RecordSpParamInfo](
               @SPName VARCHAR(128)  = ' ')
AS
  BEGIN
	-- Get rid of square brackets
	SELECT @SpName = REPLACE(REPLACE(@SpName, '[', ''), ']', '')

	DECLARE @Name VARCHAR(MAX), @Schema VARCHAR(MAX)
	
	SELECT @Name = SUBSTRING(@SPName, CHARINDEX('.', @SPName) + 1, LEN(@SPName))
	, @Schema = SUBSTRING(@SPName, 0, CHARINDEX('.', @SPName))
	
	IF LEN(@Schema) = 0
		SET @Schema = 'dbo'
  
    SET nocount  ON;
    --
    DELETE FROM BI_SP_ParameterInfo
    WHERE       spname = @SPName
    --
    DECLARE  @nSQL VARCHAR(MAX)
    SET @nSQL = 'SELECT
                        SPName = ISNULL(NULLIF(SS.Name + ''.'', ''dbo.''), '''') + SP.Name
                        , ParameterName = P.name
                        , ParameterID = P.parameter_id
                        , TypeName = T.name
                        , ParameterSize = P.max_length
                        , RequiredParm = convert(int,0)
                        , OutputParm = is_output
                    FROM '
                  + 'sys.parameters P WITH (nolock)
                            inner join sys.objects SP WITH (nolock)
                                on SP.type = ''' + 'P' + '''
                                and SP.name = '''
                  + @Name + '''
                                and P.[object_id] = SP.[object_id]
                            inner join sys.types T
                                on T.user_type_id = P.user_type_id
                            inner join sys.schemas SS
								on SP.schema_id = SS.schema_id
								and ss.Name = ''' + @Schema + '''
                        order by P.Parameter_id'
    --
    
    INSERT INTO BI_SP_ParameterInfo
	    EXEC( @nSQL)

    UPDATE a
    SET    requiredparm = 1
    FROM   BI_SP_ParameterInfo a
           INNER JOIN BI_SP_ParameterInfo rp WITH (nolock)
             ON rp.spname = a.spname
                AND rp.parametername = a.parametername
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_GetspParamInfo]
  @SpName    VARCHAR(1024),
  @NumParams INT
AS
  BEGIN
      -- Get rid of square brackets
      SELECT @SpName = REPLACE(REPLACE(@SpName, '[', ''), ']', '')

      IF @NumParams &lt;&gt; -1
        BEGIN
            DECLARE @CountParams INT

            SELECT @CountParams = COUNT(*)
            FROM   [MoBatch].bi_sp_ParameterInfo WITH (NoLock)
            WHERE  spName = @SpName

            -- If different number of params than expected then
            -- recalculate parameter entries to ensure that this is correct
            IF @CountParams &lt;&gt; @NumParams
              BEGIN
                  EXEC [MoBatch].[a_sp_bi_RecordspParamInfo] @SPName
              END
        END

      SELECT *
      FROM   [MoBatch].[BI_sp_parameterinfo] WITH (NoLock)
      WHERE  spName = @SpName
      ORDER  BY ParameterId
  END</commandtext>
      <comment>Correct Mobatch Schema SPs issue</comment>
    </command>
    <command>
      <commandtext>BEGIN
    DECLARE @PrimaryKey VARCHAR(100)

    SELECT @PrimaryKey = [name]
    FROM   sys.Indexes
    WHERE  Object_Id = Object_Id(N'[MoBatch].[BI_Buttons]')
           AND Name LIKE N'PK__BI_Butto_%'

    IF @PrimaryKey IS NOT NULL
      BEGIN
          EXEC('ALTER TABLE [MoBatch].[BI_Buttons] DROP CONSTRAINT [' + @PrimaryKey + ']')
      END
END</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_Buttons]
	ALTER COLUMN ButtonLabel varchar(80) NOT NULL</commandtext>
      <commandtext>ALTER TABLE [MoBatch].[BI_Buttons] ADD PRIMARY KEY CLUSTERED 
(
	[BatchType] ASC,
	[BatchLevel] ASC,
	[ButtonLabel] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Buttons_Select]
        @BatchType  VARCHAR(50),
        @BatchLevel CHAR(1)
AS
  BEGIN
    SET nocount  ON
		SELECT   [ButtonLabel],
				 [ButtonSP],
				 [ButtonImageFile],
				 [ButtonStatus],
				 [Sequence]
		FROM     [MoBatch].[BI_Buttons] WITH (NOLOCK)
		WHERE    [BatchType] = @BatchType
				 AND [BatchLevel] = @BatchLevel
		ORDER BY [Sequence]
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_bi_Buttons_Insert]
  @BatchType       VARCHAR(50),
  @BatchLevel      CHAR(1),
  @Sequence        INT,
  @ButtonLabel     VARCHAR(30),
  @ButtonSP        VARCHAR(1024),
  @ButtonImageFile VARCHAR(1024),
  @ButtonStatus    VARCHAR(50)
AS
  BEGIN
      SET NoCount ON
      SET xAct_Abort ON

      BEGIN TRAN

      -- Override given Sequence. This ensures that Sequence will always be unique
      -- for the batch type/level.
      SELECT @Sequence = IsNull(MAX([Sequence]), 0) + 1
      FROM   [MoBatch].[BI_Buttons]
      WHERE  [BatchType] = @BatchType
             AND [BatchLevel] = @BatchLevel

      INSERT INTO [MoBatch].[BI_Buttons]
                  ([BatchType],
                   [BatchLevel],
                   [Sequence],
                   [ButtonLabel],
                   [ButtonSP],
                   [ButtonImageFile],
                   [ButtonStatus])
      SELECT @BatchType,
             @BatchLevel,
             @Sequence,
             @ButtonLabel,
             @ButtonSP,
             @ButtonImageFile,
             @ButtonStatus

      COMMIT
  END</commandtext>
      <comment>Larger button label and enable sequencing</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_Columns_Delete_Others] (
  @BatchType  VARCHAR(50),
  @BatchLevel CHAR(1),
  @Table      VARCHAR(100)
)
AS
  BEGIN
      DELETE [MoBatch].[BI_Columns]
      WHERE  [batchtype] = @BatchType
             AND [batchlevel] = @BatchLevel
             AND [table] &lt;&gt; @Table

      -- NOTE: Following added to resequence batch type/level entries
      -- to ensure that sequence numbers are unique
      DECLARE @TEMPTABLE TABLE(
        [Id]     INT IDENTITY ( 1, 1 ),
        [Column] VARCHAR(100))

      INSERT INTO @TEMPTABLE
      SELECT [Column]
      FROM   [MoBatch].[BI_Columns]
      WHERE  [batchtype] = @BatchType
             AND [batchlevel] = @BatchLevel
      ORDER  BY [Sequence]

      DECLARE @ID     INT,
              @MaxID  INT,
              @Column VARCHAR(100)

      SELECT @Id = 1,
             @maxID = MAX(Id)
      FROM   @TEMPTABLE

      WHILE @ID &lt;= @MAXID
        BEGIN
            SELECT @Column = [Column]
            FROM   @TEMPTABLE
            WHERE  Id = @ID

            UPDATE [MoBatch].[BI_Columns]
            SET    [Sequence] = @ID
            WHERE  [batchtype] = @BatchType
                   AND [batchlevel] = @BatchLevel
                   AND [Column] = @Column

            SET @ID = @ID + 1
        END
  END</commandtext>
      <comment>Change to ensure unique sequence No on BI_Columns</comment>
    </command>
  </Version>
  <Version number="1.1.46.0">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatchDev].[a_sp_BI_Replace_BatchType_Config] 
-- =============================================
-- Author:        R Blomstrand
-- Create date:  03/06/2009
-- Modified date:	21/05/2010
-- Modified By: Richard Bothma
-- Modifications:	Added to extract Layout information
-- Description:   Generates SQL command required to replace batch type
--               configuration settings against a specified batch type. 
--               Also rebuilds all referenced SP info
-- NOTE:         Requires SP sp_generate_inserts to exist in Master!
-- Instructions: Run this SP specifying the relevant batch type as a parameter
--               from the database with the updated configuration. Example:
--                    EXEC a_sp_BI_Replace_BatchType_Config 'Invoices'
--               Copy the SQL commands output to Results and run these on the
--               database that one wishes to update.
-- EXEC [MoBatchDev].[a_sp_BI_Replace_BatchType_Config] 'Call Centre'
-- =============================================
      @BatchType varchar(50) = 'XXX'
AS
BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;

      PRINT 'Creating Table'
      -- Create temp table to use to generate the SQL commands (will be selected from at end)
      create table #sp_replacebatch (
        SQLCommand      varchar(MAX))

      DECLARE @FromCommand VARCHAR(256)

      -- Generate SQL commands to delete the existing config data for the specified batch type
      PRINT 'Delete BI_Buttons Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Buttons where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_Columns Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Columns where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_Tables Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Tables where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_BatchTypes Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + '''')
	  PRINT 'Delete BI_Layout Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Layout where BatchType = ''' + @BatchType + '''')
		
      DECLARE @BatchCatCd VARCHAR(255)
      SELECT @BatchCatCd = BatchCatcd
      FROM   MobAtch.bi_BatchTypes bt
      WHERE  bt.BatchType = @BatchType 
      IF @BatchCatCd IS NOT NULL AND @BatchCatCd &lt;&gt; '' BEGIN
            PRINT 'Insert from BI_BatchCategory Table'
            SET @FromCommand = 'from MoBatch.BI_BatchCategory where EXISTS (SELECT 0 FROM MoBatch.BI_BatchTypes bt WHERE bt.[BatchCatCd] = BI_BatchCategory.BatchCatCd and bt.BatchType = ''' + @BatchType + ''')'
            insert into #sp_replacebatch execute sp_generate_inserts 'BI_BatchCategory', @from = @FromCommand, @owner='MoBatch'
            UPDATE #sp_replacebatch SET SQLCommand = 'IF NOT EXISTS (SELECT 0 FROM MoBatch.BI_BatchCategory WHERE [BatchCatCd] = ''' + @BatchCatCd + ''') ' + SQLCommand WHERE SQLCommand like 'INSERT \[MoBatch\]\.\[BI_BatchCategory\]%' ESCAPE '\'
      END
      
      -- Now generate insert commands for specified batch type
      PRINT 'Set From BI_BatchTypes Table'
      SET @FromCommand = 'from MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_BatchTypes', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Tables Table'
      SET @FromCommand = 'from MoBatch.BI_Tables where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Tables', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Columns Table'
      SET @FromCommand = 'from MoBatch.BI_Columns where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Columns', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Buttons Table'
      SET @FromCommand = 'from MoBatch.BI_Buttons where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Buttons', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Layout Table'
      SET @FromCommand = 'from MoBatch.BI_Layout where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute sp_generate_inserts 'BI_Layout', @from = @FromCommand, @owner='MoBatch'
--SELECT * FROM MOBATCH.BI_LAYOUT
      -- Finally generate command to details of all SPs used against the specified batch type
      PRINT 'a_sp_BI_Setup_StoredProcedures'
      insert into #sp_replacebatch values ('EXEC MoBatchDev.a_sp_BI_Setup_StoredProcedures')

      -- Output everything from temp table for user
      PRINT 'Select all'
      select * from #sp_replacebatch
      
      -- And frop the temp table as finished
      PRINT 'Drop Table'
      drop table #sp_replacebatch
END</commandtext>
      <comment>Extract Batch cater for Layout</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Columns ADD
	ChangeTimeStamp bit NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Columns_Insert](
               @BatchType         VARCHAR(50),
               @BatchLevel        CHAR(1),
               @Table             VARCHAR(100),
               @Column            VARCHAR(100),
               @Rename_To         VARCHAR(100),
               @Sequence          INT,
               @Lookup_SP         VARCHAR(1024),
               @Select_SP         VARCHAR(1024),
               @Validation_SP     VARCHAR(1024),
               @ToolTip_SP        VARCHAR(1024),
               @Hide              BIT,
               @ReadOnly          BIT,
               @ReadOnly_Existing BIT,
               @Filter_On         BIT,
               @Required          BIT,
               @Batch_ID          BIT,
               @Line_ID           BIT,
               @Distr_ID          BIT,
               @Status_Col        BIT,
               @ChangeTimeStamp   BIT,
               @Format            VARCHAR(50),
               @Alignment         VARCHAR(50),
               @Computed          BIT,
               @Datatype          VARCHAR(50))
AS
  BEGIN
    SET NoCount  OFF;
            
    SELECT @Computed = Isnull(Is_Computed,0)
    FROM   sys.Columns c
    WHERE  c.Object_Id = Object_id(@Table)
           AND Name = @Column
                                                                  
    UPDATE [MoBatch].[BI_Columns]
    SET    [Table] = @Table,
           [Rename To] = @Rename_To,
           [Sequence] = @Sequence,
           [LookUp_SP] = @LookUp_SP,
           [Select_SP] = @Select_SP,
           [Validation_SP] = @Validation_SP,
           [ToolTip_SP] = @ToolTip_SP,
           [Hide] = @Hide,
           [ReadOnly] = @ReadOnly,
           [ReadOnly Existing] = @ReadOnly_Existing,
           [Filter On] = @Filter_On,
           [Required] = @Required,
           [Batch ID] = @Batch_ID,
           [Line ID] = @Line_ID,
           [Distr ID] = @Distr_ID,
           [Status Col] = @Status_Col,
           [ChangeTimeStamp] = @ChangeTimeStamp,
           [Format] = @Format,
           [Alignment] = @Alignment,
           [Computed] = @Computed
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Column] = @Column
                                                                                     
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Columns]
                   (BatchType,
                    [BatchLevel],
                    [Table],
                    [Column],
                    [Rename To],
                    [Sequence],
                    [LookUp_SP],
                    [Select_SP],
                    [Validation_SP],
                    [ToolTip_SP],
                    [Hide],
                    [ReadOnly],
                    [ReadOnly Existing],
                    [Filter On],
                    [Required],
                    [Batch ID],
                    [Line ID],
                    [Distr ID],
                    [Status Col],
                    [ChangeTimeStamp],
                    [Format],
                    [Alignment],
                    [Computed])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Column,
                    @Rename_To,
                    @Sequence,
                    @LookUp_SP,
                    @Select_SP,
                    @Validation_SP,
                    @ToolTip_SP,
                    @Hide,
                    @ReadOnly,
                    @ReadOnly_Existing,
                    @Filter_On,
                    @Required,
                    @Batch_ID,
                    @Line_ID,
                    @Distr_ID,
                    @Status_Col,
                    @ChangeTimeStamp,
                    @Format,
                    @Alignment,
                    @Computed)
      END
                           
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert/update BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN sc.name
              ELSE NULL
            END) [Rename_To],
           Column_Id [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CAST(0 AS BIT) [Required],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST(0 AS BIT) [ChangeTimeStamp],
           NULL [Format],
           'NotSet' [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           t.name [Datatype]
    FROM   sys.Columns sc
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  Object_Id = OBJECT_ID(@Table)
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name)
    UNION 
    SELECT BatchType,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename_To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [ToolTip_SP],
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           [ChangeTimeStamp] [ChangeTimeStamp],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           t.name [Datatype]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = OBJECT_ID(bic.[Table])
                AND sc.Name = bic.[Column]
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_BatchTypes_Lock_Select](
  @BatchType       VARCHAR(255) = NULL,
  @HeaderID        VARCHAR(50) = NULL,
  @WindowsUserName VARCHAR(255) = NULL
)
AS
  BEGIN
      -- If and levels for this batch have a field defined as ChangeTimeStamp
      -- then do not lock on batch type or batch header as locking will instead
      -- be handled on a row by row basis.
      IF NOT EXISTS (SELECT TOP 1 *
                     FROM   MobAtch.bi_Columns WITH (NoLock)
                     WHERE  BatchType = @BatchType
                            AND ChangeTimesTamp = 1)
        BEGIN
            DECLARE @BatchLocking NVARCHAR(50)

            SELECT @BatchLocking = [Value]
            FROM   [MoBatch].[BI_AppSettings]
            WHERE  [Setting] = 'BatchLocking'

            IF @BatchLocking = 'Header ID'
              BEGIN
                  SELECT l.[BatchType],
                         l.[HeaderID],
                         l.[LockUser],
                         u.[FirstName],
                         u.[SurName],
                         l.[LockTime]
                  FROM   [MoBatch].[BI_Locks] l
                         LEFT OUTER JOIN [MoBatch].[BI_Users] u
                           ON u.UserId = l.LockUser
                  WHERE  ( l.[BatchType] = @BatchType
                            OR @BatchType IS NULL )
                         AND ( l.[HeaderID] = @HeaderID
                                OR @HeaderID IS NULL )
                         AND ( l.LockUser != @WindowsUserName
                                OR @BatchType IS NULL )
              END
            ELSE
              BEGIN
                  IF @BatchType IS NULL
                    BEGIN
                        -- Get locks for all batches and users
                        SELECT bt.[BatchType],
                               '' AS [HeaderID],
                               bt.[LockUser],
                               u.[FirstName],
                               u.[SurName],
                               bt.[LockTime]
                        FROM   [MoBatch].[BI_batchtypes] bt
                               LEFT OUTER JOIN [MoBatch].[BI_Users] u
                                 ON u.UserId = bt.LockUser
                        WHERE  bt.LockUser IS NOT NULL
                        ORDER  BY [BatchType]
                    END
                  ELSE
                    BEGIN
                        -- Get locks for specific batch (and exclude current user)
                        SELECT bt.[BatchType],
                               '' AS [HeaderID],
                               bt.[LockUser],
                               u.[FirstName],
                               u.[SurName],
                               bt.[LockTime]
                        FROM   [MoBatch].[BI_batchtypes] bt
                               LEFT OUTER JOIN [MoBatch].[BI_Users] u
                                 ON u.UserId = bt.LockUser
                        WHERE  bt.LockUser IS NOT NULL
                               AND bt.LockUser != @WindowsUserName
                               AND bt.[BatchType] = @BatchType
                        ORDER  BY [BatchType]
                    END
              END
        END
  END</commandtext>
      <comment>Cater for row locking</comment>
    </command>
  </Version>
  <Version number="1.1.47.0">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_Columns_Delete_Others](
               @BatchType  VARCHAR(50),
               @BatchLevel CHAR(1),
               @Table      VARCHAR(100))
AS
  BEGIN
    ----------------------------------------------------
    -- Delete all columns belonging to a different table
    ----------------------------------------------------
    DELETE [MoBatch].[BI_Columns]
    WHERE  [batchtype] = @BatchType
           AND [batchlevel] = @BatchLevel
           AND [table] &lt;&gt; @Table
                          
    -------------------------------------------------------------------
    -- Delete all columns that do not exist against the specified table
    -------------------------------------------------------------------
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.scHemAs s
             ON s.scHema_Id = t.scHema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END
                        
    -- Only delete if columns exist against specified table in case something is wrong
    IF EXISTS (SELECT 'c'
               FROM   sys.Columns
               WHERE  [object_id] = @TableId)
      BEGIN
        DELETE c
        FROM   [MoBatch].[BI_Columns] c
               LEFT OUTER JOIN sys.Columns sc
                 ON sc.[object_id] = @TableId
                    AND sc.[name] = c.[Column]
        WHERE  c.[batchtype] = @BatchType
               AND c.[batchlevel] = @BatchLevel
               AND sc.[column_id] IS NULL
      END
      
    -----------------------------------------
    -- Re-assign sequences against the fields
    -----------------------------------------
    -- NOTE: Following added to resequence batch type/level entries
    -- to ensure that sequence numbers are unique
    DECLARE  @TEMPTABLE  TABLE(
                               [Id]     INT   IDENTITY ( 1 , 1 ),
                               [Column] VARCHAR(100)
                               )
             
    INSERT INTO @TEMPTABLE
    SELECT   [Column]
    FROM     [MoBatch].[BI_Columns]
    WHERE    [batchtype] = @BatchType
             AND [batchlevel] = @BatchLevel
    ORDER BY [Sequence]
             
    DECLARE  @ID             INT,
             @MaxID          INT,
             @Column         VARCHAR(100),
             @ColumnSequence INT
                             
    SELECT @Id = 1,
           @maxID = MAX(Id),
           @ColumnSequence = 0
    FROM   @TEMPTABLE
           
    WHILE @ID &lt;= @MAXID
      BEGIN
        SET @ColumnSequence = @ColumnSequence
                                + 10
        SELECT @Column = [Column]
        FROM   @TEMPTABLE
        WHERE  Id = @ID
                    
        UPDATE [MoBatch].[BI_Columns]
        SET    [Sequence] = @ColumnSequence
        WHERE  [batchtype] = @BatchType
               AND [batchlevel] = @BatchLevel
               AND [Column] = @Column
                              
        SET @ID = @ID
                    + 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.scHemAs s
             ON s.scHema_Id = t.scHema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END

    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN sc.name
              ELSE NULL
            END) [Rename_To],
           sc.Column_Id * 10 [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CAST(0 AS BIT) [Required],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST(0 AS BIT) [ChangeTimeStamp],
           NULL [Format],
           'NotSet' [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           t.name [Datatype]
    FROM   sys.Columns sc
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  Object_Id = @TableId
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name)
    UNION 
    SELECT BatchType,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename_To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [ToolTip_SP],
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] [Filter On],
           [Required],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           [ChangeTimeStamp] [ChangeTimeStamp],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           t.name [Datatype]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = @TableId
                AND sc.Name = bic.[Column]
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Sequence with gaps + delete cols not in table + cater for a_sp_BI_Options</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_RecordSpParamInfo](
               @SPName VARCHAR(128)  = ' ')
AS
  BEGIN
	-- Get rid of square brackets
	SELECT @SpName = REPLACE(REPLACE(@SpName, '[', ''), ']', '')

	DECLARE @Name VARCHAR(MAX), @Schema VARCHAR(MAX)
	
	SELECT @Name = SUBSTRING(@SPName, CHARINDEX('.', @SPName) + 1, LEN(@SPName))
	, @Schema = SUBSTRING(@SPName, 0, CHARINDEX('.', @SPName))
	
	IF LEN(@Schema) = 0 BEGIN
		IF @Name = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
  
    SET nocount  ON;
    --
    DELETE FROM BI_SP_ParameterInfo
    WHERE       spname = @SPName
    --
    DECLARE  @nSQL VARCHAR(MAX)
    SET @nSQL = 'SELECT
                        SPName = ISNULL(NULLIF(SS.Name + ''.'', ''dbo.''), '''') + SP.Name
                        , ParameterName = P.name
                        , ParameterID = P.parameter_id
                        , TypeName = T.name
                        , ParameterSize = P.max_length
                        , RequiredParm = convert(int,0)
                        , OutputParm = is_output
                    FROM '
                  + 'sys.parameters P WITH (nolock)
                            inner join sys.objects SP WITH (nolock)
                                on SP.type = ''' + 'P' + '''
                                and SP.name = '''
                  + @Name + '''
                                and P.[object_id] = SP.[object_id]
                            inner join sys.types T
                                on T.user_type_id = P.user_type_id
                            inner join sys.schemas SS
								on SP.schema_id = SS.schema_id
								and ss.Name = ''' + @Schema + '''
                        order by P.Parameter_id'
    --
    
    INSERT INTO BI_SP_ParameterInfo
	    EXEC( @nSQL)

    UPDATE a
    SET    requiredparm = 1
    FROM   BI_SP_ParameterInfo a
           INNER JOIN BI_SP_ParameterInfo rp WITH (nolock)
             ON rp.spname = a.spname
                AND rp.parametername = a.parametername
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Validate_SP](
               @SP VARCHAR(100))
AS
  BEGIN
    DECLARE  @Count INT

	IF @SP = 'a_sp_BI_options_Select' BEGIN
		SET @SP = 'MoBatch.a_sp_BI_options_Select'
	END
		
    SELECT @Count = Count(* )
    FROM   sys.Procedures sp
           INNER JOIN sys.Schemas ss
             ON sp.Schema_Id = ss.Schema_Id
    WHERE  ISNULL(NULLIF(ss.Name
                           + '.','dbo.'),'')
             + sp.Name = @SP
                                                
    IF @Count = 0
      BEGIN
        SELECT Parameter = 'INVALID SP'
      END
    ELSE
      BEGIN
        SELECT   Parameter = ParameterName
                               + ' ('
                               + Rtrim(TypeName
                                         + ' '
                                         + Cast(ParameterSize AS VARCHAR))
                               + ')'
        FROM     [MoBatch].bi_sp_ParameterInfo
        WHERE    spName = @SP
        ORDER BY ParameterId
      END
  END</commandtext>
      <comment>Cater for a_sp_BI_Options</comment>
    </command>
  </Version>
  <Version number="1.1.50.0">
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'CreateDbLogin')
  INSERT INTO [MoBatch].[BI_AppSettings]
             ([Setting],
              [Description],
              [Value],
              [Sequence],
              [DropDown])
  SELECT N'CreateDbLogin',
         N'Whether to grant added users to connect to SQL Server using Windows Authentication',
         N'False',
         6,
         1</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_Options]
               WHERE  [Option_Type] = 'CreateDbLogin')
  INSERT INTO [MoBatch].[BI_Options]
             ([Option_Type],
              [Option_Value],
              [Option_Text],
              [Sequence])
  SELECT N'CreateDbLogin',
         N'True',
         N'Automatically grant added users to connect to SQL Server using Windows Authentication',
         2
  UNION ALL
  SELECT N'CreateDbLogin',
         N'False',
         N'Do not automatically grant added users to connect to SQL Server using Windows Authentication',
         1</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'MoBatchRole')
  INSERT INTO [MoBatch].[BI_AppSettings]
             ([Setting],
              [Description],
              [Value],
              [Sequence],
              [DropDown])
  SELECT N'MoBatchRole',
         N'If specified, adds this role to added users',
         N'',
         7,
         0</commandtext>
      <commandtext>CREATE PROC [MoBatch].[a_sp_BI_LoginUserRole]
          -- Purpose: Create or delete SQL Server Login, database user and 
          --          Role for new/deleted users
          -- [MoBatch].[a_sp_BI_LoginUserRole] 'ADD', 'TRAVEL\RobertBl', 'MoBatch'
          -- [MoBatch].[a_sp_BI_LoginUserRole] 'DEL', 'TRAVEL\RobertBl', 'MoBatch'
          @Action VARCHAR(10),
          @UserId   VARCHAR(255),
          @RoleName VARCHAR(255)
AS
  BEGIN
    SET NoCount  ON
    DECLARE  @createQuery  AS NVARCHAR(500)
    IF @Action = 'ADD'
      BEGIN
        IF NOT EXISTS (SELECT *
                       FROM   sys.Server_Principals
                       WHERE  Name = @UserId)
          BEGIN
            -- Create Login against SQL Server if not already there
            SET @createQuery = 'create login ['
                                 + @UserId
                                 + '] FROM WINDOWS'
            EXECUTE sp_executesql
              @createQuery
          END
                                                                    
        IF NOT EXISTS (SELECT *
                       FROM   sys.DataBase_Principals
                       WHERE  Name = @UserId)
          BEGIN
            -- Create User against this database if not already there
            SET @createQuery = 'CREATE USER ['
                                 + @UserId
                                 + '] FOR LOGIN ['
                                 + @UserId
                                 + ']'
            EXECUTE sp_executesql
              @createQuery
          END
                                                                          
        IF @RoleName &lt;&gt; ''
          BEGIN
            IF NOT EXISTS (SELECT 'TRUE'
                           FROM   sysUsers u
                                  INNER JOIN sysMembers m
                                    ON u.uId = m.MemberuId
                                  INNER JOIN sysUsers g
                                    ON g.uId = m.GroupuId
                                       AND g.IssqlRole = 1
                           WHERE  g.Name = @RoleName
                                  AND u.Name = @UserId)
              BEGIN
                EXEC sp_addrolemember
                  @rolename = @RoleName ,
                  @membername = @UserId
              END
          END
      END
    IF @Action = 'DEL'
      BEGIN
        -- Delete role from user if there
        IF @RoleNAme &lt;&gt; ''
          BEGIN
            IF EXISTS (SELECT 'TRUE'
                       FROM   sysUsers u
                              INNER JOIN sysMembers m
                                ON u.uId = m.MemberuId
                              INNER JOIN sysUsers g
                                ON g.uId = m.GroupuId
                                   AND g.IssqlRole = 1
                       WHERE  g.Name = @RoleName
                              AND u.Name = @UserId)
              BEGIN
                EXEC sp_droprolemember
                  @rolename = @RoleName ,
                  @membername = @UserId
              END
          END
                                                                      
        IF EXISTS (SELECT *
                   FROM   sys.DataBase_Principals
                   WHERE  Name = @UserId)
          BEGIN
            -- Create User against this database if there
            SET @createQuery = 'DROP USER ['
                                 + @UserId
                                 + ']'
            --PRINT @createQuery
            EXECUTE sp_executesql
              @createQuery
          END
                                                                      
        IF EXISTS (SELECT *
                   FROM   sys.Server_Principals
                   WHERE  Name = @UserId)
          BEGIN
            -- Delete Login from SQL Server if there
            SET @createQuery = 'DROP LOGIN ['
                                 + @UserId
                                 + ']'
            --PRINT @createQuery
            EXECUTE sp_executesql
              @createQuery
          END
      END
  END</commandtext>
      <comment>Cater for auto add login to SQL Server + User + role</comment>
    </command>
  </Version>
  <Version number="1.1.51.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_BatchTypes ADD
	HeadBeforeSaveSP varchar(1024) NULL,
	LineBeforeSaveSP varchar(1024) NULL,
	DistrBeforeSaveSP varchar(1024) NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [AutoDrill] = ISNULL([AutoDrill],0),
             [ApproveSP],
             [ApproveStatus],
             [ProcessSP],
             [ProcessStatus],
             [HeadRowSetupSP],
             [LineRowSetupSP],
             [DistrRowSetupSP],
             [HeadRowSelectSP],
             [LineRowSelectSP],
             [DistrRowSelectSP],
             [HeadValidationSP],
             [LineValidationSP],
             [DistrValidationSP],
             [AfterCloseLinesSP],
             [AfterCloseDistrSP],
             [HeadValue1Descr],
             [HeadValue2Descr],
             [HeadValue3Descr],
             [HeadValue4Descr],
             [LineValue1Descr],
             [LineValue2Descr],
             [LineValue3Descr],
             [LineValue4Descr],
             [DistrValue1Descr],
             [DistrValue2Descr],
             [DistrValue3Descr],
             [DistrValue4Descr],
             [HeadValidationStatus],
             [LineValidationStatus],
             [DistrValidationStatus],
             [HeadCalculationSP],
             [HeadCalculationStatus],
             [LineCalculationSP],
             [LineCalculationStatus],
             [DistrCalculationSP],
             [DistrCalculationStatus],
             [HeadAfterLoadSP],
             [LineAfterLoadSP],
             [DistrAfterLoadSP],
             [HeadBeforeSaveSP],
             [LineBeforeSaveSP],
             [DistrBeforeSaveSP],
             [HeadAfterSaveSP],
             [LineAfterSaveSP],
             [DistrAfterSaveSP],
             [HeadAfterDeleteSP],
             [LineAfterDeleteSP],
             [DistrAfterDeleteSP],
             [HeadDefaultSP],
             [LineDefaultSP],
             [DistrDefaultSP],
             [HeadOverrideSP],
             [LineOverrideSP],
             [DistrOverrideSP]
    FROM     [MoBatch].bi_batchtypes WITH (NOLOCK)
    WHERE    batchtype = @BatchType
    ORDER BY SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROC [MoBatchDev].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ToolTip_SP sp_name
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headbeforesavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headbeforesavesp IS NOT NULL 
           AND headbeforesavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linebeforesavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linebeforesavesp IS NOT NULL 
           AND linebeforesavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrbeforesavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrbeforesavesp IS NOT NULL 
           AND distrbeforesavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ButtonSp sp_name
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT REPLACE(reporturl, 'GRID:','') sp_name
    FROM   [MoBatch].bi_reports
    WHERE  reporturl like 'GRID:%'
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name)&gt;0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatchDev].[a_sp_BI_Document_Summary]
-- Provides in output a summary of the installation
-- EXEC [MoBatch].[a_sp_BI_Document_Summary]
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NoCount  ON;
                        
    --=========================================
    -- Create temp table containing report data
    --=========================================
    CREATE TABLE #MobAtch_Configuration (
      [BatchCatCd]   VARCHAR(100),
      [BatchType]    VARCHAR(100),
      [BatchLevel]   INT,
      [ListSequence] INT,
      [ColumnID]     INT,
      [Section]      VARCHAR(100),
      [Text]         VARCHAR(2040))
        
    DECLARE  @ListSequence INT
                                                                                                                                                  
    --=================
    -- Batch Categories
    --=================
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Reflect Opening separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Categories
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = 'Batch Category : '
                      + [BatchCatDescr]
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                                                                                                                           
    -- Reflect Closing separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
                                                  
    --============
    -- Batch Types
    --============
    -- Reflect Opening separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Types
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    BatchType : '
                      + [BatchType]
                      + (CASE 
                           WHEN [AutoDrill] = 1
                           THEN ' (with auto-drilldown selected)'
                           ELSE ''
                         END)
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    -- Reflect Closing separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
                                                  
    --=============
    -- Batch Levels
    --=============
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Dashes line before levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- List all batch levels per batch types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        Batch Level : '
                      + (CASE 
                           WHEN [BatchLevel] = 'H'
                           THEN 'Header'
                           WHEN [BatchLevel] = 'L'
                           THEN 'Lines'
                           WHEN [BatchLevel] = 'D'
                           THEN 'Distribution'
                           ELSE 'Unknown'
                         END)
                      + ' - Table: '
                      + [Table]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- Dashes line after levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    --===============
    -- Display Values
    --===============
    -------------------------------
    -- Reflect Display Values title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Display Values',
           [Text] = '            Special Display Values (top of screen) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
                                                                                                                                                                          
    -- Header (Display Value)
    -- Display Value #1 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + HeadValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue1descr IS NOT NULL 
           AND HeadValue1descr &lt;&gt; ''
    -- Display Value #2 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + HeadValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue2descr IS NOT NULL 
           AND HeadValue2descr &lt;&gt; ''
    -- Display Value #3 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + HeadValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue3descr IS NOT NULL 
           AND HeadValue3descr &lt;&gt; ''
    -- Display Value #4 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + HeadValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue4descr IS NOT NULL 
           AND HeadValue4descr &lt;&gt; ''
                                                                                                                                                                                            
                                                                                                                                                                                            
    -- Lines (Display Value)
    -- Display Value #1 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + LineValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue1descr IS NOT NULL 
           AND LineValue1descr &lt;&gt; ''
    -- Display Value #2 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + LineValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue2descr IS NOT NULL 
           AND LineValue2descr &lt;&gt; ''
    -- Display Value #3 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + LineValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue3descr IS NOT NULL 
           AND LineValue3descr &lt;&gt; ''
    -- Display Value #4 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + LineValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue4descr IS NOT NULL 
           AND LineValue4descr &lt;&gt; ''
                                                                                                                                                                                                   
    -- Distribution (Display Value)
    -- Display Value #1 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + dIstrValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue1descr IS NOT NULL 
           AND dIstrValue1descr &lt;&gt; ''
    -- Display Value #2 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + dIstrValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue2descr IS NOT NULL 
           AND dIstrValue2descr &lt;&gt; ''
    -- Display Value #3 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + dIstrValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue3descr IS NOT NULL 
           AND dIstrValue3descr &lt;&gt; ''
    -- Display Value #4 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + dIstrValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue4descr IS NOT NULL 
           AND dIstrValue4descr &lt;&gt; ''
                                                                                                                                                                                                  
                                                                                                                                                                                                  
    --============================================
    -- Special Buttons (and right-click) Processes
    --============================================
    -------------------------------------------
    -- Reflect Special Processing buttons title
    -------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Processing Buttons',
           [Text] = '            Special Processing Buttons (top of screen + right-click) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    ------------------------------
    -- Validation buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + HeadValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadValidationStatus IS NULL 
                                 OR HeadValidationStatus = ''
                           THEN 'ALL'
                           ELSE HeadValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValidationsp IS NOT NULL 
           AND HeadValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Lines (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + LineValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineValidationStatus IS NULL 
                                 OR LineValidationStatus = ''
                           THEN 'ALL'
                           ELSE LineValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValidationsp IS NOT NULL 
           AND LineValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Distribution (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + dIstrValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN dIstrValidationStatus IS NULL 
                                 OR dIstrValidationStatus = ''
                           THEN 'ALL'
                           ELSE dIstrValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValidationsp IS NOT NULL 
           AND dIstrValidationsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    -------------------------------
    -- Calculation buttons (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + HeadCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadCalculationStatus IS NULL 
                                 OR HeadCalculationStatus = ''
                           THEN 'ALL'
                           ELSE HeadCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadCalculationsp IS NOT NULL 
           AND HeadCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Lines (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + LineCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineCalculationStatus IS NULL 
                                 OR LineCalculationStatus = ''
                           THEN 'ALL'
                           ELSE LineCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineCalculationsp IS NOT NULL 
           AND LineCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Distribution (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + dIstrCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN [dIstrCalculationStatus] IS NULL 
                                 OR [dIstrCalculationStatus] = ''
                           THEN 'ALL'
                           ELSE dIstrCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrCalculationsp IS NOT NULL 
           AND dIstrCalculationsp &lt;&gt; ''
                                                                                                                                                                                                              
                                                                                                                                                                                                              
    ---------------------------
    -- Approve buttons (if any)
    ---------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Approve Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Approve SP: `'
                      + Approvesp
                      + '` (for '
                      + (CASE 
                           WHEN ApproveStatus IS NULL 
                                 OR ApproveStatus = ''
                           THEN 'ALL'
                           ELSE ApproveStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Approvesp IS NOT NULL 
           AND Approvesp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    ------------------------------
    -- Processing buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Processing Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Process SP: `'
                      + Processsp
                      + '` (for '
                      + (CASE 
                           WHEN ProcessStatus IS NULL 
                                 OR ProcessStatus = ''
                           THEN 'ALL'
                           ELSE ProcessStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Processsp IS NOT NULL 
           AND Processsp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    -----------------------------------------------------
    -- Special Action buttons (All levels where existing)
    -----------------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                '
                      + ButtonLabel
                      + ' SP: `'
                      + Buttonsp
                      + '` (for '
                      + (CASE 
                           WHEN [ButtonStatus] IS NULL 
                                 OR [ButtonStatus] = ''
                           THEN 'ALL'
                           ELSE ButtonStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_Buttons b WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = b.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --=================================
    -- Special Events Stored Procedures
    --=================================
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    ------------------------------------------
    -- Reflect Special Processing Events title
    ------------------------------------------
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Events',
           [Text] = '            Special Events : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --------------------------
    -- Default Events (if any)
    --------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + HeadDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadDefaultsp IS NOT NULL 
           AND HeadDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Lines (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + LineDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineDefaultsp IS NOT NULL 
           AND LineDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Distributions (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + dIstrDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrDefaultsp IS NOT NULL 
           AND dIstrDefaultsp &lt;&gt; ''
                                                                                                                                                                                               
                                                                                                                                                                                      
    ----------------------------              
    -- Row Setup Events (if any)
    ----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + HeadRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSetUpsp IS NOT NULL 
           AND HeadRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + LinerowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSetUpsp IS NOT NULL 
           AND LinerowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + dIstrRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSetUpsp IS NOT NULL 
           AND dIstrRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                            
    -----------------------------
    -- After Load Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + HeadAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterLoadsp IS NOT NULL 
           AND HeadAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + LineAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterLoadsp IS NOT NULL 
           AND LineAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + dIstRafterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterLoadsp IS NOT NULL 
           AND dIstRafterLoadsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                  
    -----------------------------
    -- Row Select Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + HeadRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSelectsp IS NOT NULL 
           AND HeadRowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + LinerowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSelectsp IS NOT NULL 
           AND LinerowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + dIstrRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSelectsp IS NOT NULL 
           AND dIstrRowSelectsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    --------------------------------------
    -- Supervisor Override Access (if any)
    --------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + HeadOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadOverridesp IS NOT NULL 
           AND HeadOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + LineOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineOverridesp IS NOT NULL 
           AND LineOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + dIstRoverRidesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRoverRidesp IS NOT NULL 
           AND dIstRoverRidesp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                                          
    -----------------------------
    -- After Save Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + HeadBeforeSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadBeforeSavesp IS NOT NULL 
           AND HeadBeforeSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Header (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + HeadAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterSavesp IS NOT NULL 
           AND HeadAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + LineBeforeSaveSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineBeforeSaveSP IS NOT NULL 
           AND LineBeforeSaveSP &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + LineAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterSavesp IS NOT NULL 
           AND LineAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + DistrBeforeSaveSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  DistrBeforeSaveSP IS NOT NULL 
           AND DistrBeforeSaveSP &lt;&gt; ''
                                                                                                                                                                                                           
    -- Distributions (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + dIstRafterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterSavesp IS NOT NULL 
           AND dIstRafterSavesp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    -----------------------------
    -- After Delete Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + HeadAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterDeletesp IS NOT NULL 
           AND HeadAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + LineAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterDeletesp IS NOT NULL 
           AND LineAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Distributions (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + dIstRafterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterDeletesp IS NOT NULL 
           AND dIstRafterDeletesp &lt;&gt; ''
                                                                                                                                                                                                                       
                                                                                                                                                                                                                            
    ------------------------------------
    -- After Close Child Events (if any)
    ------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Lines SP: `'
                      + AfterCloseLinessp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterCloseLinessp IS NOT NULL 
           AND AfterCloseLinessp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Distributions SP: `'
                      + AfterClosedIstrsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterClosedIstrsp IS NOT NULL 
           AND AfterClosedIstrsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    --========
    -- Columns
    --========
    -------------------------------
    -- Reflect Columns title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Columns',
           [Text] = '            Columns : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    ----------------------
    -- Reflect each column
    ----------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT   [BatchCatCd] = [BatchCatCd],
             [BatchType] = bt.[BatchType],
             [BatchLevel] = (CASE 
                               WHEN [BatchLevel] = 'H'
                               THEN 1
                               WHEN [BatchLevel] = 'L'
                               THEN 2
                               WHEN [BatchLevel] = 'D'
                               THEN 3
                               ELSE 4
                             END),
             [ListSequence] = @ListSequence,
             [ColumnId] = c.[Sequence],
             [Section] = 'Columns',
             [Text] = REPLACE(REPLACE(REPLACE('                '
                                                + [Column]
                                                + ' ('
                                                + (CASE 
                                                     WHEN NULLIF([Rename To],'') IS NOT NULL
                                                     THEN ', Renamed to `'
                                                            + [Rename To]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Required],0) = 1
                                                     THEN ', Required '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Hide],0) = 1
                                                     THEN ', Hidden '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly],0) = 1
                                                     THEN ', ReadOnly '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly Existing],0) = 1
                                                     THEN ', ReadOnly Existing'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Status Col],0) = 1
                                                     THEN ', Status Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Computed],0) = 1
                                                     THEN ', Computed Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Format],'') IS NOT NULL
                                                     THEN ', Format" `'
                                                            + [Format]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Alignment],'NotSet') &lt;&gt; 'NotSet'
                                                     THEN ', Alignment: `'
                                                            + [Alignment]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Lookup_SP],'') IS NOT NULL
                                                     THEN ', Combobox SP: `'
                                                            + [Lookup_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Select_SP],'') IS NOT NULL
                                                     THEN ', CTRL-L SP: `'
                                                            + [Select_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Validation_SP],'') IS NOT NULL
                                                     THEN ', Cell Validation SP: `'
                                                            + [Validation_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Tooltip_SP],'') IS NOT NULL
                                                     THEN ', Tooltip SP: `'
                                                            + [Tooltip_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + ')',' ()',''),'(, ','('),
                              ' )',')')
    FROM     MobAtch.bi_Columns c
             INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
               ON bt.BatchType = c.BatchType
    ORDER BY c.[Sequence]
                                                              
    --=========================
    -- Remove obsolete headings
    --=========================
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Display Values'
    WHERE  ct.Section = 'Title Display Values'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Processing Buttons'
    WHERE  ct.Section = 'Title Special Processing Buttons'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Events'
    WHERE  ct.Section = 'Title Special Events'
           AND cl.[BatchType] IS NULL
                              
    --================================
    -- Select compiled data for output
    --================================
    SELECT [Text]
    FROM     #MobAtch_Configuration
    ORDER BY [BatchCatCd],
             [BatchType],
             [BatchLevel],
             [ListSequence],
             [ColumnId]
                          
    --=================================
    -- Drop temp table after completion
    --=================================
    DROP TABLE #MobAtch_Configuration
        
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Update](
               @BatchType              VARCHAR(255),
               @AutoDrill              BIT,
               @ApproveSP              VARCHAR(255),
               @ApproveStatus          VARCHAR(50),
               @ProcessSP              VARCHAR(255),
               @ProcessStatus          VARCHAR(50),
               @HeadRowSetupSP         VARCHAR(1024),
               @LineRowSetupSP         VARCHAR(1024),
               @DistrRowSetupSP        VARCHAR(1024),
               @HeadRowSelectSP        VARCHAR(1024),
               @LineRowSelectSP        VARCHAR(1024),
               @DistrRowSelectSP       VARCHAR(1024),
               @HeadValidationSP       VARCHAR(1024),
               @LineValidationSP       VARCHAR(1024),
               @DistrValidationSP      VARCHAR(1024),
               @AfterCloseLinesSP      VARCHAR(1024),
               @AfterCloseDistrSP      VARCHAR(1024),
               @HeadValue1Descr        VARCHAR(50),
               @HeadValue2Descr        VARCHAR(50),
               @HeadValue3Descr        VARCHAR(50),
               @HeadValue4Descr        VARCHAR(50),
               @LineValue1Descr        VARCHAR(50),
               @LineValue2Descr        VARCHAR(50),
               @LineValue3Descr        VARCHAR(50),
               @LineValue4Descr        VARCHAR(50),
               @DistrValue1Descr       VARCHAR(50),
               @DistrValue2Descr       VARCHAR(50),
               @DistrValue3Descr       VARCHAR(50),
               @DistrValue4Descr       VARCHAR(50),
               @HeadValidationStatus   VARCHAR(50),
               @LineValidationStatus   VARCHAR(50),
               @DistrValidationStatus  VARCHAR(50),
               @HeadCalculationSP      VARCHAR(1024),
               @HeadCalculationStatus  VARCHAR(50),
               @LineCalculationSP      VARCHAR(1024),
               @LineCalculationStatus  VARCHAR(50),
               @DistrCalculationSP     VARCHAR(1024),
               @DistrCalculationStatus VARCHAR(50),
               @HeadAfterLoadSP        VARCHAR(1024),
               @LineAfterLoadSP        VARCHAR(1024),
               @DistrAfterLoadSP       VARCHAR(1024),
               @HeadBeforeSaveSP       VARCHAR(1024),
               @LineBeforeSaveSP       VARCHAR(1024),
               @DistrBeforeSaveSP      VARCHAR(1024),
               @HeadAfterSaveSP        VARCHAR(1024),
               @LineAfterSaveSP        VARCHAR(1024),
               @DistrAfterSaveSP       VARCHAR(1024),
               @HeadAfterDeleteSP      VARCHAR(1024),
               @LineAfterDeleteSP      VARCHAR(1024),
               @DistrAfterDeleteSP     VARCHAR(1024),
               @HeadDefaultSP          VARCHAR(1024),
               @LineDefaultSP          VARCHAR(1024),
               @DistrDefaultSP         VARCHAR(1024),
               @HeadOverrideSP         VARCHAR(1024),
               @LineOverrideSP         VARCHAR(1024),
               @DistrOverrideSP        VARCHAR(1024))
AS
  BEGIN
    SET nocount  OFF;
                
    UPDATE [MoBatch].bi_batchtypes
    SET    autodrill = @AutoDrill,
           approvesp = @ApproveSP,
           approvestatus = @ApproveStatus,
           processsp = @ProcessSP,
           processstatus = @ProcessStatus,
           headrowsetupsp = @HeadRowSetupSP,
           linerowsetupsp = @LineRowSetupSP,
           distrrowsetupsp = @DistrRowSetupSP,
           headrowselectsp = @HeadRowSelectSP,
           linerowselectsp = @LineRowSelectSP,
           distrrowselectsp = @DistrRowSelectSP,
           headvalidationsp = @HeadValidationSP,
           linevalidationsp = @LineValidationSP,
           distrvalidationsp = @DistrValidationSP,
           aftercloselinessp = @AfterCloseLinesSP,
           afterclosedistrsp = @AfterCloseDistrSP,
           headvalue1descr = @HeadValue1Descr,
           headvalue2descr = @HeadValue2Descr,
           headvalue3descr = @HeadValue3Descr,
           headvalue4descr = @HeadValue4Descr,
           linevalue1descr = @LineValue1Descr,
           linevalue2descr = @LineValue2Descr,
           linevalue3descr = @LineValue3Descr,
           linevalue4descr = @LineValue4Descr,
           distrvalue1descr = @DistrValue1Descr,
           distrvalue2descr = @DistrValue2Descr,
           distrvalue3descr = @DistrValue3Descr,
           distrvalue4descr = @DistrValue4Descr,
           headvalidationstatus = @HeadValidationStatus,
           linevalidationstatus = @LineValidationStatus,
           distrvalidationstatus = @DistrValidationStatus,
           headcalculationsp = @HeadCalculationSP,
           headcalculationstatus = @HeadCalculationStatus,
           linecalculationsp = @LineCalculationSP,
           linecalculationstatus = @LineCalculationStatus,
           distrcalculationsp = @DistrCalculationSP,
           distrcalculationstatus = @DistrCalculationStatus,
           headafterloadsp = @HeadAfterLoadSP,
           lineafterloadsp = @LineAfterLoadSP,
           distrafterloadsp = @DistrAfterLoadSP,
           headbeforesavesp = @HeadBeforeSaveSP,
           linebeforesavesp = @LineBeforeSaveSP,
           distrbeforesavesp = @DistrBeforeSaveSP,
           headaftersavesp = @HeadAfterSaveSP,
           lineaftersavesp = @LineAfterSaveSP,
           distraftersavesp = @DistrAfterSaveSP,
           headafterdeletesp = @HeadAfterDeleteSP,
           lineafterdeletesp = @LineAfterDeleteSP,
           distrafterdeletesp = @DistrAfterDeleteSP,
           headdefaultsp = @HeadDefaultSP,
           linedefaultsp = @LineDefaultSP,
           distrdefaultsp = @DistrDefaultSP,
           headoverridesp = @HeadOverrideSP,
           lineoverridesp = @LineOverrideSP,
           distroverridesp = @DistrOverrideSP
    WHERE  batchtype = @BatchType
                                                                                            
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_ConfigureBatchGridProcs_Select](
           -- This stored procedure is used to populate the ConfigureBatchGrid Procs grid
           @BatchType VARCHAR(50),
           @BatchLevel CHAR(1))
AS
  BEGIN
    IF @BatchLevel = 'H'
      BEGIN
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'CalculateSP' [CallEvent],
                        'Row Calculate Procedure' [Stored_Procecure_Type],
                        [HeadCalculationSP] [SP_Name],
                        [HeadCalculationStatus] [On_Status],
                        'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ValidateSP' [CallEvent],
                        'Row Validate Procedure' [Stored_Procecure_Type],
                        [HeadValidationSP] [SP_Name],
                        [HeadValidationStatus] [On_Status],
                        'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ApproveSP' [CallEvent],
                        'Row Approve Procedure' [Stored_Procecure_Type],
                        [ApproveSP] [SP_Name],
                        [ApproveStatus] [On_Status],
                        'Executes when clicking Approve Button or Right-click entry / Approve.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ProcessSP' [CallEvent],
                        'Row Process Procedure' [Stored_Procecure_Type],
                        [ProcessSP] [SP_Name],
                        [ProcessStatus] [On_Status],
                        'Executes when clicking Process Button or Right-click entry / Process.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowSetupSP' [CallEvent],
                        'Row Setup Procedure' [Stored_Procecure_Type],
                        [HeadRowSetupSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for each entry when populating grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterLoadSP' [CallEvent],
                        'After Load Procedure' [Stored_Procecure_Type],
                        [HeadAfterLoadSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowSelectSP' [CallEvent],
                        'Row Select Procedure' [Stored_Procecure_Type],
                        [HeadRowSelectSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'BeforeSaveSP' [CallEvent],
                        'Before Save Procedure' [Stored_Procecure_Type],
                        [HeadBeforeSaveSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes before saving the data in the grid (good for pre-save validation).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterSaveSP' [CallEvent],
                        'After Save Procedure' [Stored_Procecure_Type],
                        [HeadAfterSaveSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after saving the data in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterDeleteSP' [CallEvent],
                        'After Delete Procedure' [Stored_Procecure_Type],
                        [HeadAfterDeleteSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after deleting one or more rows from a grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'DefaultSP' [CallEvent],
                        'Default Procedure' [Stored_Procecure_Type],
                        [HeadDefaultSP] [SP_Name],
                        'N/A' [On_Status],
                        'Used to default cell values for new row being added.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'OverrideSP' [CallEvent],
                        'Override Procedure' [Stored_Procecure_Type],
                        [HeadOverrideSP] [SP_Name],
                        'N/A' [On_Status],
                        'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'CloseLinesSP' [CallEvent],
                        'After Closing Lines Procedure' [Stored_Procecure_Type],
                        [AfterCloseLinesSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for the batch header when returning after closing lines screen (E.g. return count of lines belonging to header).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
      END
    ELSE
      IF @BatchLevel = 'L'
        BEGIN
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CalculateSP' [CallEvent],
                          'Row Calculate Procedure' [Stored_Procecure_Type],
                          [LineCalculationSP] [SP_Name],
                          [LineCalculationStatus] [On_Status],
                          'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'ValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [LineValidationSP] [SP_Name],
                          [LineValidationStatus] [On_Status],
                          'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSetupSP' [CallEvent],
                          'Row Setup Procedure' [Stored_Procecure_Type],
                          [LineRowSetupSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for each entry when populating grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterLoadSP' [CallEvent],
                          'After Load Procedure' [Stored_Procecure_Type],
                          [LineAfterLoadSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSelectSP' [CallEvent],
                          'Row Select Procedure' [Stored_Procecure_Type],
                          [LineRowSelectSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'BeforeSaveSP' [CallEvent],
                          'Before Save Procedure' [Stored_Procecure_Type],
                          [LineBeforeSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes before saving the data in the grid (good for pre-save validation).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterSaveSP' [CallEvent],
                          'After Save Procedure' [Stored_Procecure_Type],
                          [LineAfterSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after saving the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterDeleteSP' [CallEvent],
                          'After Delete Procedure' [Stored_Procecure_Type],
                          [LineAfterDeleteSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after deleting one or more rows from a grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'DefaultSP' [CallEvent],
                          'Default Procedure' [Stored_Procecure_Type],
                          [LineDefaultSP] [SP_Name],
                          'N/A' [On_Status],
                          'Used to default cell values for new row being added.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'OverrideSP' [CallEvent],
                          'Override Procedure' [Stored_Procecure_Type],
                          [LineOverrideSP] [SP_Name],
                          'N/A' [On_Status],
                          'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CloseDistrSP' [CallEvent],
                          'After Closing Distribution Procedure' [Stored_Procecure_Type],
                          [AfterCloseDistrSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for the batch line when returning after closing distribution screen (E.g. return count of distributions belonging to line).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
        END
      ELSE
        BEGIN
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CalculateSP' [CallEvent],
                          'Row Calculate Procedure' [Stored_Procecure_Type],
                          [DistrCalculationSP] [SP_Name],
                          [DistrCalculationStatus] [On_Status],
                          'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'ValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [DistrValidationSP] [SP_Name],
                          [DistrValidationStatus] [On_Status],
                          'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSetupSP' [CallEvent],
                          'Row Setup Procedure' [Stored_Procecure_Type],
                          [DistrRowSetupSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for each entry when populating grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterLoadSP' [CallEvent],
                          'After Load Procedure' [Stored_Procecure_Type],
                          [DistrAfterLoadSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSelectSP' [CallEvent],
                          'Row Select Procedure' [Stored_Procecure_Type],
                          [DistrRowSelectSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'BeforeSaveSP' [CallEvent],
                          'Before Save Procedure' [Stored_Procecure_Type],
                          [DistrBeforeSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes before saving the data in the grid (good for pre-save validation).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterSaveSP' [CallEvent],
                          'After Save Procedure' [Stored_Procecure_Type],
                          [DistrAfterSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after saving the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterDeleteSP' [CallEvent],
                          'After Delete Procedure' [Stored_Procecure_Type],
                          [DistrAfterDeleteSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after deleting one or more rows from a grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'DefaultSP' [CallEvent],
                          'Default Procedure' [Stored_Procecure_Type],
                          [DistrDefaultSP] [SP_Name],
                          'N/A' [On_Status],
                          'Used to default cell values for new row being added.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'OverrideSP' [CallEvent],
                          'Override Procedure' [Stored_Procecure_Type],
                          [DistrOverrideSP] [SP_Name],
                          'N/A' [On_Status],
                          'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_ConfigureBatchGridProcs_Update](
           -- This stored procedure is used to update from the ConfigureBatchGrid Procs grid
           @BatchType VARCHAR(50),
           @BatchLevel            CHAR(1),
           @CallEvent             VARCHAR(50),
           @Stored_Procecure_Type VARCHAR(255),
           @SP_Name               VARCHAR(1024),
           @On_Status             VARCHAR(50),
           @Event_Description     VARCHAR(1024))
AS
  BEGIN
    IF @BatchLevel = 'H'
      BEGIN
        IF @CallEvent = 'CalculateSP'
          BEGIN
            UPDATE [MoBatch].bi_BatchTypes
            SET    [HeadCalculationSP] = @SP_Name,
                   [HeadCalculationStatus] = @On_Status
            WHERE  [BatchType] = @BatchType
          END
        ELSE
          IF @CallEvent = 'ValidateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [HeadValidationSP] = @SP_Name,
                     [HeadValidationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ApproveSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [ApproveSP] = @SP_Name,
                       [ApproveStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'ProcessSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [ProcessSP] = @SP_Name,
                         [ProcessStatus] = @On_Status
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'RowSetupSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [HeadRowSetupSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'AfterLoadSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [HeadAfterLoadSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'RowSelectSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [HeadRowSelectSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'BeforeSaveSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [HeadBeforeSaveSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                      IF @CallEvent = 'AfterSaveSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [HeadAfterSaveSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'AfterDeleteSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [HeadAfterDeleteSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'DefaultSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [HeadDefaultSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
                          ELSE
                            IF @CallEvent = 'OverrideSP'
                              BEGIN
                                UPDATE [MoBatch].bi_BatchTypes
                                SET    [HeadOverrideSP] = @SP_Name
                                WHERE  [BatchType] = @BatchType
                              END
                            ELSE
                              IF @CallEvent = 'CloseLinesSP'
                                BEGIN
                                  UPDATE [MoBatch].bi_BatchTypes
                                  SET    [AfterCloseLinesSP] = @SP_Name
                                  WHERE  [BatchType] = @BatchType
                                END
      END
    ELSE
      IF @BatchLevel = 'L'
        BEGIN
          IF @CallEvent = 'CalculateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [LineCalculationSP] = @SP_Name,
                     [LineCalculationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ValidateSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [LineValidationSP] = @SP_Name,
                       [LineValidationStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'RowSetupSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [LineRowSetupSP] = @SP_Name
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'AfterLoadSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [LineAfterLoadSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'RowSelectSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [LineRowSelectSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'BeforeSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineBeforeSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                    IF @CallEvent = 'AfterSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineAfterSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterDeleteSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [LineAfterDeleteSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'DefaultSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [LineDefaultSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'OverrideSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [LineOverrideSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
                          ELSE
                            IF @CallEvent = 'CloseDistrSP'
                              BEGIN
                                UPDATE [MoBatch].bi_BatchTypes
                                SET    [AfterCloseDistrSP] = @SP_Name
                                WHERE  [BatchType] = @BatchType
                              END
        END
      ELSE
        BEGIN
          IF @CallEvent = 'CalculateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [DistrCalculationSP] = @SP_Name,
                     [DistrCalculationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ValidateSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [DistrValidationSP] = @SP_Name,
                       [DistrValidationStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'RowSetupSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [DistrRowSetupSP] = @SP_Name
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'AfterLoadSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [DistrAfterLoadSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'RowSelectSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [DistrRowSelectSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'BeforeSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrBeforeSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                    IF @CallEvent = 'AfterSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrAfterSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterDeleteSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [DistrAfterDeleteSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'DefaultSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [DistrDefaultSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'OverrideSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [DistrOverrideSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_StoredProcedures_List]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    ToolTip_SP [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineValidationSP' [CallEvent],
                    NULL [Column],
                    linevalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineCalculationSP' [CallEvent],
                    NULL [Column],
                    linecalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterLoadSP' [CallEvent],
                    NULL [Column],
                    lineafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadBeforeSaveSP' [CallEvent],
                    NULL [Column],
                    HeadBeforeSaveSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadBeforeSaveSP IS NOT NULL 
           AND HeadBeforeSaveSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineBeforeSaveSP' [CallEvent],
                    NULL [Column],
                    LineBeforeSaveSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineBeforeSaveSP IS NOT NULL 
           AND LineBeforeSaveSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterSaveSP' [CallEvent],
                    NULL [Column],
                    lineaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrBeforeSaveSP' [CallEvent],
                    NULL [Column],
                    DistrBeforeSaveSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrBeforeSaveSP IS NOT NULL 
           AND DistrBeforeSaveSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    lineafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadDefaultSP' [CallEvent],
                    NULL [Column],
                    HeadDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineDefaultSP' [CallEvent],
                    NULL [Column],
                    LineDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrDefaultSP' [CallEvent],
                    NULL [Column],
                    DistrDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadOverrideSP' [CallEvent],
                    NULL [Column],
                    HeadOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineOverrideSP' [CallEvent],
                    NULL [Column],
                    LineOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrOverrideSP' [CallEvent],
                    NULL [Column],
                    DistrOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    'ActionButtonSP' [CallEvent],
                    NULL [Column],
                    ButtonSp [SP_Name]
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
    UNION ALL
    SELECT DISTINCT NULL [BatchType],
                    NULL [BatchLevel],
                    'Report: '
                      + reportname [CallEvent],
                    NULL [Column],
                    REPLACE(reporturl,'GRID:','') [SP_Name]
    FROM   [MoBatch].bi_reports
    WHERE  reporturl LIKE 'GRID:%'
    ORDER BY [SP_Name]
  END</commandtext>
      <comment>Cater for BeforeSaveSp</comment>
    </command>
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_AppSettings]
               WHERE  [Setting] = 'FindDefaultCurrCol')
  INSERT INTO [MoBatch].[BI_AppSettings]
              ([Setting],
               [Description],
               [Value],
               [Sequence],
               [DropDown])
  SELECT N'FindDefaultCurrCol',
         N'Whether to default search screen field to column that user was on in grid',
         N'True',
         11,
         1</commandtext>
      <commandtext>IF NOT EXISTS (SELECT 'x'
               FROM   [MoBatch].[BI_Options]
               WHERE  [Option_Type] = 'FindDefaultCurrCol')
  INSERT INTO [MoBatch].[BI_Options]
              ([Option_Type],
               [Option_Value],
               [Option_Text],
               [Sequence])
  SELECT N'FindDefaultCurrCol',
         N'True',
         N'Default search screen field to column that user was on in grid',
         2
  UNION ALL
  SELECT N'FindDefaultCurrCol',
         N'False',
         N'Default search screen field to `All`',
         1</commandtext>
      <comment>Cater for defaulting search field</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_Lookup_Reports]
        AS
        BEGIN
        SELECT   a.reportname,
          a.reporturl,
          b.rptcategorydescr,
          b.batchtype,
          b.batchlevel,
          ISNULL(a.isdefault,0) AS [IsDefault],
          b.BatchReport
        FROM     mobatch.bi_reports a WITH (NOLOCK)
        INNER JOIN mobatch.bi_rptcategories b WITH (NOLOCK)
          ON a.rptcategoryid = b.rptcategoryid
        ORDER BY 
          b.SEQUENCE,
          a.SEQUENCE
        END</commandtext>
      <comment>Updated Report lookup for batch reports</comment>
    </command>
  </Version>
  <Version number="1.1.52.0">
    <command>
      <commandtext>IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[MoBatchDev].[a_sp_bi_NameSequence_BatchTypes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [MoBatchDev].[a_sp_bi_NameSequence_BatchTypes]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_bi_NameSequence_BatchTypes]
-- Purpose: Re-assign sequence of batch types to be in batch type name sequence
-- EXEC [MoBatchDev].a_sp_bi_NameSequence_BatchTypes
AS
  BEGIN
      DECLARE @TEMPTABLE TABLE(
        [Id]        INT IDENTITY ( 1, 1 ),
        [BatchType] VARCHAR(255))

      INSERT INTO @TEMPTABLE
      SELECT [BatchType]
      FROM   [MoBatch].[BI_BatchTypes]
      ORDER  BY [BatchType]

      DECLARE @ID        INT,
              @MaxID     INT,
              @BatchType VARCHAR(255),
              @Sequence  INT

      SELECT @Id = 1,
             @maxID = MAX(Id),
             @Sequence = 0
      FROM   @TEMPTABLE

      WHILE @ID &lt;= @MAXID
        BEGIN
            SET @Sequence = @Sequence + 10

            SELECT @BatchType = [BatchType]
            FROM   @TEMPTABLE
            WHERE  Id = @ID

            UPDATE [MoBatch].[BI_BatchTypes]
            SET    [Sequence] = @Sequence
            WHERE  [batchtype] = @BatchType

            SET @ID = @ID + 1
        END
  END</commandtext>
      <comment>SP to sort Batch Types Alphabetically</comment>
    </command>
  </Version>
  <Version number="1.1.53.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_BatchTypes ADD
	HeadRowValidateSP varchar(1024) NULL,
	LineRowValidateSP varchar(1024) NULL,
	DistrRowValidateSP varchar(1024) NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Select](
               @BatchType VARCHAR(255))
AS
  BEGIN
    SELECT   [BatchType],
             [AutoDrill] = ISNULL([AutoDrill],0),
             [ApproveSP],
             [ApproveStatus],
             [ProcessSP],
             [ProcessStatus],
             [HeadRowSetupSP],
             [LineRowSetupSP],
             [DistrRowSetupSP],
             [HeadRowSelectSP],
             [LineRowSelectSP],
             [DistrRowSelectSP],
             [HeadValidationSP],
             [LineValidationSP],
             [DistrValidationSP],
             [AfterCloseLinesSP],
             [AfterCloseDistrSP],
             [HeadValue1Descr],
             [HeadValue2Descr],
             [HeadValue3Descr],
             [HeadValue4Descr],
             [LineValue1Descr],
             [LineValue2Descr],
             [LineValue3Descr],
             [LineValue4Descr],
             [DistrValue1Descr],
             [DistrValue2Descr],
             [DistrValue3Descr],
             [DistrValue4Descr],
             [HeadValidationStatus],
             [LineValidationStatus],
             [DistrValidationStatus],
             [HeadCalculationSP],
             [HeadCalculationStatus],
             [LineCalculationSP],
             [LineCalculationStatus],
             [DistrCalculationSP],
             [DistrCalculationStatus],
             [HeadAfterLoadSP],
             [LineAfterLoadSP],
             [DistrAfterLoadSP],
             [HeadRowValidateSP],
             [LineRowValidateSP],
             [DistrRowValidateSP],
             [HeadBeforeSaveSP],
             [LineBeforeSaveSP],
             [DistrBeforeSaveSP],
             [HeadAfterSaveSP],
             [LineAfterSaveSP],
             [DistrAfterSaveSP],
             [HeadAfterDeleteSP],
             [LineAfterDeleteSP],
             [DistrAfterDeleteSP],
             [HeadDefaultSP],
             [LineDefaultSP],
             [DistrDefaultSP],
             [HeadOverrideSP],
             [LineOverrideSP],
             [DistrOverrideSP]
    FROM     [MoBatch].bi_batchtypes WITH (NOLOCK)
    WHERE    batchtype = @BatchType
    ORDER BY SEQUENCE
  END</commandtext>
      <commandtext>ALTER PROC [MoBatchDev].[a_sp_BI_Setup_StoredProcedures]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    DECLARE  @SP_Name VARCHAR(255)
    DECLARE  @return_value INT
                                                      
    DECLARE c_c CURSOR LOCAL FOR
    SELECT DISTINCT lookup_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT select_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT validation_sp sp_name
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ToolTip_SP sp_name
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT approvesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT processsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowsetupsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linerowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrrowselectsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linevalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrvalidationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT aftercloselinessp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT afterclosedistrsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linecalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrcalculationsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterloadsp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headbeforesavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headbeforesavesp IS NOT NULL 
           AND headbeforesavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT linebeforesavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  linebeforesavesp IS NOT NULL 
           AND linebeforesavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineaftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrbeforesavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrbeforesavesp IS NOT NULL 
           AND distrbeforesavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distraftersavesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT headafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT lineafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT distrafterdeletesp sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrDefaultSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrOverrideSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT HeadRowValidateSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadRowValidateSP IS NOT NULL 
           AND HeadRowValidateSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT LineRowValidateSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineRowValidateSP IS NOT NULL 
           AND LineRowValidateSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT DistrRowValidateSP sp_name
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrRowValidateSP IS NOT NULL 
           AND DistrRowValidateSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT ButtonSp sp_name
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT REPLACE(reporturl, 'GRID:','') sp_name
    FROM   [MoBatch].bi_reports
    WHERE  reporturl like 'GRID:%'
    --
    OPEN c_c
    FETCH NEXT FROM c_c
    INTO @SP_Name
    WHILE @@FETCH_STATUS = 0
      BEGIN
            
        --SELECT 'Processing SP: ' + @SP_Name AS storedprocedure
                
        -- If parameters exist (i.e. something after a space) then
        -- strip off everything after first space to get just the SP name
        IF Charindex(' ',@SP_Name)&gt;0
          SELECT @SP_Name = Left(@SP_Name,Patindex('% %',@SP_Name)
                                            - 1)
                                                        
        -- Now process SP to generate info about it
        EXEC [MoBatch].a_sp_BI_RecordSpParamInfo
          @SP_Name
                    
        --SELECT 'Result Status: ' + Convert(VARCHAR,@return_value) AS [Status]
        FETCH NEXT FROM c_c
        INTO @SP_Name
      END
    CLOSE c_c
    DEALLOCATE c_c
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatchDev].[a_sp_BI_Document_Summary]
-- Provides in output a summary of the installation
-- EXEC [MoBatch].[a_sp_BI_Document_Summary]
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NoCount  ON;
                        
    --=========================================
    -- Create temp table containing report data
    --=========================================
    CREATE TABLE #MobAtch_Configuration (
      [BatchCatCd]   VARCHAR(100),
      [BatchType]    VARCHAR(100),
      [BatchLevel]   INT,
      [ListSequence] INT,
      [ColumnID]     INT,
      [Section]      VARCHAR(100),
      [Text]         VARCHAR(2040))
        
    DECLARE  @ListSequence INT
                                                                                                                                                  
    --=================
    -- Batch Categories
    --=================
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Reflect Opening separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Categories
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = 'Batch Category : '
                      + [BatchCatDescr]
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                                                                                                                           
    -- Reflect Closing separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
                                                  
    --============
    -- Batch Types
    --============
    -- Reflect Opening separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Types
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    BatchType : '
                      + [BatchType]
                      + (CASE 
                           WHEN [AutoDrill] = 1
                           THEN ' (with auto-drilldown selected)'
                           ELSE ''
                         END)
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    -- Reflect Closing separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
                                                  
    --=============
    -- Batch Levels
    --=============
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Dashes line before levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- List all batch levels per batch types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        Batch Level : '
                      + (CASE 
                           WHEN [BatchLevel] = 'H'
                           THEN 'Header'
                           WHEN [BatchLevel] = 'L'
                           THEN 'Lines'
                           WHEN [BatchLevel] = 'D'
                           THEN 'Distribution'
                           ELSE 'Unknown'
                         END)
                      + ' - Table: '
                      + [Table]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- Dashes line after levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    --===============
    -- Display Values
    --===============
    -------------------------------
    -- Reflect Display Values title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Display Values',
           [Text] = '            Special Display Values (top of screen) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
                                                                                                                                                                          
    -- Header (Display Value)
    -- Display Value #1 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + HeadValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue1descr IS NOT NULL 
           AND HeadValue1descr &lt;&gt; ''
    -- Display Value #2 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + HeadValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue2descr IS NOT NULL 
           AND HeadValue2descr &lt;&gt; ''
    -- Display Value #3 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + HeadValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue3descr IS NOT NULL 
           AND HeadValue3descr &lt;&gt; ''
    -- Display Value #4 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + HeadValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue4descr IS NOT NULL 
           AND HeadValue4descr &lt;&gt; ''
                                                                                                                                                                                            
                                                                                                                                                                                            
    -- Lines (Display Value)
    -- Display Value #1 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + LineValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue1descr IS NOT NULL 
           AND LineValue1descr &lt;&gt; ''
    -- Display Value #2 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + LineValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue2descr IS NOT NULL 
           AND LineValue2descr &lt;&gt; ''
    -- Display Value #3 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + LineValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue3descr IS NOT NULL 
           AND LineValue3descr &lt;&gt; ''
    -- Display Value #4 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + LineValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue4descr IS NOT NULL 
           AND LineValue4descr &lt;&gt; ''
                                                                                                                                                                                                   
    -- Distribution (Display Value)
    -- Display Value #1 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + dIstrValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue1descr IS NOT NULL 
           AND dIstrValue1descr &lt;&gt; ''
    -- Display Value #2 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + dIstrValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue2descr IS NOT NULL 
           AND dIstrValue2descr &lt;&gt; ''
    -- Display Value #3 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + dIstrValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue3descr IS NOT NULL 
           AND dIstrValue3descr &lt;&gt; ''
    -- Display Value #4 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + dIstrValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue4descr IS NOT NULL 
           AND dIstrValue4descr &lt;&gt; ''
                                                                                                                                                                                                  
                                                                                                                                                                                                  
    --============================================
    -- Special Buttons (and right-click) Processes
    --============================================
    -------------------------------------------
    -- Reflect Special Processing buttons title
    -------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Processing Buttons',
           [Text] = '            Special Processing Buttons (top of screen + right-click) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    ------------------------------
    -- Validation buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + HeadValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadValidationStatus IS NULL 
                                 OR HeadValidationStatus = ''
                           THEN 'ALL'
                           ELSE HeadValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValidationsp IS NOT NULL 
           AND HeadValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Lines (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + LineValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineValidationStatus IS NULL 
                                 OR LineValidationStatus = ''
                           THEN 'ALL'
                           ELSE LineValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValidationsp IS NOT NULL 
           AND LineValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Distribution (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + dIstrValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN dIstrValidationStatus IS NULL 
                                 OR dIstrValidationStatus = ''
                           THEN 'ALL'
                           ELSE dIstrValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValidationsp IS NOT NULL 
           AND dIstrValidationsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    -------------------------------
    -- Calculation buttons (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + HeadCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadCalculationStatus IS NULL 
                                 OR HeadCalculationStatus = ''
                           THEN 'ALL'
                           ELSE HeadCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadCalculationsp IS NOT NULL 
           AND HeadCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Lines (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + LineCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineCalculationStatus IS NULL 
                                 OR LineCalculationStatus = ''
                           THEN 'ALL'
                           ELSE LineCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineCalculationsp IS NOT NULL 
           AND LineCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Distribution (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + dIstrCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN [dIstrCalculationStatus] IS NULL 
                                 OR [dIstrCalculationStatus] = ''
                           THEN 'ALL'
                           ELSE dIstrCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrCalculationsp IS NOT NULL 
           AND dIstrCalculationsp &lt;&gt; ''
                                                                                                                                                                                                              
                                                                                                                                                                                                              
    ---------------------------
    -- Approve buttons (if any)
    ---------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Approve Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Approve SP: `'
                      + Approvesp
                      + '` (for '
                      + (CASE 
                           WHEN ApproveStatus IS NULL 
                                 OR ApproveStatus = ''
                           THEN 'ALL'
                           ELSE ApproveStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Approvesp IS NOT NULL 
           AND Approvesp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    ------------------------------
    -- Processing buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Processing Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Process SP: `'
                      + Processsp
                      + '` (for '
                      + (CASE 
                           WHEN ProcessStatus IS NULL 
                                 OR ProcessStatus = ''
                           THEN 'ALL'
                           ELSE ProcessStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Processsp IS NOT NULL 
           AND Processsp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    -----------------------------------------------------
    -- Special Action buttons (All levels where existing)
    -----------------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                '
                      + ButtonLabel
                      + ' SP: `'
                      + Buttonsp
                      + '` (for '
                      + (CASE 
                           WHEN [ButtonStatus] IS NULL 
                                 OR [ButtonStatus] = ''
                           THEN 'ALL'
                           ELSE ButtonStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_Buttons b WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = b.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --=================================
    -- Special Events Stored Procedures
    --=================================
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    ------------------------------------------
    -- Reflect Special Processing Events title
    ------------------------------------------
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Events',
           [Text] = '            Special Events : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --------------------------
    -- Default Events (if any)
    --------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + HeadDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadDefaultsp IS NOT NULL 
           AND HeadDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Lines (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + LineDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineDefaultsp IS NOT NULL 
           AND LineDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Distributions (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + dIstrDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrDefaultsp IS NOT NULL 
           AND dIstrDefaultsp &lt;&gt; ''
                                                                                                                                                                                               
                                                                                                                                                                                      
    ----------------------------              
    -- Row Setup Events (if any)
    ----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + HeadRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSetUpsp IS NOT NULL 
           AND HeadRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + LinerowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSetUpsp IS NOT NULL 
           AND LinerowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + dIstrRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSetUpsp IS NOT NULL 
           AND dIstrRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                            
    -----------------------------
    -- After Load Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + HeadAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterLoadsp IS NOT NULL 
           AND HeadAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + LineAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterLoadsp IS NOT NULL 
           AND LineAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + dIstRafterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterLoadsp IS NOT NULL 
           AND dIstRafterLoadsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                  
    -----------------------------
    -- Row Select Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + HeadRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSelectsp IS NOT NULL 
           AND HeadRowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + LinerowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSelectsp IS NOT NULL 
           AND LinerowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + dIstrRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSelectsp IS NOT NULL 
           AND dIstrRowSelectsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    --------------------------------------
    -- Supervisor Override Access (if any)
    --------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + HeadOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadOverridesp IS NOT NULL 
           AND HeadOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + LineOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineOverridesp IS NOT NULL 
           AND LineOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + dIstRoverRidesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRoverRidesp IS NOT NULL 
           AND dIstRoverRidesp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                                          
    -------------------------------
    -- Row Validate Events (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Validate Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Validate SP: `'
                      + HeadRowValidatesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowValidatesp IS NOT NULL 
           AND HeadRowValidatesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Validate Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Validate SP: `'
                      + LineRowValidateSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineRowValidateSP IS NOT NULL 
           AND LineRowValidateSP &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Validate Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Validate SP: `'
                      + DistrRowValidateSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  DistrRowValidateSP IS NOT NULL 
           AND DistrRowValidateSP &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    ------------------------------
    -- Before Save Events (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + HeadBeforeSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadBeforeSavesp IS NOT NULL 
           AND HeadBeforeSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + LineBeforeSaveSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineBeforeSaveSP IS NOT NULL 
           AND LineBeforeSaveSP &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + DistrBeforeSaveSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  DistrBeforeSaveSP IS NOT NULL 
           AND DistrBeforeSaveSP &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    -----------------------------
    -- After Save Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + HeadAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterSavesp IS NOT NULL 
           AND HeadAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + LineAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterSavesp IS NOT NULL 
           AND LineAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + dIstRafterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterSavesp IS NOT NULL 
           AND dIstRafterSavesp &lt;&gt; ''
                                                                                                                                                                                                           

    -----------------------------
    -- After Delete Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + HeadAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterDeletesp IS NOT NULL 
           AND HeadAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + LineAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterDeletesp IS NOT NULL 
           AND LineAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Distributions (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + dIstRafterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterDeletesp IS NOT NULL 
           AND dIstRafterDeletesp &lt;&gt; ''
                                                                                                                                                                                                                       
                                                                                                                                                                                                                            
    ------------------------------------
    -- After Close Child Events (if any)
    ------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Lines SP: `'
                      + AfterCloseLinessp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterCloseLinessp IS NOT NULL 
           AND AfterCloseLinessp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Distributions SP: `'
                      + AfterClosedIstrsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterClosedIstrsp IS NOT NULL 
           AND AfterClosedIstrsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    --========
    -- Columns
    --========
    -------------------------------
    -- Reflect Columns title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Columns',
           [Text] = '            Columns : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    ----------------------
    -- Reflect each column
    ----------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT   [BatchCatCd] = [BatchCatCd],
             [BatchType] = bt.[BatchType],
             [BatchLevel] = (CASE 
                               WHEN [BatchLevel] = 'H'
                               THEN 1
                               WHEN [BatchLevel] = 'L'
                               THEN 2
                               WHEN [BatchLevel] = 'D'
                               THEN 3
                               ELSE 4
                             END),
             [ListSequence] = @ListSequence,
             [ColumnId] = c.[Sequence],
             [Section] = 'Columns',
             [Text] = REPLACE(REPLACE(REPLACE('                '
                                                + [Column]
                                                + ' ('
                                                + (CASE 
                                                     WHEN NULLIF([Rename To],'') IS NOT NULL
                                                     THEN ', Renamed to `'
                                                            + [Rename To]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Required],0) = 1
                                                     THEN ', Required '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Hide],0) = 1
                                                     THEN ', Hidden '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly],0) = 1
                                                     THEN ', ReadOnly '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly Existing],0) = 1
                                                     THEN ', ReadOnly Existing'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Status Col],0) = 1
                                                     THEN ', Status Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Computed],0) = 1
                                                     THEN ', Computed Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Format],'') IS NOT NULL
                                                     THEN ', Format" `'
                                                            + [Format]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Alignment],'NotSet') &lt;&gt; 'NotSet'
                                                     THEN ', Alignment: `'
                                                            + [Alignment]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Lookup_SP],'') IS NOT NULL
                                                     THEN ', Combobox SP: `'
                                                            + [Lookup_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Select_SP],'') IS NOT NULL
                                                     THEN ', CTRL-L SP: `'
                                                            + [Select_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Validation_SP],'') IS NOT NULL
                                                     THEN ', Cell Validation SP: `'
                                                            + [Validation_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Tooltip_SP],'') IS NOT NULL
                                                     THEN ', Tooltip SP: `'
                                                            + [Tooltip_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + ')',' ()',''),'(, ','('),
                              ' )',')')
    FROM     MobAtch.bi_Columns c
             INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
               ON bt.BatchType = c.BatchType
    ORDER BY c.[Sequence]
                                                              
    --=========================
    -- Remove obsolete headings
    --=========================
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Display Values'
    WHERE  ct.Section = 'Title Display Values'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Processing Buttons'
    WHERE  ct.Section = 'Title Special Processing Buttons'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Events'
    WHERE  ct.Section = 'Title Special Events'
           AND cl.[BatchType] IS NULL
                              
    --================================
    -- Select compiled data for output
    --================================
    SELECT [Text]
    FROM     #MobAtch_Configuration
    ORDER BY [BatchCatCd],
             [BatchType],
             [BatchLevel],
             [ListSequence],
             [ColumnId]
                          
    --=================================
    -- Drop temp table after completion
    --=================================
    DROP TABLE #MobAtch_Configuration
        
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypesSetup_Update](
               @BatchType              VARCHAR(255),
               @AutoDrill              BIT,
               @ApproveSP              VARCHAR(255),
               @ApproveStatus          VARCHAR(50),
               @ProcessSP              VARCHAR(255),
               @ProcessStatus          VARCHAR(50),
               @HeadRowSetupSP         VARCHAR(1024),
               @LineRowSetupSP         VARCHAR(1024),
               @DistrRowSetupSP        VARCHAR(1024),
               @HeadRowSelectSP        VARCHAR(1024),
               @LineRowSelectSP        VARCHAR(1024),
               @DistrRowSelectSP       VARCHAR(1024),
               @HeadValidationSP       VARCHAR(1024),
               @LineValidationSP       VARCHAR(1024),
               @DistrValidationSP      VARCHAR(1024),
               @AfterCloseLinesSP      VARCHAR(1024),
               @AfterCloseDistrSP      VARCHAR(1024),
               @HeadValue1Descr        VARCHAR(50),
               @HeadValue2Descr        VARCHAR(50),
               @HeadValue3Descr        VARCHAR(50),
               @HeadValue4Descr        VARCHAR(50),
               @LineValue1Descr        VARCHAR(50),
               @LineValue2Descr        VARCHAR(50),
               @LineValue3Descr        VARCHAR(50),
               @LineValue4Descr        VARCHAR(50),
               @DistrValue1Descr       VARCHAR(50),
               @DistrValue2Descr       VARCHAR(50),
               @DistrValue3Descr       VARCHAR(50),
               @DistrValue4Descr       VARCHAR(50),
               @HeadValidationStatus   VARCHAR(50),
               @LineValidationStatus   VARCHAR(50),
               @DistrValidationStatus  VARCHAR(50),
               @HeadCalculationSP      VARCHAR(1024),
               @HeadCalculationStatus  VARCHAR(50),
               @LineCalculationSP      VARCHAR(1024),
               @LineCalculationStatus  VARCHAR(50),
               @DistrCalculationSP     VARCHAR(1024),
               @DistrCalculationStatus VARCHAR(50),
               @HeadAfterLoadSP        VARCHAR(1024),
               @LineAfterLoadSP        VARCHAR(1024),
               @DistrAfterLoadSP       VARCHAR(1024),
               @HeadRowValidateSP      VARCHAR(1024),
               @LineRowValidateSP      VARCHAR(1024),
               @DistrRowValidateSP     VARCHAR(1024),
               @HeadBeforeSaveSP       VARCHAR(1024),
               @LineBeforeSaveSP       VARCHAR(1024),
               @DistrBeforeSaveSP      VARCHAR(1024),
               @HeadAfterSaveSP        VARCHAR(1024),
               @LineAfterSaveSP        VARCHAR(1024),
               @DistrAfterSaveSP       VARCHAR(1024),
               @HeadAfterDeleteSP      VARCHAR(1024),
               @LineAfterDeleteSP      VARCHAR(1024),
               @DistrAfterDeleteSP     VARCHAR(1024),
               @HeadDefaultSP          VARCHAR(1024),
               @LineDefaultSP          VARCHAR(1024),
               @DistrDefaultSP         VARCHAR(1024),
               @HeadOverrideSP         VARCHAR(1024),
               @LineOverrideSP         VARCHAR(1024),
               @DistrOverrideSP        VARCHAR(1024))
AS
  BEGIN
    SET nocount  OFF;
                
    UPDATE [MoBatch].bi_batchtypes
    SET    autodrill = @AutoDrill,
           approvesp = @ApproveSP,
           approvestatus = @ApproveStatus,
           processsp = @ProcessSP,
           processstatus = @ProcessStatus,
           headrowsetupsp = @HeadRowSetupSP,
           linerowsetupsp = @LineRowSetupSP,
           distrrowsetupsp = @DistrRowSetupSP,
           headrowselectsp = @HeadRowSelectSP,
           linerowselectsp = @LineRowSelectSP,
           distrrowselectsp = @DistrRowSelectSP,
           headvalidationsp = @HeadValidationSP,
           linevalidationsp = @LineValidationSP,
           distrvalidationsp = @DistrValidationSP,
           aftercloselinessp = @AfterCloseLinesSP,
           afterclosedistrsp = @AfterCloseDistrSP,
           headvalue1descr = @HeadValue1Descr,
           headvalue2descr = @HeadValue2Descr,
           headvalue3descr = @HeadValue3Descr,
           headvalue4descr = @HeadValue4Descr,
           linevalue1descr = @LineValue1Descr,
           linevalue2descr = @LineValue2Descr,
           linevalue3descr = @LineValue3Descr,
           linevalue4descr = @LineValue4Descr,
           distrvalue1descr = @DistrValue1Descr,
           distrvalue2descr = @DistrValue2Descr,
           distrvalue3descr = @DistrValue3Descr,
           distrvalue4descr = @DistrValue4Descr,
           headvalidationstatus = @HeadValidationStatus,
           linevalidationstatus = @LineValidationStatus,
           distrvalidationstatus = @DistrValidationStatus,
           headcalculationsp = @HeadCalculationSP,
           headcalculationstatus = @HeadCalculationStatus,
           linecalculationsp = @LineCalculationSP,
           linecalculationstatus = @LineCalculationStatus,
           distrcalculationsp = @DistrCalculationSP,
           distrcalculationstatus = @DistrCalculationStatus,
           headafterloadsp = @HeadAfterLoadSP,
           lineafterloadsp = @LineAfterLoadSP,
           distrafterloadsp = @DistrAfterLoadSP,
           headrowvalidatesp = @HeadRowValidateSP,
           linerowvalidatesp = @LineRowValidateSP,
           distrrowvalidatesp = @DistrRowValidateSP,
           headbeforesavesp = @HeadBeforeSaveSP,
           linebeforesavesp = @LineBeforeSaveSP,
           distrbeforesavesp = @DistrBeforeSaveSP,
           headaftersavesp = @HeadAfterSaveSP,
           lineaftersavesp = @LineAfterSaveSP,
           distraftersavesp = @DistrAfterSaveSP,
           headafterdeletesp = @HeadAfterDeleteSP,
           lineafterdeletesp = @LineAfterDeleteSP,
           distrafterdeletesp = @DistrAfterDeleteSP,
           headdefaultsp = @HeadDefaultSP,
           linedefaultsp = @LineDefaultSP,
           distrdefaultsp = @DistrDefaultSP,
           headoverridesp = @HeadOverrideSP,
           lineoverridesp = @LineOverrideSP,
           distroverridesp = @DistrOverrideSP
    WHERE  batchtype = @BatchType
                                                                                            
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Update BI_BatchTypesSPs Failed',16,1)
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_ConfigureBatchGridProcs_Select](
           -- This stored procedure is used to populate the ConfigureBatchGrid Procs grid
           @BatchType VARCHAR(50),
           @BatchLevel CHAR(1))
AS
  BEGIN
    IF @BatchLevel = 'H'
      BEGIN
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'CalculateSP' [CallEvent],
                        'Row Calculate Procedure' [Stored_Procecure_Type],
                        [HeadCalculationSP] [SP_Name],
                        [HeadCalculationStatus] [On_Status],
                        'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ValidateSP' [CallEvent],
                        'Row Validate Procedure' [Stored_Procecure_Type],
                        [HeadValidationSP] [SP_Name],
                        [HeadValidationStatus] [On_Status],
                        'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ApproveSP' [CallEvent],
                        'Row Approve Procedure' [Stored_Procecure_Type],
                        [ApproveSP] [SP_Name],
                        [ApproveStatus] [On_Status],
                        'Executes when clicking Approve Button or Right-click entry / Approve.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'ProcessSP' [CallEvent],
                        'Row Process Procedure' [Stored_Procecure_Type],
                        [ProcessSP] [SP_Name],
                        [ProcessStatus] [On_Status],
                        'Executes when clicking Process Button or Right-click entry / Process.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowSetupSP' [CallEvent],
                        'Row Setup Procedure' [Stored_Procecure_Type],
                        [HeadRowSetupSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for each entry when populating grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterLoadSP' [CallEvent],
                        'After Load Procedure' [Stored_Procecure_Type],
                        [HeadAfterLoadSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowSelectSP' [CallEvent],
                        'Row Select Procedure' [Stored_Procecure_Type],
                        [HeadRowSelectSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'RowValidateSP' [CallEvent],
                        'Row Validate Procedure' [Stored_Procecure_Type],
                        [HeadRowValidateSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes when moving off a row in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'BeforeSaveSP' [CallEvent],
                        'Before Save Procedure' [Stored_Procecure_Type],
                        [HeadBeforeSaveSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes before saving the data in the grid (good for pre-save validation).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterSaveSP' [CallEvent],
                        'After Save Procedure' [Stored_Procecure_Type],
                        [HeadAfterSaveSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after saving the data in the grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'AfterDeleteSP' [CallEvent],
                        'After Delete Procedure' [Stored_Procecure_Type],
                        [HeadAfterDeleteSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes after deleting one or more rows from a grid.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'DefaultSP' [CallEvent],
                        'Default Procedure' [Stored_Procecure_Type],
                        [HeadDefaultSP] [SP_Name],
                        'N/A' [On_Status],
                        'Used to default cell values for new row being added.' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'OverrideSP' [CallEvent],
                        'Override Procedure' [Stored_Procecure_Type],
                        [HeadOverrideSP] [SP_Name],
                        'N/A' [On_Status],
                        'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
        UNION ALL
        SELECT DISTINCT [BatchType],
                        @BatchLevel [BatchLevel],
                        'CloseLinesSP' [CallEvent],
                        'After Closing Lines Procedure' [Stored_Procecure_Type],
                        [AfterCloseLinesSP] [SP_Name],
                        'N/A' [On_Status],
                        'Executes for the batch header when returning after closing lines screen (E.g. return count of lines belonging to header).' [Event_Description]
        FROM   [MoBatch].bi_BatchTypes
        WHERE  [BatchType] = @BatchType
      END
    ELSE
      IF @BatchLevel = 'L'
        BEGIN
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CalculateSP' [CallEvent],
                          'Row Calculate Procedure' [Stored_Procecure_Type],
                          [LineCalculationSP] [SP_Name],
                          [LineCalculationStatus] [On_Status],
                          'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'ValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [LineValidationSP] [SP_Name],
                          [LineValidationStatus] [On_Status],
                          'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSetupSP' [CallEvent],
                          'Row Setup Procedure' [Stored_Procecure_Type],
                          [LineRowSetupSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for each entry when populating grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterLoadSP' [CallEvent],
                          'After Load Procedure' [Stored_Procecure_Type],
                          [LineAfterLoadSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSelectSP' [CallEvent],
                          'Row Select Procedure' [Stored_Procecure_Type],
                          [LineRowSelectSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [LineRowValidateSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes when moving off a row in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'BeforeSaveSP' [CallEvent],
                          'Before Save Procedure' [Stored_Procecure_Type],
                          [LineBeforeSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes before saving the data in the grid (good for pre-save validation).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterSaveSP' [CallEvent],
                          'After Save Procedure' [Stored_Procecure_Type],
                          [LineAfterSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after saving the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterDeleteSP' [CallEvent],
                          'After Delete Procedure' [Stored_Procecure_Type],
                          [LineAfterDeleteSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after deleting one or more rows from a grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'DefaultSP' [CallEvent],
                          'Default Procedure' [Stored_Procecure_Type],
                          [LineDefaultSP] [SP_Name],
                          'N/A' [On_Status],
                          'Used to default cell values for new row being added.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'OverrideSP' [CallEvent],
                          'Override Procedure' [Stored_Procecure_Type],
                          [LineOverrideSP] [SP_Name],
                          'N/A' [On_Status],
                          'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CloseDistrSP' [CallEvent],
                          'After Closing Distribution Procedure' [Stored_Procecure_Type],
                          [AfterCloseDistrSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for the batch line when returning after closing distribution screen (E.g. return count of distributions belonging to line).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
        END
      ELSE
        BEGIN
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'CalculateSP' [CallEvent],
                          'Row Calculate Procedure' [Stored_Procecure_Type],
                          [DistrCalculationSP] [SP_Name],
                          [DistrCalculationStatus] [On_Status],
                          'Executes when clicking Calculate Button or Right-click entry / Calculate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'ValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [DistrValidationSP] [SP_Name],
                          [DistrValidationStatus] [On_Status],
                          'Executes when clicking Validate Button or Right-click entry / Validate.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSetupSP' [CallEvent],
                          'Row Setup Procedure' [Stored_Procecure_Type],
                          [DistrRowSetupSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for each entry when populating grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterLoadSP' [CallEvent],
                          'After Load Procedure' [Stored_Procecure_Type],
                          [DistrAfterLoadSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after displaying (or refreshing) the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowSelectSP' [CallEvent],
                          'Row Select Procedure' [Stored_Procecure_Type],
                          [DistrRowSelectSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes for an entry when clicking on any cell within the row entry.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'RowValidateSP' [CallEvent],
                          'Row Validate Procedure' [Stored_Procecure_Type],
                          [DistrRowValidateSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes when moving off a row in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'BeforeSaveSP' [CallEvent],
                          'Before Save Procedure' [Stored_Procecure_Type],
                          [DistrBeforeSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes before saving the data in the grid (good for pre-save validation).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterSaveSP' [CallEvent],
                          'After Save Procedure' [Stored_Procecure_Type],
                          [DistrAfterSaveSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after saving the data in the grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'AfterDeleteSP' [CallEvent],
                          'After Delete Procedure' [Stored_Procecure_Type],
                          [DistrAfterDeleteSP] [SP_Name],
                          'N/A' [On_Status],
                          'Executes after deleting one or more rows from a grid.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'DefaultSP' [CallEvent],
                          'Default Procedure' [Stored_Procecure_Type],
                          [DistrDefaultSP] [SP_Name],
                          'N/A' [On_Status],
                          'Used to default cell values for new row being added.' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
          UNION ALL
          SELECT DISTINCT [BatchType],
                          @BatchLevel [BatchLevel],
                          'OverrideSP' [CallEvent],
                          'Override Procedure' [Stored_Procecure_Type],
                          [DistrOverrideSP] [SP_Name],
                          'N/A' [On_Status],
                          'Enable supervisor access to be entered and sent to specified stored procedure. Stored procedure + the text password (E.g. a_sp_Override password).' [Event_Description]
          FROM   [MoBatch].bi_BatchTypes
          WHERE  [BatchType] = @BatchType
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_ConfigureBatchGridProcs_Update](
           -- This stored procedure is used to update from the ConfigureBatchGrid Procs grid
           @BatchType VARCHAR(50),
           @BatchLevel            CHAR(1),
           @CallEvent             VARCHAR(50),
           @Stored_Procecure_Type VARCHAR(255),
           @SP_Name               VARCHAR(1024),
           @On_Status             VARCHAR(50),
           @Event_Description     VARCHAR(1024))
AS
  BEGIN
    IF @BatchLevel = 'H'
      BEGIN
        IF @CallEvent = 'CalculateSP'
          BEGIN
            UPDATE [MoBatch].bi_BatchTypes
            SET    [HeadCalculationSP] = @SP_Name,
                   [HeadCalculationStatus] = @On_Status
            WHERE  [BatchType] = @BatchType
          END
        ELSE
          IF @CallEvent = 'ValidateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [HeadValidationSP] = @SP_Name,
                     [HeadValidationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ApproveSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [ApproveSP] = @SP_Name,
                       [ApproveStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'ProcessSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [ProcessSP] = @SP_Name,
                         [ProcessStatus] = @On_Status
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'RowSetupSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [HeadRowSetupSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'AfterLoadSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [HeadAfterLoadSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'RowSelectSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [HeadRowSelectSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'RowValidateSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [HeadRowValidateSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                    ELSE
                      IF @CallEvent = 'BeforeSaveSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [HeadBeforeSaveSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                      IF @CallEvent = 'AfterSaveSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [HeadAfterSaveSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'AfterDeleteSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [HeadAfterDeleteSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'DefaultSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [HeadDefaultSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
                          ELSE
                            IF @CallEvent = 'OverrideSP'
                              BEGIN
                                UPDATE [MoBatch].bi_BatchTypes
                                SET    [HeadOverrideSP] = @SP_Name
                                WHERE  [BatchType] = @BatchType
                              END
                            ELSE
                              IF @CallEvent = 'CloseLinesSP'
                                BEGIN
                                  UPDATE [MoBatch].bi_BatchTypes
                                  SET    [AfterCloseLinesSP] = @SP_Name
                                  WHERE  [BatchType] = @BatchType
                                END
      END
    ELSE
      IF @BatchLevel = 'L'
        BEGIN
          IF @CallEvent = 'CalculateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [LineCalculationSP] = @SP_Name,
                     [LineCalculationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ValidateSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [LineValidationSP] = @SP_Name,
                       [LineValidationStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'RowSetupSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [LineRowSetupSP] = @SP_Name
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'AfterLoadSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [LineAfterLoadSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'RowSelectSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [LineRowSelectSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'RowValidateSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineRowValidateSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                  ELSE
                    IF @CallEvent = 'BeforeSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineBeforeSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                    IF @CallEvent = 'AfterSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [LineAfterSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterDeleteSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [LineAfterDeleteSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'DefaultSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [LineDefaultSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'OverrideSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [LineOverrideSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
                          ELSE
                            IF @CallEvent = 'CloseDistrSP'
                              BEGIN
                                UPDATE [MoBatch].bi_BatchTypes
                                SET    [AfterCloseDistrSP] = @SP_Name
                                WHERE  [BatchType] = @BatchType
                              END
        END
      ELSE
        BEGIN
          IF @CallEvent = 'CalculateSP'
            BEGIN
              UPDATE [MoBatch].bi_BatchTypes
              SET    [DistrCalculationSP] = @SP_Name,
                     [DistrCalculationStatus] = @On_Status
              WHERE  [BatchType] = @BatchType
            END
          ELSE
            IF @CallEvent = 'ValidateSP'
              BEGIN
                UPDATE [MoBatch].bi_BatchTypes
                SET    [DistrValidationSP] = @SP_Name,
                       [DistrValidationStatus] = @On_Status
                WHERE  [BatchType] = @BatchType
              END
            ELSE
              IF @CallEvent = 'RowSetupSP'
                BEGIN
                  UPDATE [MoBatch].bi_BatchTypes
                  SET    [DistrRowSetupSP] = @SP_Name
                  WHERE  [BatchType] = @BatchType
                END
              ELSE
                IF @CallEvent = 'AfterLoadSP'
                  BEGIN
                    UPDATE [MoBatch].bi_BatchTypes
                    SET    [DistrAfterLoadSP] = @SP_Name
                    WHERE  [BatchType] = @BatchType
                  END
                ELSE
                  IF @CallEvent = 'RowSelectSP'
                    BEGIN
                      UPDATE [MoBatch].bi_BatchTypes
                      SET    [DistrRowSelectSP] = @SP_Name
                      WHERE  [BatchType] = @BatchType
                    END
                  ELSE
                    IF @CallEvent = 'RowValidateSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrRowValidateSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                  ELSE
                    IF @CallEvent = 'BeforeSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrBeforeSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                    IF @CallEvent = 'AfterSaveSP'
                      BEGIN
                        UPDATE [MoBatch].bi_BatchTypes
                        SET    [DistrAfterSaveSP] = @SP_Name
                        WHERE  [BatchType] = @BatchType
                      END
                    ELSE
                      IF @CallEvent = 'AfterDeleteSP'
                        BEGIN
                          UPDATE [MoBatch].bi_BatchTypes
                          SET    [DistrAfterDeleteSP] = @SP_Name
                          WHERE  [BatchType] = @BatchType
                        END
                      ELSE
                        IF @CallEvent = 'DefaultSP'
                          BEGIN
                            UPDATE [MoBatch].bi_BatchTypes
                            SET    [DistrDefaultSP] = @SP_Name
                            WHERE  [BatchType] = @BatchType
                          END
                        ELSE
                          IF @CallEvent = 'OverrideSP'
                            BEGIN
                              UPDATE [MoBatch].bi_BatchTypes
                              SET    [DistrOverrideSP] = @SP_Name
                              WHERE  [BatchType] = @BatchType
                            END
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_StoredProcedures_List]
-- This stored procedure is used to re-create SP information
-- for all SPs referred to in this MoBatch database
AS
  BEGIN
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    lookup_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  lookup_sp IS NOT NULL 
           AND lookup_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    select_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  select_sp IS NOT NULL 
           AND select_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    validation_sp [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  validation_sp IS NOT NULL 
           AND validation_sp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    NULL [CallEvent],
                    [Column],
                    ToolTip_SP [SP_Name]
    FROM   [MoBatch].bi_columns
    WHERE  ToolTip_SP IS NOT NULL 
           AND ToolTip_SP &lt;&gt; ''
    ---
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ApproveSP' [CallEvent],
                    NULL [Column],
                    approvesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  approvesp IS NOT NULL 
           AND approvesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'ProcessSP' [CallEvent],
                    NULL [Column],
                    processsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  processsp IS NOT NULL 
           AND processsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSetupSP' [CallEvent],
                    NULL [Column],
                    headrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowsetupsp IS NOT NULL 
           AND headrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSetupSP' [CallEvent],
                    NULL [Column],
                    linerowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowsetupsp IS NOT NULL 
           AND linerowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSetupSP' [CallEvent],
                    NULL [Column],
                    distrrowsetupsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowsetupsp IS NOT NULL 
           AND distrrowsetupsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowSelectSP' [CallEvent],
                    NULL [Column],
                    headrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headrowselectsp IS NOT NULL 
           AND headrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowSelectSP' [CallEvent],
                    NULL [Column],
                    linerowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linerowselectsp IS NOT NULL 
           AND linerowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowSelectSP' [CallEvent],
                    NULL [Column],
                    distrrowselectsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrrowselectsp IS NOT NULL 
           AND distrrowselectsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadValidationSP' [CallEvent],
                    NULL [Column],
                    headvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headvalidationsp IS NOT NULL 
           AND headvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineValidationSP' [CallEvent],
                    NULL [Column],
                    linevalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linevalidationsp IS NOT NULL 
           AND linevalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrValidationSP' [CallEvent],
                    NULL [Column],
                    distrvalidationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrvalidationsp IS NOT NULL 
           AND distrvalidationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'AfterCloseLinesSP' [CallEvent],
                    NULL [Column],
                    aftercloselinessp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  aftercloselinessp IS NOT NULL 
           AND aftercloselinessp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'AfterCloseDistrSP' [CallEvent],
                    NULL [Column],
                    afterclosedistrsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  afterclosedistrsp IS NOT NULL 
           AND afterclosedistrsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadCalculationSP' [CallEvent],
                    NULL [Column],
                    headcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headcalculationsp IS NOT NULL 
           AND headcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineCalculationSP' [CallEvent],
                    NULL [Column],
                    linecalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  linecalculationsp IS NOT NULL 
           AND linecalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrCalculationSP' [CallEvent],
                    NULL [Column],
                    distrcalculationsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrcalculationsp IS NOT NULL 
           AND distrcalculationsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterLoadSP' [CallEvent],
                    NULL [Column],
                    headafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterloadsp IS NOT NULL 
           AND headafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterLoadSP' [CallEvent],
                    NULL [Column],
                    lineafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterloadsp IS NOT NULL 
           AND lineafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterLoadSP' [CallEvent],
                    NULL [Column],
                    distrafterloadsp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterloadsp IS NOT NULL 
           AND distrafterloadsp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadRowValidateSP' [CallEvent],
                    NULL [Column],
                    HeadRowValidateSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadRowValidateSP IS NOT NULL 
           AND HeadRowValidateSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadBeforeSaveSP' [CallEvent],
                    NULL [Column],
                    HeadBeforeSaveSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadBeforeSaveSP IS NOT NULL 
           AND HeadBeforeSaveSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterSaveSP' [CallEvent],
                    NULL [Column],
                    headaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headaftersavesp IS NOT NULL 
           AND headaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineRowValidateSP' [CallEvent],
                    NULL [Column],
                    LineRowValidateSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineRowValidateSP IS NOT NULL 
           AND LineRowValidateSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineBeforeSaveSP' [CallEvent],
                    NULL [Column],
                    LineBeforeSaveSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineBeforeSaveSP IS NOT NULL 
           AND LineBeforeSaveSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterSaveSP' [CallEvent],
                    NULL [Column],
                    lineaftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineaftersavesp IS NOT NULL 
           AND lineaftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrRowValidateSP' [CallEvent],
                    NULL [Column],
                    DistrRowValidateSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrRowValidateSP IS NOT NULL 
           AND DistrRowValidateSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrBeforeSaveSP' [CallEvent],
                    NULL [Column],
                    DistrBeforeSaveSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrBeforeSaveSP IS NOT NULL 
           AND DistrBeforeSaveSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterSaveSP' [CallEvent],
                    NULL [Column],
                    distraftersavesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distraftersavesp IS NOT NULL 
           AND distraftersavesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    headafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  headafterdeletesp IS NOT NULL 
           AND headafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    lineafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  lineafterdeletesp IS NOT NULL 
           AND lineafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrAfterDeleteSP' [CallEvent],
                    NULL [Column],
                    distrafterdeletesp [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  distrafterdeletesp IS NOT NULL 
           AND distrafterdeletesp &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadDefaultSP' [CallEvent],
                    NULL [Column],
                    HeadDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadDefaultSP IS NOT NULL 
           AND HeadDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineDefaultSP' [CallEvent],
                    NULL [Column],
                    LineDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineDefaultSP IS NOT NULL 
           AND LineDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrDefaultSP' [CallEvent],
                    NULL [Column],
                    DistrDefaultSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrDefaultSP IS NOT NULL 
           AND DistrDefaultSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'H' [BatchLevel],
                    'HeadOverrideSP' [CallEvent],
                    NULL [Column],
                    HeadOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  HeadOverrideSP IS NOT NULL 
           AND HeadOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'L' [BatchLevel],
                    'LineOverrideSP' [CallEvent],
                    NULL [Column],
                    LineOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  LineOverrideSP IS NOT NULL 
           AND LineOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    'D' [BatchLevel],
                    'DistrOverrideSP' [CallEvent],
                    NULL [Column],
                    DistrOverrideSP [SP_Name]
    FROM   [MoBatch].bi_batchtypes
    WHERE  DistrOverrideSP IS NOT NULL 
           AND DistrOverrideSP &lt;&gt; ''
    UNION ALL
    SELECT DISTINCT [BatchType],
                    [BatchLevel],
                    'ActionButtonSP' [CallEvent],
                    NULL [Column],
                    ButtonSp [SP_Name]
    FROM   [MoBatch].BI_Buttons
    UNION ALL
    SELECT DISTINCT '' [BatchType],
                    '' [BatchLevel],
                    '' [CallEvent],
                    NULL [Column],
                    '[MoBatch].a_sp_BI_Get_SPs SELECTITEM_SP_Name' [SP_Name]
    UNION ALL
    SELECT DISTINCT NULL [BatchType],
                    NULL [BatchLevel],
                    'Report: '
                      + reportname [CallEvent],
                    NULL [Column],
                    REPLACE(reporturl,'GRID:','') [SP_Name]
    FROM   [MoBatch].bi_reports
    WHERE  reporturl LIKE 'GRID:%'
    ORDER BY [SP_Name]
  END</commandtext>
      <comment>Cater for RowValidate Sp</comment>
    </command>
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Users ADD
	EmailAddress varchar(255) NULL,
	PhoneNo varchar(30) NULL</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_bi_Users_Select]
  @UserId VARCHAR(255)
AS
  BEGIN
      SET NoCount ON

      SELECT [UserId],
             [FirstName],
             [RoleId],
             [SurName],
             [EmailAddress],
             [PhoneNo]
      FROM   [MoBatch].[BI_Users]
      WHERE  ( [UserId] = @UserId
                OR @UserId IS NULL )
      ORDER  BY [UserId]
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_bi_Users_Update]
  @UserId    VARCHAR(255),
  @FirstName VARCHAR(255),
  @RoleId    VARCHAR(50),
  @SurName   VARCHAR(255),
  @EmailAddress   VARCHAR(255),
  @PhoneNo   VARCHAR(30)
AS
  BEGIN
      SET NoCount ON
      SET xAct_Abort ON

      BEGIN TRAN

      UPDATE [MoBatch].[BI_Users]
      SET    [UserId] = @UserId,
             [FirstName] = @FirstName,
             [RoleId] = @RoleId,
             [SurName] = @SurName,
             [EmailAddress] = @EmailAddress,
             [PhoneNo] = @PhoneNo
      WHERE  [UserId] = @UserId

      -- Begin Return Select - do not remove
      SELECT [UserId],
             [FirstName],
             [RoleId],
             [SurName],
             [EmailAddress],
             [PhoneNo]
      FROM   [MoBatch].[BI_Users]
      WHERE  [UserId] = @UserId

      -- End Return Select - do not remove
      COMMIT TRAN
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_bi_Users_Insert]
  @UserId    VARCHAR(255),
  @FirstName VARCHAR(255),
  @RoleId    VARCHAR(50),
  @SurName   VARCHAR(255),
  @EmailAddress   VARCHAR(255),
  @PhoneNo   VARCHAR(30)
AS
  BEGIN
      SET NoCount ON
      SET xAct_Abort ON

      BEGIN TRAN

      INSERT INTO [MoBatch].[BI_Users]
                  ([UserId],
                   [FirstName],
                   [RoleId],
                   [SurName],
                   [EmailAddress],
                   [PhoneNo])
      SELECT @UserId,
             @FirstName,
             @RoleId,
             @SurName,
             @EmailAddress,
             @PhoneNo

      -- Begin Return Select - do not remove
      SELECT [UserId],
             [FirstName],
             [RoleId],
             [SurName]
             [EmailAddress],
             [PhoneNo]
      FROM   [MoBatch].[BI_Users]
      WHERE  [UserId] = @UserId

      -- End Return Select - do not remove
      COMMIT
  END</commandtext>
      <comment>User Email+Phone</comment>
    </command>
  </Version>
  <Version number="1.1.54.0">
    <command>
      <commandtext>IF EXISTS (SELECT TOP 1 1 FROM sys.procedures where object_id = object_id('[MoBatchDev].[a_sp_bi_Insert_HeaderLevel]'))
BEGIN
	DROP PROCEDURE [MoBatchDev].[a_sp_bi_Insert_HeaderLevel]
END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_bi_Insert_HeaderLevel]
  -- ===============================================================================
  -- Author:        R Blomstrand
  -- Create date:   01/09/2010
  -- Description:   Shifts batch levels down one level allowing new header level to
  --                be added. E.g. if batch type with header and lines levels, this
  --                will generate SQL to move lines level to distribution and header
  --                to lines.
  --                Please note that a backup should be taken before running this
  -- EXEC [MoBatchDev].[a_sp_BI_Insert_HeaderLevel] 'AmexCard Monthly Matching'
  -- ===============================================================================
  @BatchType VARCHAR(50) = 'AmexCard Monthly Matching'
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NoCount ON;

      IF EXISTS (SELECT 'x'
                 FROM   MoBatch.BI_Tables t
                 WHERE  t.BatchType = @BatchType
                        AND t.BatchLevel = 'D')
        BEGIN
            RAISERROR('Unable to insert header as all 3 levels already used (distribution level already exists)',
                      16,
                      1)

            RETURN -1 --Failure.
        END

      UPDATE MoBatch.BI_Tables
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Tables
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Columns
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Columns
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Buttons
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Buttons
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Layout
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Layout
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_dm_Structure_cols
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_dm_Structure_cols
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_dm_Structure
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_dm_Structure
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_GenericSearch
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_GenericSearch
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Filters
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_Filters
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_rptCatEgories
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_rptCatEgories
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_dm_Query
      SET    BatchLevel = 'D'
      WHERE  BatchLevel = 'L'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_dm_Query
      SET    BatchLevel = 'L'
      WHERE  BatchLevel = 'H'
             AND BatchType = @BatchType

      UPDATE MoBatch.BI_BatchTypes
      SET    dIstrRowSetUpsp = LinerowSetUpsp,
             dIstrRowSelectsp = LinerowSelectsp,
             dIstrValidationsp = LineValidationsp,
             dIstrValue1descr = LineValue1descr,
             dIstrValue2descr = LineValue2descr,
             dIstrValue3descr = LineValue3descr,
             dIstrValue4descr = LineValue4descr,
             dIstrValidationStatus = LineValidationStatus,
             dIstrCalculationsp = LineCalculationsp,
             dIstrCalculationStatus = LineCalculationStatus,
             dIstRafterLoadsp = LineAfterLoadsp,
             dIstRafterSavesp = LineAfterSavesp,
             dIstRafterDeletesp = LineAfterDeletesp,
             dIstrDefaultsp = LineDefaultsp,
             dIstRoverRidesp = LineOverridesp,
             dIstrBeforeSavesp = LineBeforeSavesp,
             dIstrRowValidatesp = LinerowValidatesp,
             LinerowSetUpsp = HeadRowSetUpsp,
             LinerowSelectsp = HeadRowSelectsp,
             LineValidationsp = HeadValidationsp,
             LineValue1descr = HeadValue1descr,
             LineValue2descr = HeadValue2descr,
             LineValue3descr = HeadValue3descr,
             LineValue4descr = HeadValue4descr,
             LineValidationStatus = HeadValidationStatus,
             LineCalculationsp = HeadCalculationsp,
             LineCalculationStatus = HeadCalculationStatus,
             LineAfterLoadsp = HeadAfterLoadsp,
             LineAfterSavesp = HeadAfterSavesp,
             LineAfterDeletesp = HeadAfterDeletesp,
             LineDefaultsp = HeadDefaultsp,
             LineOverridesp = HeadOverridesp,
             LineBeforeSavesp = HeadBeforeSavesp,
             LinerowValidatesp = HeadRowValidatesp,
             HeadRowSetUpsp = NULL,
             HeadRowSelectsp = NULL,
             HeadValidationsp = NULL,
             HeadValue1descr = NULL,
             HeadValue2descr = NULL,
             HeadValue3descr = NULL,
             HeadValue4descr = NULL,
             HeadValidationStatus = NULL,
             HeadCalculationsp = NULL,
             HeadCalculationStatus = NULL,
             HeadAfterLoadsp = NULL,
             HeadAfterSavesp = NULL,
             HeadAfterDeletesp = NULL,
             HeadDefaultsp = NULL,
             HeadOverridesp = NULL,
             HeadBeforeSavesp = NULL,
             HeadRowValidatesp = NULL
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Layout
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'L'
             AND [key] = 'Dock_Layout'
  END</commandtext>
      <commandtext>CREATE PROC [MoBatchDev].[a_sp_Generate_Inserts] (
  @table_name          VARCHAR(MAX),-- The table/view for which the INSERT statements will be generated using the existing data
  @target_table        VARCHAR(MAX) = NULL,-- Use this parameter to specify a different table name into which the data will be inserted
  @include_column_list BIT = 1,-- Use this parameter to include/ommit column list in the generated INSERT statement
  @from                VARCHAR(MAX) = NULL,-- Use this parameter to filter the rows based on a filter condition (using WHERE)
  @include_timestamp   BIT = 0,-- Specify 1 for this parameter, if you want to include the TIMESTAMP/ROWVERSION column's data in the INSERT statement
  @debug_mode          BIT = 0,-- If @debug_mode is set to 1, the SQL statements constructed by this procedure will be printed for later examination
  @owner               VARCHAR(64) = NULL,-- Use this parameter if you are not the owner of the table
  @ommit_images        BIT = 0,-- Use this parameter to generate INSERT statements by omitting the 'image' columns
  @ommit_identity      BIT = 0,-- Use this parameter to ommit the identity columns
  @top                 INT = NULL,-- Use this parameter to generate INSERT statements only for the TOP n rows
  @cols_to_include     VARCHAR(MAX) = NULL,-- List of columns to be included in the INSERT statement
  @cols_to_exclude     VARCHAR(MAX) = NULL,-- List of columns to be excluded from the INSERT statement
  @disable_constraints BIT = 0,-- When 1, disables foreign key constraints and enables them after the INSERT statements
  @ommit_computed_cols BIT = 0 -- When 1, computed columns will not be included in the INSERT statement
)
AS
  BEGIN
      /***********************************************************************************************************
      Procedure:	sp_Generate_Inserts  (Build 22) 
      		(Copyright © 2002 Narayana Vyas Kondreddi. All rights reserved.)
                                                
      Purpose:	To generate INSERT statements from existing data. 
      		These INSERTS can be executed to regenerate the data at some other location.
      		This procedure is also useful to create a database setup, where in you can 
      		script your data along with your table definitions.
      
      Written by:	Narayana Vyas Kondreddi
      	        http://vyaskn.tripod.com
      
      Acknowledgements:
      		Divya Kalra	-- For beta testing
      		Mark Charsley	-- For reporting a problem with scripting uniqueidentifier columns with NULL values
      		Artur Zeygman	-- For helping me simplify a bit of code for handling non-dbo owned tables
      		Joris Laperre   -- For reporting a regression bug in handling text/ntext columns
      
      Tested on: 	SQL Server 7.0 and SQL Server 2000 and SQL Server 2005
      
      Date created:	January 17th 2001 21:52 GMT
      
      Date modified:	May 1st 2002 19:50 GMT
      
      Email: 		vyaskn@hotmail.com
      
      NOTE:		This procedure may not work with tables with too many columns.
      		Results can be unpredictable with huge text columns or SQL Server 2000's sql_variant data types
      		Whenever possible, Use @include_column_list parameter to ommit column list in the INSERT statement, for better results
      		IMPORTANT: This procedure is not tested with internation data (Extended characters or Unicode). If needed
      		you might want to convert the datatypes of character variables in this procedure to their respective unicode counterparts
      		like nchar and nvarchar
      
      		ALSO NOTE THAT THIS PROCEDURE IS NOT UPDATED TO WORK WITH NEW DATA TYPES INTRODUCED IN SQL SERVER 2005 / YUKON
      		
      
      Example 1:	To generate INSERT statements for table 'titles':
      		
      		EXEC a_sp_Generate_Inserts 'titles'
      
      Example 2: 	To ommit the column list in the INSERT statement: (Column list is included by default)
      		IMPORTANT: If you have too many columns, you are advised to ommit column list, as shown below,
      		to avoid erroneous results
      		
      		EXEC a_sp_Generate_Inserts 'titles', @include_column_list = 0
      
      Example 3:	To generate INSERT statements for 'titlesCopy' table from 'titles' table:
      
      		EXEC a_sp_Generate_Inserts 'titles', 'titlesCopy'
      
      Example 4:	To generate INSERT statements for 'titles' table for only those titles 
      		which contain the word 'Computer' in them:
      		NOTE: Do not complicate the FROM or WHERE clause here. It's assumed that you are good with T-SQL if you are using this parameter
      
      		EXEC a_sp_Generate_Inserts 'titles', @from = "from titles where title like '%Computer%'"
      
      Example 5: 	To specify that you want to include TIMESTAMP column's data as well in the INSERT statement:
      		(By default TIMESTAMP column's data is not scripted)
      
      		EXEC a_sp_Generate_Inserts 'titles', @include_timestamp = 1
      
      Example 6:	To print the debug information:
        
      		EXEC a_sp_Generate_Inserts 'titles', @debug_mode = 1
      
      Example 7: 	If you are not the owner of the table, use @owner parameter to specify the owner name
      		To use this option, you must have SELECT permissions on that table
      
      		EXEC a_sp_Generate_Inserts Nickstable, @owner = 'Nick'
      
      Example 8: 	To generate INSERT statements for the rest of the columns excluding images
      		When using this otion, DO NOT set @include_column_list parameter to 0.
      
      		EXEC a_sp_Generate_Inserts imgtable, @ommit_images = 1
      
      Example 9: 	To generate INSERT statements excluding (ommiting) IDENTITY columns:
      		(By default IDENTITY columns are included in the INSERT statement)
      
      		EXEC a_sp_Generate_Inserts mytable, @ommit_identity = 1
      
      Example 10: 	To generate INSERT statements for the TOP 10 rows in the table:
      		
      		EXEC a_sp_Generate_Inserts mytable, @top = 10
      
      Example 11: 	To generate INSERT statements with only those columns you want:
      		
      		EXEC a_sp_Generate_Inserts titles, @cols_to_include = "'title','title_id','au_id'"
      
      Example 12: 	To generate INSERT statements by omitting certain columns:
      		
      		EXEC a_sp_Generate_Inserts titles, @cols_to_exclude = "'title','title_id','au_id'"
      
      Example 13:	To avoid checking the foreign key constraints while loading data with INSERT statements:
      		
      		EXEC a_sp_Generate_Inserts titles, @disable_constraints = 1
      
      Example 14: 	To exclude computed columns from the INSERT statement:
      		EXEC a_sp_Generate_Inserts MyTable, @ommit_computed_cols = 1
      ***********************************************************************************************************/
      SET NoCount ON

      --Making sure user only uses either @cols_to_include or @cols_to_exclude
      IF ( ( @cols_to_include IS NOT NULL )
           AND ( @cols_to_exclude IS NOT NULL ) )
        BEGIN
            RAISERROR('Use either @cols_to_include or @cols_to_exclude. Do not use both the parameters at once',
                      16,
                      1)

            RETURN -1 --Failure. Reason: Both @cols_to_include and @cols_to_exclude parameters are specified
        END

      --Making sure the @cols_to_include and @cols_to_exclude parameters are receiving values in proper format
      IF ( ( @cols_to_include IS NOT NULL )
           AND ( PatIndex('''%''', @cols_to_include) = 0 ) )
        BEGIN
            RAISERROR('Invalid use of @cols_to_include property',
                      16,
                      1)

            PRINT 'Specify column names surrounded by single quotes and separated by commas'

            PRINT 'Eg: EXEC a_sp_Generate_Inserts titles, @cols_to_include = "''title_id'',''title''"'

            RETURN -1 --Failure. Reason: Invalid use of @cols_to_include property
        END

      IF ( ( @cols_to_exclude IS NOT NULL )
           AND ( PatIndex('''%''', @cols_to_exclude) = 0 ) )
        BEGIN
            RAISERROR('Invalid use of @cols_to_exclude property',
                      16,
                      1)

            PRINT 'Specify column names surrounded by single quotes and separated by commas'

            PRINT 'Eg: EXEC a_sp_Generate_Inserts titles, @cols_to_exclude = "''title_id'',''title''"'

            RETURN -1 --Failure. Reason: Invalid use of @cols_to_exclude property
        END

      --Checking to see if the database name is specified along wih the table name
      --Your database context should be local to the table for which you want to generate INSERT statements
      --specifying the database name is not allowed
      IF ( ParseName(@table_name, 3) ) IS NOT NULL
        BEGIN
            RAISERROR('Do not specify the database name. Be in the required database and just specify the table name.',
                      16,
                      1)

            RETURN -1 --Failure. Reason: Database name is specified along with the table name, which is not allowed
        END

      --Checking for the existence of 'user table' or 'view'
      --This procedure is not written to work on system tables
      --To script the data in system tables, just create a view on the system tables and script the view instead
      IF @owner IS NULL
        BEGIN
            IF ( ( Object_Id(@table_name, 'U') IS NULL )
                 AND ( Object_Id(@table_name, 'V') IS NULL ) )
              BEGIN
                  RAISERROR('User table or view not found.',
                            16,
                            1)

                  PRINT 'You may see this error, if you are not the owner of this table or view. In that case use @owner parameter to specify the owner name.'

                  PRINT 'Make sure you have SELECT permission on that table or view.'

                  RETURN -1 --Failure. Reason: There is no user table or view with this name
              END
        END
      ELSE
        BEGIN
            IF NOT EXISTS (SELECT 1
                           FROM   Information_scHema.Tables
                           WHERE  Table_Name = @table_name
                                  AND ( Table_Type = 'BASE TABLE'
                                         OR Table_Type = 'VIEW' )
                                  AND Table_scHema = @owner)
              BEGIN
                  RAISERROR('User table or view not found.',
                            16,
                            1)

                  PRINT 'You may see this error, if you are not the owner of this table. In that case use @owner parameter to specify the owner name.'

                  PRINT 'Make sure you have SELECT permission on that table or view.'

                  RETURN -1 --Failure. Reason: There is no user table or view with this name		
              END
        END

      --Variable declarations
      DECLARE @Column_ID     INT,
              @Column_List   VARCHAR(8000),
              @Column_Name   VARCHAR(128),
              @Start_Insert  VARCHAR(786),
              @Data_Type     VARCHAR(128),
              @Actual_Values VARCHAR(8000),--This is the string that will be finally executed to generate INSERT statements
              @IDN           VARCHAR(128) --Will contain the IDENTITY column's name in the table
      --Variable Initialization
      SET @IDN = ''
      SET @Column_ID = 0
      SET @Column_Name = ''
      SET @Column_List = ''
      SET @Actual_Values = ''

      IF @owner IS NULL
        BEGIN
            SET @Start_Insert = 'INSERT INTO ' + '[' + rTrim(Coalesce(@target_table, @table_name)) + ']'
        END
      ELSE
        BEGIN
            SET @Start_Insert = 'INSERT ' + '[' + lTrim(rTrim(@owner)) + '].' + '[' + rTrim(Coalesce(@target_table, @table_name)) + ']'
        END

      --To get the first column's ID
      SELECT @Column_ID = MIN(Ordinal_Position)
      FROM   Information_scHema.Columns (NoLock)
      WHERE  Table_Name = @table_name
             AND ( @owner IS NULL
                    OR Table_scHema = @owner )

      --Loop through all the columns of the table, to get the column names and their data types
      WHILE @Column_ID IS NOT NULL
        BEGIN
            SELECT @Column_Name = QuoteName(Column_Name),
                   @Data_Type = Data_Type
            FROM   Information_scHema.Columns (NoLock)
            WHERE  Ordinal_Position = @Column_ID
                   AND Table_Name = @table_name
                   AND ( @owner IS NULL
                          OR Table_scHema = @owner )

            IF @cols_to_include IS NOT NULL --Selecting only user specified columns
              BEGIN
                  IF CharIndex('''' + SubString(@Column_Name, 2, len(@Column_Name) - 2) + '''', @cols_to_include) = 0
                    BEGIN
                        GOTO Skip_Loop
                    END
              END

            IF @cols_to_exclude IS NOT NULL --Selecting only user specified columns
              BEGIN
                  IF CharIndex('''' + SubString(@Column_Name, 2, len(@Column_Name) - 2) + '''', @cols_to_exclude) &lt;&gt; 0
                    BEGIN
                        GOTO Skip_Loop
                    END
              END

            --Making sure to output SET IDENTITY_INSERT ON/OFF in case the table has an IDENTITY column
            IF (SELECT ColumnProperty(Object_Id(QuoteName(Coalesce(@owner, User_Name())) + '.' + @table_name), SubString(@Column_Name, 2, len(@Column_Name) - 2), 'IsIdentity')) = 1
              BEGIN
                  IF @ommit_identity = 0 --Determing whether to include or exclude the IDENTITY column
                    SET @IDN = @Column_Name
                  ELSE
                    GOTO Skip_Loop
              END

            --Making sure whether to output computed columns or not
            IF @ommit_computed_cols = 1
              BEGIN
                  IF (SELECT ColumnProperty(Object_Id(QuoteName(Coalesce(@owner, User_Name())) + '.' + @table_name), SubString(@Column_Name, 2, len(@Column_Name) - 2), 'IsComputed')) = 1
                    BEGIN
                        GOTO Skip_Loop
                    END
              END

            --Tables with columns of IMAGE data type are not supported for obvious reasons
            IF( @Data_Type IN ( 'image' ) )
              BEGIN
                  IF ( @ommit_images = 0 )
                    BEGIN
                        RAISERROR('Tables with image columns are not supported.',
                                  16,
                                  1)

                        PRINT 'Use @ommit_images = 1 parameter to generate INSERTs for the rest of the columns.'

                        PRINT 'DO NOT ommit Column List in the INSERT statements. If you ommit column list using @include_column_list=0, the generated INSERTs will fail.'

                        RETURN -1 --Failure. Reason: There is a column with image data type
                    END
                  ELSE
                    BEGIN
                        GOTO Skip_Loop
                    END
              END

            --Determining the data type of the column and depending on the data type, the VALUES part of
            --the INSERT statement is generated. Care is taken to handle columns with NULL values. Also
            --making sure, not to lose any data from flot, real, money, smallmomey, datetime columns
            SET @Actual_Values = @Actual_Values + CASE
                                                    WHEN @Data_Type IN ( 'char', 'varchar', 'nchar', 'nvarchar' ) THEN 'COALESCE('''''''' + REPLACE(RTRIM(' + @Column_Name + '),'''''''','''''''''''')+'''''''',''NULL'')'
                                                    WHEN @Data_Type IN ( 'datetime', 'smalldatetime' ) THEN 'COALESCE('''''''' + RTRIM(CONVERT(char,' + @Column_Name + ',109))+'''''''',''NULL'')'
                                                    WHEN @Data_Type IN ( 'uniqueidentifier' ) THEN 'COALESCE('''''''' + REPLACE(CONVERT(char(255),RTRIM(' + @Column_Name + ')),'''''''','''''''''''')+'''''''',''NULL'')'
                                                    WHEN @Data_Type IN ( 'text', 'ntext' ) THEN 'COALESCE('''''''' + REPLACE(CONVERT(char(8000),' + @Column_Name + '),'''''''','''''''''''')+'''''''',''NULL'')'
                                                    WHEN @Data_Type IN ( 'binary', 'varbinary' ) THEN 'COALESCE(RTRIM(CONVERT(char,' + 'CONVERT(int,' + @Column_Name + '))),''NULL'')'
                                                    WHEN @Data_Type IN ( 'timestamp', 'rowversion' ) THEN CASE
                                                                                                            WHEN @include_timestamp = 0 THEN '''DEFAULT'''
                                                                                                            ELSE 'COALESCE(RTRIM(CONVERT(char,' + 'CONVERT(int,' + @Column_Name + '))),''NULL'')'
                                                                                                          END
                                                    WHEN @Data_Type IN ( 'float', 'real', 'money', 'smallmoney' ) THEN 'COALESCE(LTRIM(RTRIM(' + 'CONVERT(char, ' + @Column_Name + ',2)' + ')),''NULL'')'
                                                    ELSE 'COALESCE(LTRIM(RTRIM(' + 'CONVERT(char, ' + @Column_Name + ')' + ')),''NULL'')'
                                                  END + '+' + ''',''' + ' + '
            --Generating the column list for the INSERT statement
            SET @Column_List = @Column_List + @Column_Name + ','

            SKIP_LOOP: --The label used in GOTO
            SELECT @Column_ID = MIN(Ordinal_Position)
            FROM   Information_scHema.Columns (NoLock)
            WHERE  Table_Name = @table_name
                   AND Ordinal_Position &gt; @Column_ID
                   AND ( @owner IS NULL
                          OR Table_scHema = @owner )
        --Loop ends here!
        END

      --To get rid of the extra characters that got concatenated during the last run through the loop
      SET @Column_List = LEFT(@Column_List, len(@Column_List) - 1)
      SET @Actual_Values = LEFT(@Actual_Values, len(@Actual_Values) - 6)

      IF lTrim(@Column_List) = ''
        BEGIN
            RAISERROR('No columns to select. There should at least be one column to generate the output',
                      16,
                      1)

            RETURN -1 --Failure. Reason: Looks like all the columns are ommitted using the @cols_to_exclude parameter
        END

      --Forming the final string that will be executed, to output the INSERT statements
      IF ( @include_column_list &lt;&gt; 0 )
        BEGIN
            SET @Actual_Values = 'SELECT ' + CASE
                                               WHEN @top IS NULL
                                                     OR @top &lt; 0 THEN ''
                                               ELSE ' TOP ' + lTrim(str(@top)) + ' '
                                             END + '''' + rTrim(@Start_Insert) + ' ''+' + '''(' + rTrim(@Column_List) + '''+' + ''')''' + ' +''VALUES(''+ ' + @Actual_Values + '+'')''' + ' ' + Coalesce(@from, ' FROM ' + CASE
                                                                                                                                                                                                                             WHEN @owner IS NULL THEN ''
                                                                                                                                                                                                                             ELSE '[' + lTrim(rTrim(@owner)) + '].'
                                                                                                                                                                                                                           END + '[' + rTrim(@table_name) + ']' + '(NOLOCK)')
        END
      ELSE
        IF ( @include_column_list = 0 )
          BEGIN
              SET @Actual_Values = 'SELECT ' + CASE
                                                 WHEN @top IS NULL
                                                       OR @top &lt; 0 THEN ''
                                                 ELSE ' TOP ' + lTrim(str(@top)) + ' '
                                               END + '''' + rTrim(@Start_Insert) + ' '' +''VALUES(''+ ' + @Actual_Values + '+'')''' + ' ' + Coalesce(@from, ' FROM ' + CASE
                                                                                                                                                                         WHEN @owner IS NULL THEN ''
                                                                                                                                                                         ELSE '[' + lTrim(rTrim(@owner)) + '].'
                                                                                                                                                                       END + '[' + rTrim(@table_name) + ']' + '(NOLOCK)')
          END

      --Determining whether to ouput any debug information
      IF @debug_mode = 1
        BEGIN
            PRINT '/*****START OF DEBUG INFORMATION*****'

            PRINT 'Beginning of the INSERT statement:'

            PRINT @Start_Insert

            PRINT ''

            PRINT 'The column list:'

            PRINT @Column_List

            PRINT ''

            PRINT 'The SELECT statement executed to generate the INSERTs'

            PRINT @Actual_Values

            PRINT ''

            PRINT '*****END OF DEBUG INFORMATION*****/'

            PRINT ''
        END

      PRINT '--INSERTs generated by ''a_sp_Generate_Inserts'' stored procedure written by Vyas'

      PRINT '--Build number: 22'

      PRINT '--Problems/Suggestions? Contact Vyas @ vyaskn@hotmail.com'

      PRINT '--http://vyaskn.tripod.com'

      PRINT ''

      PRINT 'SET NOCOUNT ON'

      PRINT ''

      --Determining whether to print IDENTITY_INSERT or not
      IF ( @IDN &lt;&gt; '' )
        BEGIN
            PRINT 'SET IDENTITY_INSERT ' + QuoteName(Coalesce(@owner, User_Name())) + '.' + QuoteName(@table_name) + ' ON'

            PRINT 'GO'

            PRINT ''
        END

      IF @disable_constraints = 1
         AND ( Object_Id(QuoteName(Coalesce(@owner, User_Name())) + '.' + @table_name, 'U') IS NOT NULL )
        BEGIN
            IF @owner IS NULL
              BEGIN
                  SELECT 'ALTER TABLE ' + QuoteName(Coalesce(@target_table, @table_name)) + ' NOCHECK CONSTRAINT ALL' AS '--Code to disable constraints temporarily'
              END
            ELSE
              BEGIN
                  SELECT 'ALTER TABLE ' + QuoteName(@owner) + '.' + QuoteName(Coalesce(@target_table, @table_name)) + ' NOCHECK CONSTRAINT ALL' AS '--Code to disable constraints temporarily'
              END

            PRINT 'GO'
        END

      PRINT ''

      PRINT 'PRINT ''Inserting values into ' + '[' + rTrim(Coalesce(@target_table, @table_name)) + ']' + ''''

      --All the hard work pays off here!!! You'll get your INSERT statements, when the next line executes!
      EXEC (@Actual_Values)

      PRINT 'PRINT ''Done'''

      PRINT ''

      IF @disable_constraints = 1
         AND ( Object_Id(QuoteName(Coalesce(@owner, User_Name())) + '.' + @table_name, 'U') IS NOT NULL )
        BEGIN
            IF @owner IS NULL
              BEGIN
                  SELECT 'ALTER TABLE ' + QuoteName(Coalesce(@target_table, @table_name)) + ' CHECK CONSTRAINT ALL' AS '--Code to enable the previously disabled constraints'
              END
            ELSE
              BEGIN
                  SELECT 'ALTER TABLE ' + QuoteName(@owner) + '.' + QuoteName(Coalesce(@target_table, @table_name)) + ' CHECK CONSTRAINT ALL' AS '--Code to enable the previously disabled constraints'
              END

            PRINT 'GO'
        END

      PRINT ''

      IF ( @IDN &lt;&gt; '' )
        BEGIN
            PRINT 'SET IDENTITY_INSERT ' + QuoteName(Coalesce(@owner, User_Name())) + '.' + QuoteName(@table_name) + ' OFF'

            PRINT 'GO'
        END

      PRINT 'SET NOCOUNT OFF'

      SET NoCount OFF

      RETURN 0 --Success. We are done!
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatchDev].[a_sp_BI_Replace_BatchType_Config] 
-- =============================================
-- Author:        R Blomstrand
-- Create date:  03/06/2009
-- Modified date:	21/05/2010
-- Modified By: Richard Bothma
-- Modifications:	Added to extract Layout information
-- Description:   Generates SQL command required to replace batch type
--               configuration settings against a specified batch type. 
--               Also rebuilds all referenced SP info
-- Instructions: Run this SP specifying the relevant batch type as a parameter
--               from the database with the updated configuration. Example:
--                    EXEC a_sp_BI_Replace_BatchType_Config 'Invoices'
--               Copy the SQL commands output to Results and run these on the
--               database that one wishes to update.
-- EXEC [MoBatchDev].[a_sp_BI_Replace_BatchType_Config] 'Call Centre'
-- =============================================
      @BatchType varchar(50) = 'XXX'
AS
BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;

      PRINT 'Creating Table'
      -- Create temp table to use to generate the SQL commands (will be selected from at end)
      create table #sp_replacebatch (
        SQLCommand      varchar(MAX))

      DECLARE @FromCommand VARCHAR(256)

      -- Generate SQL commands to delete the existing config data for the specified batch type
      PRINT 'Delete BI_Buttons Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Buttons where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_Columns Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Columns where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_Tables Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Tables where BatchType = ''' + @BatchType + '''')
      PRINT 'Delete BI_BatchTypes Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + '''')
	  PRINT 'Delete BI_Layout Table'
      insert into #sp_replacebatch values ('DELETE MoBatch.BI_Layout where BatchType = ''' + @BatchType + '''')
		
      DECLARE @BatchCatCd VARCHAR(255)
      SELECT @BatchCatCd = BatchCatcd
      FROM   MobAtch.bi_BatchTypes bt
      WHERE  bt.BatchType = @BatchType 
      IF @BatchCatCd IS NOT NULL AND @BatchCatCd &lt;&gt; '' BEGIN
            PRINT 'Insert from BI_BatchCategory Table'
            SET @FromCommand = 'from MoBatch.BI_BatchCategory where EXISTS (SELECT 0 FROM MoBatch.BI_BatchTypes bt WHERE bt.[BatchCatCd] = BI_BatchCategory.BatchCatCd and bt.BatchType = ''' + @BatchType + ''')'
            insert into #sp_replacebatch execute [MoBatchDev].[a_sp_Generate_Inserts] 'BI_BatchCategory', @from = @FromCommand, @owner='MoBatch'
            UPDATE #sp_replacebatch SET SQLCommand = 'IF NOT EXISTS (SELECT 0 FROM MoBatch.BI_BatchCategory WHERE [BatchCatCd] = ''' + @BatchCatCd + ''') ' + SQLCommand WHERE SQLCommand like 'INSERT \[MoBatch\]\.\[BI_BatchCategory\]%' ESCAPE '\'
      END
      
      -- Now generate insert commands for specified batch type
      PRINT 'Set From BI_BatchTypes Table'
      SET @FromCommand = 'from MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute [MoBatchDev].[a_sp_Generate_Inserts] 'BI_BatchTypes', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Tables Table'
      SET @FromCommand = 'from MoBatch.BI_Tables where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute [MoBatchDev].[a_sp_Generate_Inserts] 'BI_Tables', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Columns Table'
      SET @FromCommand = 'from MoBatch.BI_Columns where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute [MoBatchDev].[a_sp_Generate_Inserts] 'BI_Columns', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Buttons Table'
      SET @FromCommand = 'from MoBatch.BI_Buttons where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute [MoBatchDev].[a_sp_Generate_Inserts] 'BI_Buttons', @from = @FromCommand, @owner='MoBatch'

      PRINT 'From BI_Layout Table'
      SET @FromCommand = 'from MoBatch.BI_Layout where BatchType = ''' + @BatchType + ''''
      insert into #sp_replacebatch execute [MoBatchDev].[a_sp_Generate_Inserts] 'BI_Layout', @from = @FromCommand, @owner='MoBatch'
--SELECT * FROM MOBATCH.BI_LAYOUT
      -- Finally generate command to details of all SPs used against the specified batch type
      PRINT 'a_sp_BI_Setup_StoredProcedures'
      insert into #sp_replacebatch values ('EXEC MoBatchDev.a_sp_BI_Setup_StoredProcedures')

      -- Output everything from temp table for user
      PRINT 'Select all'
      select * from #sp_replacebatch
      
      -- And frop the temp table as finished
      PRINT 'Drop Table'
      drop table #sp_replacebatch
END</commandtext>
      <commandtext>DROP PROCEDURE [MoBatchDev].[a_sp_BI_Replace_BatchType_Config]</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatchDev].[a_sp_BI_Script_BatchType]
  -- =============================================
  -- Author:        R Blomstrand
  -- Create date:  03/06/2009
  -- Modified date:	21/05/2010
  -- Modified By: Richard Bothma
  -- Modifications:	Added to extract Layout information
  -- Description:   Generates SQL command required to replace batch type
  --               configuration settings against a specified batch type. 
  --               Also rebuilds all referenced SP info
  -- Instructions: Run this SP specifying the relevant batch type as a parameter
  --               from the database with the updated configuration. Example:
  --                    EXEC a_sp_BI_Script_BatchType 'Invoices'
  --               Copy the SQL commands output to Results and run these on the
  --               database that one wishes to update.
  --     EXEC [MoBatchDev].[a_sp_BI_Script_BatchType] 'AccountManagement Teams', 'Administrator'
  -- OR E.g. if Administrator role is Admin (default) and extracting all batch types starting
  --    with Account%
  --     EXEC [MoBatchDev].[a_sp_BI_Script_BatchType] 'AccountManagement%'
  -- =============================================
  @paramBatchType VARCHAR(50) = 'XXX',
  @AdminRole      VARCHAR(128) = 'Admin'
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NoCount ON;

      PRINT 'Creating Table'

      -- Create temp table to use to generate the SQL commands (will be selected from at end)
      CREATE TABLE #sp_ReplaceBatch
        (
           sqlCommand VARCHAR(MAX)
        )

      DECLARE @FromCommand VARCHAR(256)
      -- Iterate through each batchtype LIKE parameter Batch Type
      DECLARE @TABLE TABLE(
        Id        INT IDENTITY ( 1, 1 ),
        BatchType VARCHAR(50))

      INSERT INTO @TABLE
      SELECT BatchType
      FROM   MobAtch.bi_BatchTypes
      WHERE  BatchType LIKE @paramBatchType

      DECLARE @ID        INT,
              @MaxID     INT,
              @BatchType VARCHAR(50)

      SELECT @Id = 1
             ,@maxID = MAX(Id)
      FROM   @TABLE

      WHILE @ID &lt;= @MAXID
        BEGIN
            SELECT @BatchType = BatchType
            FROM   @TABLE
            WHERE  Id = @ID

            -- Generate SQL commands to delete the existing config data for the specified batch type
            PRINT 'Delete BI_Buttons Table'

            INSERT INTO #sp_ReplaceBatch
            VALUES      ('DELETE MoBatch.BI_Buttons where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_Columns Table'

            INSERT INTO #sp_ReplaceBatch
            VALUES      ('DELETE MoBatch.BI_Columns where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_Tables Table'

            INSERT INTO #sp_ReplaceBatch
            VALUES      ('DELETE MoBatch.BI_Tables where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_BatchTypes Table'

            INSERT INTO #sp_ReplaceBatch
            VALUES      ('DELETE MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_Layout Table'

            INSERT INTO #sp_ReplaceBatch
            VALUES      ('DELETE MoBatch.BI_Layout where BatchType = ''' + @BatchType + '''')

            DECLARE @BatchCatCd VARCHAR(255)

            SELECT @BatchCatCd = BatchCatcd
            FROM   MobAtch.bi_BatchTypes bt
            WHERE  bt.BatchType = @BatchType

            IF @BatchCatCd IS NOT NULL
               AND @BatchCatCd &lt;&gt; ''
              BEGIN
                  PRINT 'Insert from BI_BatchCategory Table'

                  SET @FromCommand = 'from MoBatch.BI_BatchCategory where EXISTS (SELECT 0 FROM MoBatch.BI_BatchTypes bt WHERE bt.[BatchCatCd] = BI_BatchCategory.BatchCatCd and bt.BatchType = ''' + @BatchType + ''')'

                  INSERT INTO #sp_ReplaceBatch
                  EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
                    'BI_BatchCategory',
                    @from = @FromCommand,
                    @owner='MoBatch'

                  UPDATE #sp_ReplaceBatch
                  SET    sqlCommand = 'IF NOT EXISTS (SELECT 0 FROM MoBatch.BI_BatchCategory WHERE [BatchCatCd] = ''' + @BatchCatCd + ''') ' + sqlCommand
                  WHERE  sqlCommand LIKE 'INSERT \[MoBatch\]\.\[BI_BatchCategory\]%' ESCAPE '\'
              END

            -- Now generate insert commands for specified batch type
            PRINT 'Set From BI_BatchTypes Table'

            SET @FromCommand = 'from MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_BatchTypes',
              @from = @FromCommand,
              @owner='MoBatch'

            PRINT 'From BI_Tables Table'

            SET @FromCommand = 'from MoBatch.BI_Tables where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Tables',
              @from = @FromCommand,
              @owner='MoBatch'

            PRINT 'From BI_Columns Table'

            SET @FromCommand = 'from MoBatch.BI_Columns where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Columns',
              @from = @FromCommand,
              @owner='MoBatch'

            PRINT 'From BI_Buttons Table'

            SET @FromCommand = 'from MoBatch.BI_Buttons where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Buttons',
              @from = @FromCommand,
              @owner='MoBatch'

            PRINT 'From BI_Layout Table'

            SET @FromCommand = 'from MoBatch.BI_Layout where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Layout',
              @from = @FromCommand,
              @owner='MoBatch'

            --SELECT * FROM MOBATCH.BI_LAYOUT
            SET @ID = @ID + 1
        END

      -- Generate command to details of all SPs used against the specified batch type
      PRINT 'a_sp_BI_Setup_StoredProcedures'

      INSERT INTO #sp_ReplaceBatch
      VALUES      ('EXEC MoBatchDev.a_sp_BI_Setup_StoredProcedures')

      --And  Generate command to add Access entries for new Batch Type
      PRINT 'a_sp_BI_Setup_New_Access'

      INSERT INTO #sp_ReplaceBatch
      VALUES      ('EXEC MoBatch.a_sp_BI_Setup_New_Access')

      -- Ensure that Admin Role assigned all access (incl new batch Process)
      PRINT 'a_sp_bi_Assign_Specific_Access'

      INSERT INTO #sp_ReplaceBatch
      VALUES      ('EXEC [MoBatch].[a_sp_bi_Assign_Specific_Access] ''' + @BatchType + ''', ''' + @AdminRole + '''')

      -- Output everything from temp table for user
      PRINT 'Select all'

      SELECT *
      FROM   #sp_ReplaceBatch

      -- And frop the temp table as finished
      PRINT 'Drop Table'

      DROP TABLE #sp_ReplaceBatch
  END</commandtext>
      <comment>Developer Tool SPs</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
               @BatchType       VARCHAR(50),
               @BatchLevel      CHAR(1),
               @Table           VARCHAR(100),
               @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.schemas s
             ON s.schema_Id = t.schema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END

    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN sc.name
              ELSE NULL
            END) [Rename_To],
           sc.Column_Id * 10 [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST(0 AS BIT) [ChangeTimeStamp],
           NULL [Format],
           'NotSet' [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           t.name [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength]
    FROM   sys.Columns sc
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  Object_Id = @TableId
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name)
    UNION 
    SELECT BatchType,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename_To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [ToolTip_SP],
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           [ChangeTimeStamp] [ChangeTimeStamp],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           t.name [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = @TableId
                AND sc.Name = bic.[Column]
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Maximum length text fields</comment>
    </command>
  </Version>
  <Version number="1.3.0.1">
    <command>
      <commandtext>ALTER TABLE [MoBatch].[BI_Columns]
        ADD [NullValue] VARCHAR(50)</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Columns_Insert](
               @BatchType         VARCHAR(50),
               @BatchLevel        CHAR(1),
               @Table             VARCHAR(100),
               @Column            VARCHAR(100),
               @Rename_To         VARCHAR(100),
               @Sequence          INT,
               @Lookup_SP         VARCHAR(1024),
               @Select_SP         VARCHAR(1024),
               @Validation_SP     VARCHAR(1024),
               @ToolTip_SP        VARCHAR(1024),
               @Hide              BIT,
               @ReadOnly          BIT,
               @ReadOnly_Existing BIT,
               @Filter_On         BIT,
               @Required          BIT,
               @Batch_ID          BIT,
               @Line_ID           BIT,
               @Distr_ID          BIT,
               @Status_Col        BIT,
               @ChangeTimeStamp   BIT,
               @Format            VARCHAR(50),
               @Alignment         VARCHAR(50),
               @Computed          BIT,
               @Datatype          VARCHAR(50),
               @IsNullable		    BIT,
               @NullValue         VARCHAR(50),
               @MaxLength         INT)
AS
  BEGIN
    SET NoCount  OFF;
            
    SELECT @Computed = Isnull(Is_Computed,0)
    FROM   sys.Columns c
    WHERE  c.Object_Id = Object_id(@Table)
           AND Name = @Column
                                                                  
    UPDATE [MoBatch].[BI_Columns]
    SET    [Table] = @Table,
           [Rename To] = @Rename_To,
           [Sequence] = @Sequence,
           [LookUp_SP] = @LookUp_SP,
           [Select_SP] = @Select_SP,
           [Validation_SP] = @Validation_SP,
           [ToolTip_SP] = @ToolTip_SP,
           [Hide] = @Hide,
           [ReadOnly] = @ReadOnly,
           [ReadOnly Existing] = @ReadOnly_Existing,
           [Filter On] = @Filter_On,
           [Required] = @Required,
           [Batch ID] = @Batch_ID,
           [Line ID] = @Line_ID,
           [Distr ID] = @Distr_ID,
           [Status Col] = @Status_Col,
           [ChangeTimeStamp] = @ChangeTimeStamp,
           [Format] = @Format,
           [Alignment] = @Alignment,
           [Computed] = @Computed
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Column] = @Column
                                                                                     
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Columns]
                   (BatchType,
                    [BatchLevel],
                    [Table],
                    [Column],
                    [Rename To],
                    [Sequence],
                    [LookUp_SP],
                    [Select_SP],
                    [Validation_SP],
                    [ToolTip_SP],
                    [Hide],
                    [ReadOnly],
                    [ReadOnly Existing],
                    [Filter On],
                    [Required],
                    [Batch ID],
                    [Line ID],
                    [Distr ID],
                    [Status Col],
                    [ChangeTimeStamp],
                    [Format],
                    [Alignment],
                    [Computed],
                    [NullValue])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Column,
                    @Rename_To,
                    @Sequence,
                    @LookUp_SP,
                    @Select_SP,
                    @Validation_SP,
                    @ToolTip_SP,
                    @Hide,
                    @ReadOnly,
                    @ReadOnly_Existing,
                    @Filter_On,
                    @Required,
                    @Batch_ID,
                    @Line_ID,
                    @Distr_ID,
                    @Status_Col,
                    @ChangeTimeStamp,
                    @Format,
                    @Alignment,
                    @Computed,
                    @NullValue)
      END
                           
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert/update BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
        @BatchType       VARCHAR(50),
        @BatchLevel      CHAR(1),
        @Table           VARCHAR(100),
        @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.schemas s
             ON s.schema_Id = t.schema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END

    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN sc.name
              ELSE NULL
            END) [Rename_To],
           sc.Column_Id * 10 [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST(0 AS BIT) [ChangeTimeStamp],
           NULL [Format],
           'NotSet' [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           t.name [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength],
           NULL [NullValue]
    FROM   sys.Columns sc
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  Object_Id = @TableId
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name)
    UNION 
    SELECT BatchType,
           [BatchLevel],
           [Table],
           [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) [Rename_To],
           [Sequence],
           [LookUp_SP],
           [Select_SP],
           [Validation_SP],
           [ToolTip_SP],
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           [ChangeTimeStamp] [ChangeTimeStamp],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           t.name [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength],
           [NullValue]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = @TableId
                AND sc.Name = bic.[Column]
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Added IsNullable, NullValue and MaxLength to [a_sp_BI_Columns_Insert]</comment>
    </command>
  </Version>
  <Version number="1.3.0.7">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
        @BatchType       VARCHAR(50),
        @BatchLevel      CHAR(1),
        @Table           VARCHAR(100),
        @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.schemas s
             ON s.schema_Id = t.schema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END

    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN sc.name
              ELSE NULL
            END) [Rename_To],
           sc.Column_Id * 10 [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST(0 AS BIT) [ChangeTimeStamp],
           NULL [Format],
           'NotSet' [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           t.name [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength],
           NULL [NullValue]
    FROM   sys.Columns sc
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  Object_Id = @TableId
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name COLLATE DATABASE_DEFAULT)
    UNION 
    SELECT BatchType COLLATE SQL_Latin1_General_CP1_CI_AS,
           [BatchLevel],
           [Table] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Column] COLLATE SQL_Latin1_General_CP1_CI_AS,
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) COLLATE SQL_Latin1_General_CP1_CI_AS AS [Rename_To],
           [Sequence],
           [LookUp_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Select_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Validation_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [ToolTip_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] AS [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           [ChangeTimeStamp] [ChangeTimeStamp],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           t.name COLLATE SQL_Latin1_General_CP1_CI_AS AS [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength],
           [NullValue]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = @TableId
                AND sc.Name = bic.[Column] COLLATE DATABASE_DEFAULT
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_bi_Columns_Delete_Others](
               @BatchType  VARCHAR(50),
               @BatchLevel CHAR(1),
               @Table      VARCHAR(100))
AS
  BEGIN
    ----------------------------------------------------
    -- Delete all columns belonging to a different table
    ----------------------------------------------------
    DELETE [MoBatch].[BI_Columns]
    WHERE  [batchtype] = @BatchType
           AND [batchlevel] = @BatchLevel
           AND [table] &lt;&gt; @Table
                          
    -------------------------------------------------------------------
    -- Delete all columns that do not exist against the specified table
    -------------------------------------------------------------------
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.scHemAs s
             ON s.scHema_Id = t.scHema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END
                        
    -- Only delete if columns exist against specified table in case something is wrong
    IF EXISTS (SELECT 'c'
               FROM   sys.Columns
               WHERE  [object_id] = @TableId)
      BEGIN
        DELETE c
        FROM   [MoBatch].[BI_Columns] c
               LEFT OUTER JOIN sys.Columns sc
                 ON sc.[object_id] = @TableId
                    AND sc.[name] = c.[Column] COLLATE DATABASE_DEFAULT
        WHERE  c.[batchtype] = @BatchType
               AND c.[batchlevel] = @BatchLevel
               AND sc.[column_id] IS NULL
      END
      
    -----------------------------------------
    -- Re-assign sequences against the fields
    -----------------------------------------
    -- NOTE: Following added to resequence batch type/level entries
    -- to ensure that sequence numbers are unique
    DECLARE  @TEMPTABLE  TABLE(
                               [Id]     INT   IDENTITY ( 1 , 1 ),
                               [Column] VARCHAR(100)
                               )
             
    INSERT INTO @TEMPTABLE
    SELECT   [Column]
    FROM     [MoBatch].[BI_Columns]
    WHERE    [batchtype] = @BatchType
             AND [batchlevel] = @BatchLevel
    ORDER BY [Sequence]
             
    DECLARE  @ID             INT,
             @MaxID          INT,
             @Column         VARCHAR(100),
             @ColumnSequence INT
                             
    SELECT @Id = 1,
           @maxID = MAX(Id),
           @ColumnSequence = 0
    FROM   @TEMPTABLE
           
    WHILE @ID &lt;= @MAXID
      BEGIN
        SET @ColumnSequence = @ColumnSequence
                                + 10
        SELECT @Column = [Column]
        FROM   @TEMPTABLE
        WHERE  Id = @ID
                    
        UPDATE [MoBatch].[BI_Columns]
        SET    [Sequence] = @ColumnSequence
        WHERE  [batchtype] = @BatchType
               AND [batchlevel] = @BatchLevel
               AND [Column] = @Column
                              
        SET @ID = @ID
                    + 1
      END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatchDev].[a_sp_BI_Setup_New_Columns]
-- This stored procedure adds to MoBatch.BI_Columns any new columns added to 
-- tables referenced by Batch Types (where such column is missing)
-- This is useful when using an SQL script to alter the referenced tables as one
-- can then just execute this SP afterwards without having to save the batch type
-- to recognize the new column(s).
-- Remember that if the SQL script also needs to adjust any of the properties stored
-- in BI_Columns, then this should be updated after executing this SP (or else 
-- nothing yet to update).

-- To run: EXEC MoBatch.a_sp_BI_Setup_New_Columns
AS
  BEGIN
    SET NoCount  ON;
    SET xAct_Abort  ON;
    
    INSERT INTO MobAtch.bi_Columns
               ([Batchtype],
                [Batchlevel],
                [Table],
                [Column],
                [Rename To],
                [Sequence],
                [LookUp_SP],
                [Select_SP],
                [Validation_SP],
                [Hide],
                [ReadOnly],
                [ReadOnly Existing],
                [Filter On],
                [Required],
                [Batch ID],
                [Line ID],
                [Distr ID],
                [Status Col],
                [Computed],
                [Format],
                [Alignment],
                [ToolTip_SP])
    SELECT t.[BatchType] [Batchtype],
           t.[BatchLevel] [Batchlevel],
           t.[Table] [Table],
           Name [Column],
           '' [Rename To],
           Column_Id [Sequence],
           '' [LookUp_SP],
           '' [Select_SP],
           '' [Validation_SP],
           0 [Hide],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [ReadOnly],
           0 [ReadOnly Existing],
           0 [Filter On],
           0 [Required],
           0 [Batch ID],
           0 [Line ID],
           0 [Distr ID],
           0 [Status Col],
           (CASE 
              WHEN sc.[is_computed] = 1
              THEN 1
              WHEN sc.[is_identity] = 1
              THEN 1
              ELSE 0
            END) AS [Computed],
           '' [Format],
           'NotSet' [Alignment],
           NULL [ToolTip_SP]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN sys.Columns sc WITH (NOLOCK)
             ON sc.Object_Id = OBJECT_ID(t.[Table])
           LEFT OUTER JOIN [MoBatch].bi_Columns bic WITH (NOLOCK)
             ON bic.BatchType = t.BatchType
                AND bic.[BatchLevel] = t.BatchLevel
                AND bic.[Table] = t.[Table]
                AND bic.[Column] = sc.Name COLLATE DATABASE_DEFAULT
    WHERE  bic.[Column] IS NULL
           
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_DM_Structure_Cols_Select]
          @BatchType  VARCHAR(50),
          @BatchLevel CHAR(1)
-- Purpose: Return Structure Columns either from [BI_DM_Structure_Cols] if existing,
--          or else with default values based on column data types etc
AS
  BEGIN
    SET nocount  ON
    SET xact_abort  ON
    
    -- Get table name used by BatchType/BatchLevel
    DECLARE  @TableName  AS VARCHAR(100)
    SELECT @TableName = [Table]
    FROM   [BI_Tables]
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
                              
    DECLARE  @Include  AS BIT
    SET @Include = 1
                   
    -- Create temp table
    CREATE TABLE #structure_cols (
      [Include]       BIT,
      [Sequence]      INT,
      [Column]        VARCHAR(100),
      [Orig_Datatype] VARCHAR(50),
      [DataType]      VARCHAR(50),
      [ContentType]   VARCHAR(50))
    
    -- Create temp table using column info from [BI_DM_Structure_Cols] where this
    -- info was saved previously.
    INSERT INTO #structure_cols
    SELECT DISTINCT @Include AS [Include],
                    bc.SEQUENCE,
                    bc.[Column],
                    '' AS [Orig_DataType],
                    bdsc.[DataType],
                    bdsc.[ContentType]
    FROM   [BI_Columns] bc
           INNER JOIN [BI_DM_Structure_Cols] bdsc
             ON bdsc.[BatchType] = bc.[BatchType]
                AND bdsc.[BatchLevel] = bc.[BatchLevel]
                AND bdsc.[Column] = bc.[Column]
    WHERE  bc.[BatchType] = @BatchType
           AND bc.[BatchLevel] = @BatchLevel
                                 
    -- The following lists columns that have not been selected previously.
    -- If one or more columns have already been selected then by defaul the following optional
    -- columns will be flagged as NOT selected. If no columns selected yet then the default is
    -- that all columns are selected for inclusion.
    IF @@ROWCOUNT &gt; 0
      BEGIN
        SET @Include = 0
      END
          
    -- Add to temp table using sys.columns to get column names and datatype where this
    -- info was not saved previously into BI_DM_Structure_Cols.
    INSERT INTO #structure_cols
    SELECT DISTINCT @Include AS [Include],
                    c.column_id,
                    bc.[Column],
                    Type_name(c.user_type_id) AS [Orig_DataType],
                    '' AS [DataType],
                    '' AS [ContentType]
    FROM   [BI_Columns] bc
           INNER JOIN sys.columns c
             ON c.object_id = Object_id(bc.[Table])
                AND c.name = bc.[Column] COLLATE DATABASE_DEFAULT
           LEFT OUTER JOIN [BI_DM_Structure_Cols] bdsc
             ON bdsc.[BatchType] = bc.[BatchType]
                AND bdsc.[BatchLevel] = bc.[BatchLevel]
                AND bdsc.[Column] = bc.[Column]
    WHERE  bc.[BatchType] = @BatchType
           AND bc.[BatchLevel] = @BatchLevel
           AND bdsc.[BatchType] IS NULL
               
    UPDATE #structure_cols
    SET    [DataType] = 'TEXT'
    WHERE  [Orig_DataType] IN ('CHAR','NCHAR','VARCHAR','NVARCHAR')
    UPDATE #structure_cols
    SET    [DataType] = 'DATE'
    WHERE  [Orig_DataType] IN ('DATETIME')
    UPDATE #structure_cols
    SET    [DataType] = 'BOOLEAN'
    WHERE  [Orig_DataType] IN ('BINARY','BIT')
    UPDATE #structure_cols
    SET    [DataType] = 'LONG'
    WHERE  [Orig_DataType] LIKE '%INT'
    UPDATE #structure_cols
    SET    [DataType] = 'LONG' /* LONG better than DOUBLE */
    WHERE  [Orig_DataType] IN ('MONEY')
                              
    -- Update Content Type
    -- Update temp table where datatype was not previously saved with default datatype
    -- calculated based on existing column type
    UPDATE #structure_cols
    SET    [ContentType] = 'KEY'
    WHERE  [Column] IN (SELECT c.column_name AS pkname
                        FROM   information_schema.table_constraints AS pk
                               INNER JOIN information_schema.key_column_usage AS c
                                 ON pk.table_name = c.table_name
                                    AND pk.constraint_name = c.constraint_name
                        WHERE  (pk.constraint_type = 'PRIMARY KEY')
                               AND pk.table_name = @TableName)
    UPDATE #structure_cols
    SET    [ContentType] = 'DISCRETE'
    WHERE  [ContentType] = ''
           AND [DataType] = 'TEXT'
    UPDATE #structure_cols
    SET    [ContentType] = 'CONTINUOUS'
    WHERE  [ContentType] = ''
           AND [DataType] IN ('LONG','DOUBLE')
    UPDATE #structure_cols
    SET    [ContentType] = 'KEY TIME'
    WHERE  [ContentType] = ''
           AND [DataType] = 'DATE'
                            
    -- Extract the data to populate into Structure Columns grid
    SELECT [Include],
           [Column],
           [DataType],
           [ContentType]
    FROM     #structure_cols
    ORDER BY [Sequence]
             
    -- Drop the temp table as finished
    DROP TABLE #structure_cols
  END</commandtext>
      <comment>Cater for diff sys collation</comment>
    </command>
  </Version>
  <Version number="1.3.0.8">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatchDev].[a_sp_BI_Script_BatchType]
  -- ===========================================================================================
  -- Author:        R Blomstrand
  -- Create date:  03/06/2009
  -- Modifications:	Added to extract Layout information
  --              : 14/6/2011 RB - Amended to cater for filters
  -- Description:   Generates SQL command required to replace batch type
  --               configuration settings against a specified batch type. 
  --               Also rebuilds all referenced SP info
  -- Instructions: Run this SP specifying the relevant batch type as a parameter
  --               from the database with the updated configuration. Example:
  --                    EXEC a_sp_BI_Script_BatchType 'Invoices'
  --               Copy the SQL commands output to Results and run these on the
  --               database that one wishes to update.
  --     EXEC [MoBatchDev].[a_sp_BI_Script_BatchType] 'AccountManagement Teams', 'Administrator'
  -- OR E.g. if Administrator role is Admin (default) and extracting all batch types starting
  --    with Account%
  --     EXEC [MoBatchDev].[a_sp_BI_Script_BatchType] 'StationMonitor%'
  -- Some databases (MasterBatch) have had identity insert column ColumnID added to 
  -- MoBatch.BI_Columns. In this situation run the following;
  --     EXEC [MoBatchDev].[a_sp_BI_Script_BatchType] @paramBatchType = 'StationMonitor%', @BiColumnID = 1
  -- ===========================================================================================
  @paramBatchType VARCHAR(50) = 'XXX',
  @AdminRole      VARCHAR(128) = 'Admin',
  @BiColumnID			INT = 0
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NoCount ON;

      PRINT 'Creating Table'

      -- Create temp table to use to generate the SQL commands (will be selected from at end)
      CREATE TABLE #sp_ReplaceBatch
        (
           Sequence   INT,
           sqlCommand VARCHAR(MAX)
        )

      DECLARE @FromCommand VARCHAR(256),
              @Sequence    INT

      SET @Sequence = 1

      -- Iterate through each batchtype LIKE parameter Batch Type
      DECLARE @TABLE TABLE(
        Id        INT IDENTITY ( 1, 1 ),
        BatchType VARCHAR(50))

      INSERT INTO @TABLE
      SELECT BatchType
      FROM   MobAtch.bi_BatchTypes
      WHERE  BatchType LIKE @paramBatchType

      DECLARE @ID        INT,
              @MaxID     INT,
              @BatchType VARCHAR(50)

      SELECT @Id = 1
             , @maxID = MAX(Id)
      FROM   @TABLE

      WHILE @ID &lt;= @MAXID
        BEGIN
            SELECT @BatchType = BatchType
            FROM   @TABLE
            WHERE  Id = @ID

            -- Sequence Start. E.g. 10010000
            SET @Sequence = CONVERT(INT, '1' + RIGHT('000' + CONVERT(VARCHAR, @ID), 3) + '0000')

            -- Generate SQL commands to delete the existing config data for the specified batch type
            PRINT 'Delete BI_Buttons Table'

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_Buttons where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_Columns Table'

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_Columns where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_Tables Table'

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_Tables where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_BatchTypes Table'

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + '''')

            PRINT 'Delete BI_Layout Table'

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_Layout where BatchType = ''' + @BatchType + '''')

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_FilterAssigned where FilterId IN (SELECT FilterID FROM MoBatch.BI_Filters WHERE BatchType = ''' + @BatchType + ''')')

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_FilterCriteria where FilterId IN (SELECT FilterID FROM MoBatch.BI_Filters WHERE BatchType = ''' + @BatchType + ''')')

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'DELETE MoBatch.BI_Filters where BatchType = ''' + @BatchType + '''')

            DECLARE @BatchCatCd VARCHAR(255)

            SELECT @BatchCatCd = BatchCatcd
            FROM   MobAtch.bi_BatchTypes bt
            WHERE  bt.BatchType = @BatchType

            IF @BatchCatCd IS NOT NULL
               AND @BatchCatCd &lt;&gt; ''
              BEGIN
                  PRINT 'Insert from BI_BatchCategory Table'

                  SET @FromCommand = 'from MoBatch.BI_BatchCategory where EXISTS (SELECT 0 FROM MoBatch.BI_BatchTypes bt WHERE bt.[BatchCatCd] = BI_BatchCategory.BatchCatCd and bt.BatchType = ''' + @BatchType + ''')'

                  INSERT INTO #sp_ReplaceBatch
                              (sqlCommand)
                  EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
                    'BI_BatchCategory',
                    @from = @FromCommand,
                    @owner='MoBatch'

                  UPDATE #sp_ReplaceBatch
                  SET    sqlCommand = 'IF NOT EXISTS (SELECT 0 FROM MoBatch.BI_BatchCategory WHERE [BatchCatCd] = ''' + @BatchCatCd + ''') ' + sqlCommand
                  WHERE  sqlCommand LIKE 'INSERT \[MoBatch\]\.\[BI_BatchCategory\]%' ESCAPE '\'

                  SET @Sequence = @Sequence + 1

                  UPDATE #sp_ReplaceBatch
                  SET    Sequence = @Sequence
                  WHERE  Sequence IS NULL
              END

            -- Now generate insert commands for specified batch type
            PRINT 'Set From BI_BatchTypes Table'

            SET @FromCommand = 'from MoBatch.BI_BatchTypes where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_BatchTypes',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            PRINT 'From BI_Tables Table'

            SET @FromCommand = 'from MoBatch.BI_Tables where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Tables',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            PRINT 'From BI_Columns Table'

            SET @Sequence = @Sequence + 1

						IF @BiColumnID = 1 BEGIN
							INSERT INTO #sp_ReplaceBatch
							VALUES      (@Sequence,
													 'SET IDENTITY_INSERT [MoBatch].[BI_Columns] ON;')
						END 
						
            SET @FromCommand = 'from MoBatch.BI_Columns where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Columns',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            SET @Sequence = @Sequence + 1

						IF @BiColumnID = 1 BEGIN
							INSERT INTO #sp_ReplaceBatch
							VALUES      (@Sequence,
													 'SET IDENTITY_INSERT [MoBatch].[BI_Columns] OFF;')
						END
						
            PRINT 'From BI_Buttons Table'
            SET @FromCommand = 'from MoBatch.BI_Buttons where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Buttons',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            PRINT 'From BI_Layout Table'

            SET @FromCommand = 'from MoBatch.BI_Layout where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Layout',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            PRINT 'From BI_Filters Table'

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'SET IDENTITY_INSERT [MoBatch].[BI_Filters] ON;')

            SET @FromCommand = 'from MoBatch.BI_Filters where BatchType = ''' + @BatchType + ''''

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_Filters',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            SET @Sequence = @Sequence + 1

            INSERT INTO #sp_ReplaceBatch
            VALUES      (@Sequence,
                         'SET IDENTITY_INSERT [MoBatch].[BI_Filters] OFF;')

            PRINT 'From BI_FilterCriteria Table'

            SET @FromCommand = 'from MoBatch.BI_FilterCriteria where FilterId IN (SELECT FilterID FROM MoBatch.BI_Filters WHERE BatchType = ''' + @BatchType + ''')'

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_FilterCriteria',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            PRINT 'From BI_FilterAssigned Table'

            SET @FromCommand = 'from MoBatch.BI_FilterAssigned where FilterId IN (SELECT FilterID FROM MoBatch.BI_Filters WHERE BatchType = ''' + @BatchType + ''')'

            INSERT INTO #sp_ReplaceBatch
                        (sqlCommand)
            EXECUTE [MoBatchDev].[a_sp_Generate_Inserts]
              'BI_FilterAssigned',
              @from = @FromCommand,
              @owner='MoBatch'

            SET @Sequence = @Sequence + 1

            UPDATE #sp_ReplaceBatch
            SET    Sequence = @Sequence
            WHERE  Sequence IS NULL

            --SELECT * FROM MOBATCH.BI_LAYOUT
            SET @ID = @ID + 1
        END

      -- Generate command to details of all SPs used against the specified batch type
      PRINT 'a_sp_BI_Setup_StoredProcedures'

      SET @Sequence = @Sequence + 1

      INSERT INTO #sp_ReplaceBatch
      VALUES      (@Sequence,
                   'EXEC MoBatchDev.a_sp_BI_Setup_StoredProcedures')

      --And  Generate command to add Access entries for new Batch Type
      PRINT 'a_sp_BI_Setup_New_Access'

      SET @Sequence = @Sequence + 1

      INSERT INTO #sp_ReplaceBatch
      VALUES      (@Sequence,
                   'EXEC MoBatch.a_sp_BI_Setup_New_Access')

      -- Ensure that Admin Role assigned all access (incl new batch Process)
      PRINT 'a_sp_bi_Assign_Specific_Access'

      SET @Sequence = @Sequence + 1

      INSERT INTO #sp_ReplaceBatch
      VALUES      (@Sequence,
                   'EXEC [MoBatch].[a_sp_bi_Assign_Specific_Access] ''' + @BatchType + ''', ''' + @AdminRole + '''')

      -- Output everything from temp table for user
      PRINT 'Select all'

      SELECT sqlCommand
      FROM   #sp_ReplaceBatch
      ORDER  BY Sequence

      -- And frop the temp table as finished
      PRINT 'Drop Table'

      DROP TABLE #sp_ReplaceBatch
  END</commandtext>
      <comment>BP Script cater for filters</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatchDev].[a_sp_BI_Document_Summary]
-- Provides in output a summary of the installation
-- EXEC [MoBatchDev].[a_sp_BI_Document_Summary]
AS
  BEGIN
    -- SET NOCOUNT ON added to prevent extra result sets from
    -- interfering with SELECT statements.
    SET NoCount  ON;
                        
    --=========================================
    -- Create temp table containing report data
    --=========================================
    CREATE TABLE #MobAtch_Configuration (
      [BatchCatCd]   VARCHAR(100),
      [BatchType]    VARCHAR(100),
      [BatchLevel]   INT,
      [ListSequence] INT,
      [ColumnID]     INT,
      [Section]      VARCHAR(100),
      [Text]         VARCHAR(2040))
        
    DECLARE  @ListSequence INT
                                                                                                                                                  
    --=================
    -- Batch Categories
    --=================
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Reflect Opening separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Categories
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = 'Batch Category : '
                      + [BatchCatDescr]
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                                                                                                                           
    -- Reflect Closing separator for Batch Categories
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = '',
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Category',
           [Text] = '***********************************************************************'
    FROM   MobAtch.bi_BatchCategory bc WITH (NOLOCK)
                                                  
                                                  
    --============
    -- Batch Types
    --============
    -- Reflect Opening separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    SELECT @ListSequence = @ListSequence
                             + 1
    -- Reflect Batch Types
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    BatchType : '
                      + [BatchType]
                      + (CASE 
                           WHEN [AutoDrill] = 1
                           THEN ' (with auto-drilldown selected)'
                           ELSE ''
                         END)
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
    -- Reflect Closing separator for Batch Types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 0,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Batch Types',
           [Text] = '    ==================================================================='
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
                                                  
                                                  
    --=============
    -- Batch Levels
    --=============
    SELECT @ListSequence = 0
                                                                                                                                                  
    -- Dashes line before levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- List all batch levels per batch types
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        Batch Level : '
                      + (CASE 
                           WHEN [BatchLevel] = 'H'
                           THEN 'Header'
                           WHEN [BatchLevel] = 'L'
                           THEN 'Lines'
                           WHEN [BatchLevel] = 'D'
                           THEN 'Distribution'
                           ELSE 'Unknown'
                         END)
                      + ' - Table: '
                      + [Table]
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    -- Dashes line after levels
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title BatchLevels',
           [Text] = '        ---------------------------------------------------------------'
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          

----
    --===============
    -- Override Add/Update/Delete
    --===============
    -------------------------------------------
    -- Reflect Override Insert/Update/Delete Title
    -------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Override Insert/Update/Delete',
           [Text] = '            Special Override Insert/Update/Delete SPs : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
    WHERE ISNULL(t.OverrideInsert, '') &lt;&gt; '' OR ISNULL(t.OverrideUpdate, '') &lt;&gt; '' OR ISNULL(t.OverrideDelete, '') &lt;&gt; ''
                                                                                                                                                                          
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Insert Override SPs
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN t.[BatchLevel] = 'H'
                             THEN 1
                             WHEN t.[BatchLevel] = 'L'
                             THEN 2
                             WHEN t.[BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Override Insert/Update/Delete',
           [Text] = '                Special Override Add: `'
                      + t.OverrideInsert
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
				INNER JOIN 	MobAtch.bi_Tables t WITH (NOLOCK) ON t.BatchType = bt.BatchType AND ISNULL(t.OverrideInsert, '') &lt;&gt; ''

    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Update Override SPs
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN t.[BatchLevel] = 'H'
                             THEN 1
                             WHEN t.[BatchLevel] = 'L'
                             THEN 2
                             WHEN t.[BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Override Insert/Update/Delete',
           [Text] = '                Special Override Update: `'
                      + t.OverrideUpdate
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
				INNER JOIN 	MobAtch.bi_Tables t WITH (NOLOCK) ON t.BatchType = bt.BatchType AND ISNULL(t.OverrideUpdate, '') &lt;&gt; ''

    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Delete Override SPs
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN t.[BatchLevel] = 'H'
                             THEN 1
                             WHEN t.[BatchLevel] = 'L'
                             THEN 2
                             WHEN t.[BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Override Insert/Update/Delete',
           [Text] = '                Special Override Delete: `'
                      + t.OverrideDelete
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
				INNER JOIN 	MobAtch.bi_Tables t WITH (NOLOCK) ON t.BatchType = bt.BatchType AND ISNULL(t.OverrideDelete, '') &lt;&gt; ''

    --===============
    -- Display Values
    --===============
    -------------------------------
    -- Reflect Display Values title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Display Values',
           [Text] = '            Special Display Values (top of screen) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
                                                                                                                                                                          
    -- Header (Display Value)
    -- Display Value #1 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + HeadValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue1descr IS NOT NULL 
           AND HeadValue1descr &lt;&gt; ''
    -- Display Value #2 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + HeadValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue2descr IS NOT NULL 
           AND HeadValue2descr &lt;&gt; ''
    -- Display Value #3 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + HeadValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue3descr IS NOT NULL 
           AND HeadValue3descr &lt;&gt; ''
    -- Display Value #4 (Header Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + HeadValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValue4descr IS NOT NULL 
           AND HeadValue4descr &lt;&gt; ''
                                                                                                                                                                                            
                                                                                                                                                                                            
    -- Lines (Display Value)
    -- Display Value #1 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + LineValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue1descr IS NOT NULL 
           AND LineValue1descr &lt;&gt; ''
    -- Display Value #2 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + LineValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue2descr IS NOT NULL 
           AND LineValue2descr &lt;&gt; ''
    -- Display Value #3 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + LineValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue3descr IS NOT NULL 
           AND LineValue3descr &lt;&gt; ''
    -- Display Value #4 (Lines Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + LineValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValue4descr IS NOT NULL 
           AND LineValue4descr &lt;&gt; ''
                                                                                                                                                                                                   
    -- Distribution (Display Value)
    -- Display Value #1 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #1 label: `'
                      + dIstrValue1descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue1descr IS NOT NULL 
           AND dIstrValue1descr &lt;&gt; ''
    -- Display Value #2 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #2 label: `'
                      + dIstrValue2descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue2descr IS NOT NULL 
           AND dIstrValue2descr &lt;&gt; ''
    -- Display Value #3 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #3 label: `'
                      + dIstrValue3descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue3descr IS NOT NULL 
           AND dIstrValue3descr &lt;&gt; ''
    -- Display Value #4 (Distributions Display Values)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Display Values',
           [Text] = '                Display Value #4 label: `'
                      + dIstrValue4descr
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValue4descr IS NOT NULL 
           AND dIstrValue4descr &lt;&gt; ''
                                                                                                                                                                                                  
                                                                                                                                                                                                  
    --============================================
    -- Special Buttons (and right-click) Processes
    --============================================
    -------------------------------------------
    -- Reflect Special Processing buttons title
    -------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Processing Buttons',
           [Text] = '            Special Processing Buttons (top of screen + right-click) : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    ------------------------------
    -- Validation buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + HeadValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadValidationStatus IS NULL 
                                 OR HeadValidationStatus = ''
                           THEN 'ALL'
                           ELSE HeadValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadValidationsp IS NOT NULL 
           AND HeadValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Lines (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + LineValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineValidationStatus IS NULL 
                                 OR LineValidationStatus = ''
                           THEN 'ALL'
                           ELSE LineValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineValidationsp IS NOT NULL 
           AND LineValidationsp &lt;&gt; ''
                                                                                                                                                                                                         
    -- Distribution (Validation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Validation SP: `'
                      + dIstrValidationsp
                      + '` (for '
                      + (CASE 
                           WHEN dIstrValidationStatus IS NULL 
                                 OR dIstrValidationStatus = ''
                           THEN 'ALL'
                           ELSE dIstrValidationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrValidationsp IS NOT NULL 
           AND dIstrValidationsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    -------------------------------
    -- Calculation buttons (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + HeadCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN HeadCalculationStatus IS NULL 
                                 OR HeadCalculationStatus = ''
                           THEN 'ALL'
                           ELSE HeadCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadCalculationsp IS NOT NULL 
           AND HeadCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Lines (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + LineCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN LineCalculationStatus IS NULL 
                                 OR LineCalculationStatus = ''
                           THEN 'ALL'
                           ELSE LineCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineCalculationsp IS NOT NULL 
           AND LineCalculationsp &lt;&gt; ''
                                                                                                                                                                                                               
    -- Distribution (Calculation button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Calculate SP: `'
                      + dIstrCalculationsp
                      + '` (for '
                      + (CASE 
                           WHEN [dIstrCalculationStatus] IS NULL 
                                 OR [dIstrCalculationStatus] = ''
                           THEN 'ALL'
                           ELSE dIstrCalculationStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrCalculationsp IS NOT NULL 
           AND dIstrCalculationsp &lt;&gt; ''
                                                                                                                                                                                                              
                                                                                                                                                                                                              
    ---------------------------
    -- Approve buttons (if any)
    ---------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Approve Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Approve SP: `'
                      + Approvesp
                      + '` (for '
                      + (CASE 
                           WHEN ApproveStatus IS NULL 
                                 OR ApproveStatus = ''
                           THEN 'ALL'
                           ELSE ApproveStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Approvesp IS NOT NULL 
           AND Approvesp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    ------------------------------
    -- Processing buttons (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Processing Button)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                Process SP: `'
                      + Processsp
                      + '` (for '
                      + (CASE 
                           WHEN ProcessStatus IS NULL 
                                 OR ProcessStatus = ''
                           THEN 'ALL'
                           ELSE ProcessStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  Processsp IS NOT NULL 
           AND Processsp &lt;&gt; ''
                                                                                                                                                        
                                                                                                                                                        
    -----------------------------------------------------
    -- Special Action buttons (All levels where existing)
    -----------------------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Processing Buttons',
           [Text] = '                '
                      + ButtonLabel
                      + ' SP: `'
                      + Buttonsp
                      + '` (for '
                      + (CASE 
                           WHEN [ButtonStatus] IS NULL 
                                 OR [ButtonStatus] = ''
                           THEN 'ALL'
                           ELSE ButtonStatus
                         END)
                      + ' status(es))'
    FROM   MobAtch.bi_Buttons b WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = b.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --=================================
    -- Special Events Stored Procedures
    --=================================
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    ------------------------------------------
    -- Reflect Special Processing Events title
    ------------------------------------------
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Special Events',
           [Text] = '            Special Events : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
                                                                                                                                                                          
    --------------------------
    -- Default Events (if any)
    --------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + HeadDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadDefaultsp IS NOT NULL 
           AND HeadDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Lines (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + LineDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineDefaultsp IS NOT NULL 
           AND LineDefaultsp &lt;&gt; ''
                                                                                                                                                                                
    -- Distributions (Default Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Default SP: `'
                      + dIstrDefaultsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrDefaultsp IS NOT NULL 
           AND dIstrDefaultsp &lt;&gt; ''
                                                                                                                                                                                               
                                                                                                                                                                                      
    ----------------------------              
    -- Row Setup Events (if any)
    ----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + HeadRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSetUpsp IS NOT NULL 
           AND HeadRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + LinerowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSetUpsp IS NOT NULL 
           AND LinerowSetUpsp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Row Setup Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Setup SP: `'
                      + dIstrRowSetUpsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSetUpsp IS NOT NULL 
           AND dIstrRowSetUpsp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                            
    -----------------------------
    -- After Load Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + HeadAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterLoadsp IS NOT NULL 
           AND HeadAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + LineAfterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterLoadsp IS NOT NULL 
           AND LineAfterLoadsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Load Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Load SP: `'
                      + dIstRafterLoadsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterLoadsp IS NOT NULL 
           AND dIstRafterLoadsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                  
    -----------------------------
    -- Row Select Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + HeadRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowSelectsp IS NOT NULL 
           AND HeadRowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + LinerowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LinerowSelectsp IS NOT NULL 
           AND LinerowSelectsp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Select Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Select SP: `'
                      + dIstrRowSelectsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstrRowSelectsp IS NOT NULL 
           AND dIstrRowSelectsp &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    --------------------------------------
    -- Supervisor Override Access (if any)
    --------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + HeadOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadOverridesp IS NOT NULL 
           AND HeadOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Lines (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + LineOverridesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineOverridesp IS NOT NULL 
           AND LineOverridesp &lt;&gt; ''
                                                                                                                                                                                      
    -- Distributions (Override Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Supervisor Override Access SP: `'
                      + dIstRoverRidesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRoverRidesp IS NOT NULL 
           AND dIstRoverRidesp &lt;&gt; ''
                                                                                                                                                                                                     
                                                                                                                                                                                                          
    -------------------------------
    -- Row Validate Events (if any)
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Row Validate Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Validate SP: `'
                      + HeadRowValidatesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadRowValidatesp IS NOT NULL 
           AND HeadRowValidatesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Row Validate Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Validate SP: `'
                      + LineRowValidateSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineRowValidateSP IS NOT NULL 
           AND LineRowValidateSP &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Row Validate Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Row Validate SP: `'
                      + DistrRowValidateSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  DistrRowValidateSP IS NOT NULL 
           AND DistrRowValidateSP &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    ------------------------------
    -- Before Save Events (if any)
    ------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + HeadBeforeSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadBeforeSavesp IS NOT NULL 
           AND HeadBeforeSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + LineBeforeSaveSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineBeforeSaveSP IS NOT NULL 
           AND LineBeforeSaveSP &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (Before Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                Before Save SP: `'
                      + DistrBeforeSaveSP
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  DistrBeforeSaveSP IS NOT NULL 
           AND DistrBeforeSaveSP &lt;&gt; ''
                                                                                                                                                                                                           
                                                                                                                                                                                                                
    -----------------------------
    -- After Save Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + HeadAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterSavesp IS NOT NULL 
           AND HeadAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Lines (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + LineAfterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterSavesp IS NOT NULL 
           AND LineAfterSavesp &lt;&gt; ''
                                                                                                                                                                                            
    -- Distributions (After Save Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Save SP: `'
                      + dIstRafterSavesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterSavesp IS NOT NULL 
           AND dIstRafterSavesp &lt;&gt; ''
                                                                                                                                                                                                           

    -----------------------------
    -- After Delete Events (if any)
    -----------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + HeadAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  HeadAfterDeletesp IS NOT NULL 
           AND HeadAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + LineAfterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  LineAfterDeletesp IS NOT NULL 
           AND LineAfterDeletesp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Distributions (After Delete Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 3,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Delete SP: `'
                      + dIstRafterDeletesp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  dIstRafterDeletesp IS NOT NULL 
           AND dIstRafterDeletesp &lt;&gt; ''
                                                                                                                                                                                                                       
                                                                                                                                                                                                                            
    ------------------------------------
    -- After Close Child Events (if any)
    ------------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
                                                                                                                                                                          
    -- Header (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 1,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Lines SP: `'
                      + AfterCloseLinessp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterCloseLinessp IS NOT NULL 
           AND AfterCloseLinessp &lt;&gt; ''
                                                                                                                                                                                                        
    -- Lines (After Close Child Event)
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = 2,
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Special Events',
           [Text] = '                After Close Distributions SP: `'
                      + AfterClosedIstrsp
                      + '`'
    FROM   MobAtch.bi_BatchTypes bt WITH (NOLOCK)
    WHERE  AfterClosedIstrsp IS NOT NULL 
           AND AfterClosedIstrsp &lt;&gt; ''
                                                                                                                                                                                                        
                                                                                                                                                                                                        
    --========
    -- Columns
    --========
    -------------------------------
    -- Reflect Columns title
    -------------------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT [BatchCatCd] = [BatchCatCd],
           [BatchType] = bt.[BatchType],
           [BatchLevel] = (CASE 
                             WHEN [BatchLevel] = 'H'
                             THEN 1
                             WHEN [BatchLevel] = 'L'
                             THEN 2
                             WHEN [BatchLevel] = 'D'
                             THEN 3
                             ELSE 4
                           END),
           [ListSequence] = @ListSequence,
           [ColumnId] = 0,
           [Section] = 'Title Columns',
           [Text] = '            Columns : '
    FROM   MobAtch.bi_Tables t WITH (NOLOCK)
           INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
             ON bt.BatchType = t.BatchType
                                                                                                                                                                          
    ----------------------
    -- Reflect each column
    ----------------------
    SELECT @ListSequence = @ListSequence
                             + 1
    INSERT INTO #MobAtch_Configuration
    SELECT   [BatchCatCd] = [BatchCatCd],
             [BatchType] = bt.[BatchType],
             [BatchLevel] = (CASE 
                               WHEN [BatchLevel] = 'H'
                               THEN 1
                               WHEN [BatchLevel] = 'L'
                               THEN 2
                               WHEN [BatchLevel] = 'D'
                               THEN 3
                               ELSE 4
                             END),
             [ListSequence] = @ListSequence,
             [ColumnId] = c.[Sequence],
             [Section] = 'Columns',
             [Text] = REPLACE(REPLACE(REPLACE('                '
                                                + [Column]
                                                + ' ('
                                                + (CASE 
                                                     WHEN NULLIF([Rename To],'') IS NOT NULL
                                                     THEN ', Renamed to `'
                                                            + [Rename To]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Required],0) = 1
                                                     THEN ', Required '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Hide],0) = 1
                                                     THEN ', Hidden '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly],0) = 1
                                                     THEN ', ReadOnly '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([ReadOnly Existing],0) = 1
                                                     THEN ', ReadOnly Existing'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Status Col],0) = 1
                                                     THEN ', Status Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Computed],0) = 1
                                                     THEN ', Computed Col '
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Format],'') IS NOT NULL
                                                     THEN ', Format" `'
                                                            + [Format]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN ISNULL([Alignment],'NotSet') &lt;&gt; 'NotSet'
                                                     THEN ', Alignment: `'
                                                            + [Alignment]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Lookup_SP],'') IS NOT NULL
                                                     THEN ', Combobox SP: `'
                                                            + [Lookup_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Select_SP],'') IS NOT NULL
                                                     THEN ', CTRL-L SP: `'
                                                            + [Select_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Validation_SP],'') IS NOT NULL
                                                     THEN ', Cell Validation SP: `'
                                                            + [Validation_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + (CASE 
                                                     WHEN NULLIF([Tooltip_SP],'') IS NOT NULL
                                                     THEN ', Tooltip SP: `'
                                                            + [Tooltip_SP]
                                                            + '`'
                                                     ELSE ''
                                                   END)
                                                + ')',' ()',''),'(, ','('),
                              ' )',')')
    FROM     MobAtch.bi_Columns c
             INNER JOIN MobAtch.bi_BatchTypes bt WITH (NOLOCK)
               ON bt.BatchType = c.BatchType
    ORDER BY c.[Sequence]
                                                              
    --=========================
    -- Remove obsolete headings
    --=========================
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Display Values'
    WHERE  ct.Section = 'Title Display Values'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Processing Buttons'
    WHERE  ct.Section = 'Title Special Processing Buttons'
           AND cl.[BatchType] IS NULL
                              
    DELETE ct
    FROM   #MobAtch_Configuration ct
           LEFT JOIN #MobAtch_Configuration cl
             ON cl.[BatchCatCd] = ct.[BatchCatCd]
                AND cl.[BatchType] = ct.[BatchType]
                AND cl.[BatchLevel] = ct.[BatchLevel]
                AND cl.[ColumnId] = ct.[ColumnId]
                AND cl.[Section] = 'Special Events'
    WHERE  ct.Section = 'Title Special Events'
           AND cl.[BatchType] IS NULL
                              
    --================================
    -- Select compiled data for output
    --================================
    SELECT [Text]
    FROM     #MobAtch_Configuration
    ORDER BY [BatchCatCd],
             [BatchType],
             [BatchLevel],
             [ListSequence],
             [ColumnId]
                          
    --=================================
    -- Drop temp table after completion
    --=================================
    DROP TABLE #MobAtch_Configuration
        
  END</commandtext>
      <comment>Doc Summary to cater for new changes</comment>
    </command>
    <command>
      <commandtext>-- =============================================
-- Author:		Robert Blomstrand
-- Create date: 1 Feb 2011
-- Description:	Provides MERGE statement
-- =============================================
CREATE PROCEDURE [MoBatchDev].a_sp_Provide_Merge
/*
EXEC [MoBatchDev].a_sp_Provide_Merge 
	@Source = 'Axapta.Axdb_rennies_Production.dbo.CustTable', 
	@SourceKey = 'AccountNum', 
	@SourceWhere = 'DataAreaId = ''ren''',
	@Target = 'CustTable', 
	@TargetKey = 'AccountNum'
*/
-- Add the parameters for the stored procedure here
@Source      VARCHAR(255) = '',
@SourceKey   VARCHAR(255) = '',
@SourceWhere VARCHAR(1024) = '',
@Target      VARCHAR(255) = '',
@TargetKey   VARCHAR(255) = ''
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;

      CREATE TABLE #Temp
        (
           Seq      [INT] IDENTITY(1, 1) NOT NULL,
           TextLine VARCHAR(1024)
        )

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('MERGE INTO ' + @Target + ' AS TARGET')

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('USING (SELECT ')

      INSERT INTO #Temp
                  (TextLine)
      SELECT '    ' + ( CASE
                          WHEN ORDINAL_POSITION = 1 THEN ''
                          ELSE ','
                        END ) + '[' + COLUMN_NAME + ']'
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = @Target
      ORDER  BY ORDINAL_POSITION

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('FROM ' + @Source + ' WITH (NOLOCK)' )

      IF @SourceWhere &lt;&gt; ''
        BEGIN
            INSERT INTO #Temp
                        (TextLine)
            VALUES      ('WHERE ' + @SourceWhere )
        END

      INSERT INTO #Temp
                  (TextLine)
      VALUES      (') AS [SOURCE]')

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('ON TARGET.[' + @TargetKey + '] = [SOURCE].[' + @SourceKey + ']')

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('WHEN MATCHED THEN')

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('    UPDATE SET')

      INSERT INTO #Temp
                  (TextLine)
      SELECT '    ' + '    ' + ( CASE
                                   WHEN ORDINAL_POSITION = 1 THEN ''
                                   ELSE ','
                                 END ) + '[' + COLUMN_NAME + '] = [SOURCE].[' + COLUMN_NAME + ']'
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = @Target
      ORDER  BY ORDINAL_POSITION

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('WHEN NOT MATCHED BY TARGET THEN')

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('    INSERT (')

      INSERT INTO #Temp
                  (TextLine)
      SELECT '    ' + '    ' + ( CASE
                                   WHEN ORDINAL_POSITION = 1 THEN ''
                                   ELSE ','
                                 END ) + '[' + COLUMN_NAME + ']'
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = @Target
      ORDER  BY ORDINAL_POSITION

      INSERT INTO #Temp
                  (TextLine)
      VALUES      (')')

      INSERT INTO #Temp
                  (TextLine)
      VALUES      ('VALUES (')

      INSERT INTO #Temp
                  (TextLine)
      SELECT '    ' + '    ' + ( CASE
                                   WHEN ORDINAL_POSITION = 1 THEN ''
                                   ELSE ','
                                 END ) + '[SOURCE].[' + COLUMN_NAME + ']'
      FROM   INFORMATION_SCHEMA.COLUMNS
      WHERE  TABLE_NAME = @Target
      ORDER  BY ORDINAL_POSITION

      INSERT INTO #Temp
                  (TextLine)
      VALUES      (');')

      SELECT TextLine
      FROM   #Temp
      ORDER  BY Seq
  END</commandtext>
      <comment>New SP to create Merge</comment>
    </command>
  </Version>
  <Version number="1.3.0.9">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Tables ADD
	TabTitle varchar(30) NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Select](
               @BatchType  VARCHAR(50),
               @BatchLevel CHAR(1))
AS
  BEGIN
    IF @BatchLevel IS NULL 
        OR @BatchLevel = ''
      BEGIN
        SELECT [BatchLevel],
               [Table],
               [Qualifier],
               [UseNoLock],
               [PreventAdd],
               [PreventUpdate],
               [PreventDelete],
               [OverrideInsert],
               [OverrideUpdate],
               [OverrideDelete],
               [TabTitle]
        FROM   [MoBatch].[BI_Tables] WITH (NOLOCK)
        WHERE  [BatchType] = @BatchType
      END
    ELSE
      BEGIN
        SELECT [BatchLevel],
               [Table],
               [Qualifier],
               [UseNoLock],
               [PreventAdd],
               [PreventUpdate],
               [PreventDelete],
               [OverrideInsert],
               [OverrideUpdate],
               [OverrideDelete],
               [TabTitle]
        FROM   [MoBatch].[BI_Tables] WITH (NOLOCK)
        WHERE  [BatchType] = @BatchType
               AND [BatchLevel] = @BatchLevel
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Update](@BatchType      VARCHAR(50),
                                                  @BatchLevel     CHAR(1),
                                                  @Table          VARCHAR(100),
                                                  @Qualifier      VARCHAR(2000),
                                                  @UseNoLock      BIT,
                                                  @PreventAdd     BIT,
                                                  @PreventUpdate  BIT,
                                                  @PreventDelete  BIT,
                                                  @OverrideInsert VARCHAR(MAX),
                                                  @OverrideUpdate VARCHAR(MAX),
                                                  @OverrideDelete VARCHAR(MAX),
                                                  @TabTitle       VARCHAR(30))
AS
  BEGIN
      DECLARE @PrevTabTitle VARCHAR(30)

      SELECT @PrevTabTitle = ISNULL([TabTitle], '')
      FROM   [MoBatch].[BI_Tables]
      WHERE  [BatchType] = @BatchType
             AND [BatchLevel] = @BatchLevel

      IF RTRIM(@PrevTabTitle) = ''
        BEGIN
            SET @PrevTabTitle = ( CASE
                                    WHEN @BatchLevel = 'H' THEN 'Header'
                                    WHEN @BatchLevel = 'L' THEN 'Lines'
                                    WHEN @BatchLevel = 'D' THEN 'Distribution'
                                  END ) + ' - ' + @BatchType
        END

      IF RTRIM(@TabTitle) = ''
        BEGIN
            SET @TabTitle = ( CASE
                                WHEN @BatchLevel = 'H' THEN 'Header'
                                WHEN @BatchLevel = 'L' THEN 'Lines'
                                WHEN @BatchLevel = 'D' THEN 'Distribution'
                              END ) + ' - ' + @BatchType;
        END

      UPDATE [MoBatch].[BI_Tables]
      SET    [Table] = @Table,
             [Qualifier] = @Qualifier,
             [UseNoLock] = @UseNoLock,
             [PreventAdd] = @PreventAdd,
             [PreventUpdate] = @PreventUpdate,
             [PreventDelete] = @PreventDelete,
             [OverrideInsert] = @OverrideInsert,
             [OverrideUpdate] = @OverrideUpdate,
             [OverrideDelete] = @OverrideDelete,
             [TabTitle] = @TabTitle
      WHERE  [BatchType] = @BatchType
             AND [BatchLevel] = @BatchLevel

      IF @@ROWCOUNT = 0
        BEGIN
            INSERT INTO [MoBatch].[BI_Tables]
                        ([BatchType],
                         [BatchLevel],
                         [Table],
                         [Qualifier],
                         [UseNoLock],
                         [PreventAdd],
                         [PreventUpdate],
                         [PreventDelete],
                         [OverrideInsert],
                         [OverrideUpdate],
                         [OverrideDelete],
                         [TabTitle])
            VALUES      (@BatchType,
                         @BatchLevel,
                         @Table,
                         @Qualifier,
                         @UseNoLock,
                         @PreventAdd,
                         @PreventUpdate,
                         @PreventDelete,
                         @OverrideInsert,
                         @OverrideUpdate,
                         @OverrideDelete,
                         @TabTitle)
        END
      ELSE
        BEGIN
            UPDATE l
            SET    l.Value = REPLACE(l.Value, ' Text="' + @PrevTabTitle + '"', ' Text="' + @TabTitle + '"')
            FROM   MoBatch.BI_Layout l
            WHERE  [Key] = 'Dock_Layout'
                   AND BatchType = @BatchType
        END
  END</commandtext>
      <comment>Cater for Tab Title</comment>
    </command>
  </Version>
  <Version number="1.3.1.0">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Tables
  ALTER COLUMN TabTitle VARCHAR(100) NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Tables_Update](@BatchType      VARCHAR(50),
                                                  @BatchLevel     CHAR(1),
                                                  @Table          VARCHAR(100),
                                                  @Qualifier      VARCHAR(2000),
                                                  @UseNoLock      BIT,
                                                  @PreventAdd     BIT,
                                                  @PreventUpdate  BIT,
                                                  @PreventDelete  BIT,
                                                  @OverrideInsert VARCHAR(MAX),
                                                  @OverrideUpdate VARCHAR(MAX),
                                                  @OverrideDelete VARCHAR(MAX),
                                                  @TabTitle       VARCHAR(100))
AS
  BEGIN
      DECLARE @PrevTabTitle VARCHAR(100)

      SELECT @PrevTabTitle = ISNULL([TabTitle], '')
      FROM   [MoBatch].[BI_Tables]
      WHERE  [BatchType] = @BatchType
             AND [BatchLevel] = @BatchLevel

      IF RTRIM(@PrevTabTitle) = ''
        BEGIN
            SET @PrevTabTitle = ( CASE
                                    WHEN @BatchLevel = 'H' THEN 'Header'
                                    WHEN @BatchLevel = 'L' THEN 'Lines'
                                    WHEN @BatchLevel = 'D' THEN 'Distribution'
                                  END ) + ' - ' + @BatchType
        END

      IF RTRIM(@TabTitle) = ''
        BEGIN
            SET @TabTitle = ( CASE
                                WHEN @BatchLevel = 'H' THEN 'Header'
                                WHEN @BatchLevel = 'L' THEN 'Lines'
                                WHEN @BatchLevel = 'D' THEN 'Distribution'
                              END ) + ' - ' + @BatchType;
        END

      UPDATE [MoBatch].[BI_Tables]
      SET    [Table] = @Table,
             [Qualifier] = @Qualifier,
             [UseNoLock] = @UseNoLock,
             [PreventAdd] = @PreventAdd,
             [PreventUpdate] = @PreventUpdate,
             [PreventDelete] = @PreventDelete,
             [OverrideInsert] = @OverrideInsert,
             [OverrideUpdate] = @OverrideUpdate,
             [OverrideDelete] = @OverrideDelete,
             [TabTitle] = @TabTitle
      WHERE  [BatchType] = @BatchType
             AND [BatchLevel] = @BatchLevel

      IF @@ROWCOUNT = 0
        BEGIN
            INSERT INTO [MoBatch].[BI_Tables]
                        ([BatchType],
                         [BatchLevel],
                         [Table],
                         [Qualifier],
                         [UseNoLock],
                         [PreventAdd],
                         [PreventUpdate],
                         [PreventDelete],
                         [OverrideInsert],
                         [OverrideUpdate],
                         [OverrideDelete],
                         [TabTitle])
            VALUES      (@BatchType,
                         @BatchLevel,
                         @Table,
                         @Qualifier,
                         @UseNoLock,
                         @PreventAdd,
                         @PreventUpdate,
                         @PreventDelete,
                         @OverrideInsert,
                         @OverrideUpdate,
                         @OverrideDelete,
                         @TabTitle)
        END
      ELSE
        BEGIN
            UPDATE l
            SET    l.Value = REPLACE(l.Value, ' Text="' + @PrevTabTitle + '"', ' Text="' + @TabTitle + '"')
            FROM   MoBatch.BI_Layout l
            WHERE  [Key] = 'Dock_Layout'
                   AND BatchType = @BatchType
        END
  END</commandtext>
      <comment>Cater for larger Tab Title</comment>
    </command>
  </Version>
  <Version number="1.3.1.2">
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Setup_New_Access]
-- This stored procedure is used to re-create all access permutations
-- To run: EXEC MoBatch.a_sp_BI_Setup_New_Access
AS
  BEGIN
    SET nocount  ON;
    SET xact_abort  ON;
    BEGIN TRANSACTION;
    ----------------------------------------------------------
    -- Temporarily disable constraint to allow deleting Access
    ----------------------------------------------------------
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    DROP CONSTRAINT [FK_BI_RoleAccess_BI_Access]

    -------------------------
    -- Delete existing access
    -------------------------
    DELETE [MoBatch].[BI_Access]

    ------------------------------
    -- Insert Standard Menu access
    ------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'menuBatchGrid',
           'New Batch Grid Menu Option'
    UNION ALL
    SELECT 'menuBatchEntry',
           'Batch Entry Menu Option'
    UNION ALL
    SELECT 'menuReports',
           'Configure Report Menus'
    UNION ALL
    SELECT 'menuConfiguration',
           'Configuration Menu Function'
    UNION ALL
    SELECT 'menuAccess',
           'Configure Access'
    UNION ALL
    SELECT 'menuBatchCategories',
           'Configure Batch Categories'
    UNION ALL
    SELECT 'menuBatchTypes',
           'Configure Batch Types'
    UNION ALL
    SELECT 'Batch Types Update',
           'Configure Batch Types - Update existing entries'
    UNION ALL
    SELECT 'menuBatchScreenSetup',
           'Configure Batch Screen Setup'
    UNION ALL
    SELECT 'Batch Screen Setup Update',
           'Configure Batch Screen Setup - Update existing entries'
    UNION ALL
    SELECT 'menuReportCategories',
           'Configure Report Categories'
    UNION ALL
    SELECT 'menuReportItems',
           'Configure Report Items'
    UNION ALL
    SELECT 'menuWizard',
           'Configure Wizard Facility'
    UNION ALL
    SELECT 'menuDataMining',
           'Configure Data Mining'
    UNION ALL
    SELECT 'menuAppSettings',
           'Configure Application Settings'
    UNION ALL
    SELECT 'menuReleaseLocks',
           'Release Batch Locks'

    -------------------------------------------------
    -- Insert Data Mining Button Access per BatchType
    -------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'DM '
             + [QueryCode] COLLATE sql_latin1_general_cp1_ci_as,
           'Data Mining - '
             + [QueryCode]
    FROM   [MoBatch].[BI_DM_Query]

    ------------------------------
    -- Insert Action Button access
    ------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' ActionButton '
			 + buttonlabel COLLATE sql_latin1_general_cp1_ci_as,
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Action Button '
			 + buttonlabel
	FROM   MoBatch.BI_Buttons

    -----------------------------------
    -- Insert Access for each BatchType
    -----------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype,
           batchtype
             + ' Access Screen'
    FROM   MoBatch.BI_BatchTypes

    -----------------------------------------------
    -- Insert batchtype access common to all levels
    -----------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Add',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Add new entries'
	FROM   MoBatch.BI_Tables WHERE ISNULL(PreventAdd, 0) &lt;&gt; 1
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Delete',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Delete existing entries'
	FROM   MoBatch.BI_Tables WHERE ISNULL(PreventDelete, 0) &lt;&gt; 1
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' Update',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Update existing entries'
	FROM   MoBatch.BI_Tables WHERE ISNULL(PreventUpdate, 0) &lt;&gt; 1

    -----------------------------------------------------------
    -- Insert batchtype button access applicable to Header only
    -----------------------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + ' tsbApprove',
		   batchtype
			 + ' - Approve Batches'
	FROM   MoBatch.BI_BatchTypes
    UNION ALL
	SELECT batchtype
			 + ' tsbProcess',
		   batchtype
			 + ' - Process Batches'
	FROM   MoBatch.BI_BatchTypes

    ----------------------------------------------------
    -- Insert Access applicable to header and lines only
    ----------------------------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT batchtype
             + ' tsbOpen',
           batchtype
             + ' - Open Lines Screen'
    FROM   MoBatch.BI_Tables
    WHERE BatchLevel = 'H'
	UNION
	    SELECT batchtype
             + ' Lines tsbOpen',
           batchtype
             + ' Lines - Open Distribution Screen'
    FROM   MoBatch.BI_Tables
    WHERE BatchLevel = 'L'

    ------------------------------------------------------
    -- Insert batchtype button access common to all levels
    ------------------------------------------------------
	INSERT INTO [MoBatch].[BI_Access]
			   ([AccessId],
				[AccessDescr])
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' tsbCalculate',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Calculate '
			 + (CASE 
				  WHEN batchlevel = 'H'
				  THEN ' Batches'
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
	FROM   MoBatch.BI_Tables
    UNION ALL
	SELECT batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' tsbValidate',
		   batchtype
			 + (CASE 
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
			 + ' - Validate '
			 + (CASE 
				  WHEN batchlevel = 'H'
				  THEN ' Batches'
				  WHEN batchlevel = 'L'
				  THEN ' Lines'
				  WHEN batchlevel = 'D'
				  THEN ' Distributions'
				  ELSE ''
				END)
	FROM   MoBatch.BI_Tables

    --------------------------------
    -- Insert report category access
    --------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'Rpt Cat '
             + rptcategoryid COLLATE sql_latin1_general_cp1_ci_as,
           'Report Category - '
             + rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_rptcategories

    -------------------------------
    -- Insert batch category access
    -------------------------------
    INSERT INTO [MoBatch].[BI_Access]
               ([AccessId],
                [AccessDescr])
    SELECT 'Batch Cat '
             + batchcatcd COLLATE sql_latin1_general_cp1_ci_as,
           'Batch Category - '
             + batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
    FROM   bi_batchcategory
    WHERE  batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */

	-------------------------------------------------------------
    -- Delete existing roles linked to access that does not exist
	-------------------------------------------------------------
    DELETE r
    FROM   [MoBatch].[BI_RoleAccess] r
    WHERE  NOT EXISTS (SELECT 'x'
                       FROM   [MoBatch].[BI_Access] a
                       WHERE  a.[AccessId] = r.[AccessId])

    ------------------------------------------------
    -- Re-enable constraint to allow deleting Access
    ------------------------------------------------
    ALTER TABLE [MoBatch].[BI_RoleAccess]
    WITH CHECK ADD CONSTRAINT [FK_BI_RoleAccess_BI_Access] FOREIGN KEY ( [AccessId] ) REFERENCES [MoBatch].[BI_Access]([AccessId])

    ALTER TABLE [MoBatch].[BI_RoleAccess]
     CHECK CONSTRAINT [FK_BI_RoleAccess_BI_Access]
    COMMIT;

    RAISERROR (N'[MoBatch].[BI_Access]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Assign_Specific_Access](@BatchType VARCHAR(200),
                                                           @RoleId    VARCHAR(50))
AS
  -- EXEC [MoBatch].[a_sp_BI_Assign_Specific_Access] 'Invoices', 'Admin'
  BEGIN
      --
      SELECT DISTINCT r.roleid
                      , a.accessid
      INTO   #e
      FROM   bi_access a
             INNER JOIN bi_roleaccess r(nolock)
               ON a.accessid = r.accessid
                  AND @RoleId = r.roleid
      WHERE  a.accessid LIKE @BatchType + '%'

      --
      --All possible AccessId's
      SELECT a.accessid
      INTO   #d
      FROM   bi_access a
      WHERE  a.accessid LIKE @BatchType + '%'

      --Filter out existing
      DELETE FROM #d
      WHERE  accessid IN (SELECT accessid
                          FROM   #e)

      --#D is the list to be added
      INSERT INTO [MoBatch].[BI_RoleAccess]
                  ([AccessId],
                   [RoleId])
      SELECT accessid
             , @RoleId AS roleid
      FROM   #d
  END</commandtext>
      <comment>Ensure latest New Access handles category correctly</comment>
    </command>
  </Version>
  <Version number="1.3.1.3">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_Columns ADD
	LocalFile bit NULL,
	LocalFolder bit NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Columns_Insert](
               @BatchType         VARCHAR(50),
               @BatchLevel        CHAR(1),
               @Table             VARCHAR(100),
               @Column            VARCHAR(100),
               @Rename_To         VARCHAR(100),
               @Sequence          INT,
               @Lookup_SP         VARCHAR(1024),
               @Select_SP         VARCHAR(1024),
               @Validation_SP     VARCHAR(1024),
               @ToolTip_SP        VARCHAR(1024),
               @LocalFile					BIT,
               @LocalFolder	   		BIT,
               @Hide              BIT,
               @ReadOnly          BIT,
               @ReadOnly_Existing BIT,
               @Filter_On         BIT,
               @Required          BIT,
               @Batch_ID          BIT,
               @Line_ID           BIT,
               @Distr_ID          BIT,
               @Status_Col        BIT,
               @ChangeTimeStamp   BIT,
               @Format            VARCHAR(50),
               @Alignment         VARCHAR(50),
               @Computed          BIT,
               @Datatype          VARCHAR(50),
               @IsNullable		    BIT,
               @NullValue         VARCHAR(50),
               @MaxLength         INT)
AS
  BEGIN
    SET NoCount  OFF;
            
    SELECT @Computed = Isnull(Is_Computed,0)
    FROM   sys.Columns c
    WHERE  c.Object_Id = Object_id(@Table)
           AND Name = @Column

		IF @LocalFile = 1 BEGIN
				SET @LocalFolder = 0;
		END
		                                                                  
    UPDATE [MoBatch].[BI_Columns]
    SET    [Table] = @Table,
           [Rename To] = @Rename_To,
           [Sequence] = @Sequence,
           [LookUp_SP] = @LookUp_SP,
           [Select_SP] = @Select_SP,
           [Validation_SP] = @Validation_SP,
           [ToolTip_SP] = @ToolTip_SP,
           [LocalFile] = @LocalFile,
           [LocalFolder] = @LocalFolder,
           [Hide] = @Hide,
           [ReadOnly] = @ReadOnly,
           [ReadOnly Existing] = @ReadOnly_Existing,
           [Filter On] = @Filter_On,
           [Required] = @Required,
           [Batch ID] = @Batch_ID,
           [Line ID] = @Line_ID,
           [Distr ID] = @Distr_ID,
           [Status Col] = @Status_Col,
           [ChangeTimeStamp] = @ChangeTimeStamp,
           [Format] = @Format,
           [Alignment] = @Alignment,
           [Computed] = @Computed
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Column] = @Column
                                                                                     
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Columns]
                   (BatchType,
                    [BatchLevel],
                    [Table],
                    [Column],
                    [Rename To],
                    [Sequence],
                    [LookUp_SP],
                    [Select_SP],
                    [Validation_SP],
                    [ToolTip_SP],
                    [LocalFile],
                    [LocalFolder],
                    [Hide],
                    [ReadOnly],
                    [ReadOnly Existing],
                    [Filter On],
                    [Required],
                    [Batch ID],
                    [Line ID],
                    [Distr ID],
                    [Status Col],
                    [ChangeTimeStamp],
                    [Format],
                    [Alignment],
                    [Computed],
                    [NullValue])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Column,
                    @Rename_To,
                    @Sequence,
                    @LookUp_SP,
                    @Select_SP,
                    @Validation_SP,
                    @ToolTip_SP,
                    @LocalFile,
                    @LocalFolder,
                    @Hide,
                    @ReadOnly,
                    @ReadOnly_Existing,
                    @Filter_On,
                    @Required,
                    @Batch_ID,
                    @Line_ID,
                    @Distr_ID,
                    @Status_Col,
                    @ChangeTimeStamp,
                    @Format,
                    @Alignment,
                    @Computed,
                    @NullValue)
      END
                           
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert/update BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](
        @BatchType       VARCHAR(50),
        @BatchLevel      CHAR(1),
        @Table           VARCHAR(100),
        @AlwaysGetRename INT)
AS
  BEGIN
    -- If no table specified (because just entered form and user not yet selected
    -- from drop-down) then get the table name used for existing setup (if any)
    IF Ltrim(@Table) = ''
      BEGIN
        SELECT @Table = Max([Table])
        FROM   [MoBatch].bi_Columns bic
        WHERE  bic.BatchType = @BatchType
               AND bic.[BatchLevel] = @BatchLevel
      END
      
    -- Separate tablename and schema
    DECLARE  @TableName VARCHAR(255),
             @TableTemp VARCHAR(255),
             @Schema    VARCHAR(255),
             @TableId   INT
    SELECT @TableTemp = REPLACE(REPLACE(@Table,'[',''),']','')
    SELECT @TableName = SUBSTRING(@TableTemp,CHARINDEX('.',@TableTemp)
                                           + 1,LEN(@TableTemp)),
           @Schema = SUBSTRING(@TableTemp,0,CHARINDEX('.',@TableTemp))
	IF LEN(@Schema) = 0 BEGIN
		IF @TableName = 'a_sp_BI_Options'
			SET @Schema = 'MoBatch'
		ELSE
			SET @Schema = 'dbo'
	END
                    
    -- Get table ID to be used when selecting from sys.columns
    SELECT @TableId = t.Object_Id
    FROM   sys.Tables t
           INNER JOIN sys.schemas s
             ON s.schema_Id = t.schema_Id
    WHERE  t.Name = @TableName
           AND s.Name = @Schema
    IF @TableId IS NULL BEGIN
		-- If no such table then maybe this is a view
		SELECT @TableId = t.Object_Id
		FROM   sys.Views t
			   INNER JOIN sys.scHemAs s
				 ON s.scHema_Id = t.scHema_Id
		WHERE  t.Name = @TableName
			   AND s.Name = @Schema
    END

    SELECT @BatchType BatchType,
           @BatchLevel BatchLevel,
           @Table [Table],
           sc.[name] [Column],
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN sc.name
              ELSE NULL
            END) [Rename_To],
           sc.Column_Id * 10 [Sequence],
           NULL [LookUp_SP],
           NULL [Select_SP],
           NULL [Validation_SP],
           NULL [ToolTip_SP],
           CAST(0 AS BIT) [LocalFile],
           CAST(0 AS BIT) [LocalFolder],
           CAST(0 AS BIT) [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) [ReadOnly],
           CAST(0 AS BIT) [ReadOnly Existing],
           CAST(0 AS BIT) [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           CAST(0 AS BIT) [Batch ID],
           CAST(0 AS BIT) [Line ID],
           CAST(0 AS BIT) [Distr ID],
           CAST(0 AS BIT) [Status Col],
           CAST(0 AS BIT) [ChangeTimeStamp],
           NULL [Format],
           'NotSet' [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN CAST(1 AS BIT)
                   WHEN sc.[is_identity] = 1
                   THEN CAST(1 AS BIT)
                   ELSE CAST(0 AS BIT)
                 END) AS BIT) [Computed],
           t.name [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength],
           NULL [NullValue]
    FROM   sys.Columns sc
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  Object_Id = @TableId
           AND NOT EXISTS (SELECT 'x'
                           FROM   [MoBatch].bi_Columns bic
                           WHERE  bic.BatchType = @BatchType
                                  AND bic.[BatchLevel] = @BatchLevel
                                  AND bic.[Table] = @Table
                                  AND bic.[Column] = sc.Name COLLATE DATABASE_DEFAULT)
    UNION 
    SELECT BatchType COLLATE SQL_Latin1_General_CP1_CI_AS,
           [BatchLevel],
           [Table] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Column] COLLATE SQL_Latin1_General_CP1_CI_AS,
           (CASE 
              WHEN @AlwaysGetRename = 1
              THEN Isnull(Nullif([Rename To],''),[Column])
              ELSE [Rename To]
            END) COLLATE SQL_Latin1_General_CP1_CI_AS AS [Rename_To],
           [Sequence],
           [LookUp_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Select_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [Validation_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [ToolTip_SP] COLLATE SQL_Latin1_General_CP1_CI_AS,
           [LocalFile],
           [LocalFolder],
           [Hide],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   WHEN sc.[is_Computed] = 1
                   THEN 1
                   ELSE [ReadOnly]
                 END) AS BIT) AS [ReadOnly],
           [ReadOnly Existing] [ReadOnly Existing],
           [Filter On] AS [Filter On],
           CASE WHEN sc.is_nullable = 0 and sc.is_identity = 0 and sc.is_computed = 0 THEN CAST(1 AS BIT)
				ELSE CAST(0 AS BIT) END AS [Required],
		   CAST(CASE WHEN sc.is_identity = 1 THEN 1
				ELSE sc.is_nullable END AS BIT) [IsNullable],
           [Batch ID],
           [Line ID],
           [Distr ID],
           [Status Col] [Status Col],
           [ChangeTimeStamp] [ChangeTimeStamp],
           [Format],
           Isnull([Alignment],'NotSet') [Alignment],
           CAST((CASE 
                   WHEN sc.[is_computed] = 1
                   THEN 1
                   WHEN sc.[is_identity] = 1
                   THEN 1
                   ELSE 0
                 END) AS BIT) AS [Computed],
           t.name COLLATE SQL_Latin1_General_CP1_CI_AS AS [Datatype],
           CASE WHEN t.name IN ('nvarchar', 'ntext') THEN sc.max_length / 2 ELSE sc.max_length END [MaxLength],
           [NullValue]
    FROM   [MoBatch].bi_Columns bic
           INNER JOIN sys.Columns sc
             ON sc.[object_id] = @TableId
                AND sc.Name = bic.[Column] COLLATE DATABASE_DEFAULT
		LEFT OUTER JOIN sys.types t ON t.user_type_id = sc.user_type_id
    WHERE  bic.[BatchType] = @BatchType
           AND bic.[BatchLevel] = @BatchLevel
           AND bic.[Table] = @Table
    ORDER BY batchtype,
             [Table],
             [Sequence]
  END</commandtext>
      <comment>Cater for local files/folders</comment>
    </command>
  </Version>
  <Version number="1.3.1.7">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](@BatchType       VARCHAR(50),
                                                @BatchLevel      CHAR(1),
                                                @Table           VARCHAR(100),
                                                @AlwaysGetRename INT)
AS
  BEGIN
      -- If no table specified (because just entered form and user not yet selected
      -- from drop-down) then get the table name used for existing setup (if any)
      IF Ltrim(@Table) = ''
        BEGIN
            SELECT @Table = Max([Table])
            FROM   [MoBatch].bi_Columns bic
            WHERE  bic.BatchType = @BatchType
                   AND bic.[BatchLevel] = @BatchLevel
        END

      -- Separate tablename and schema
      DECLARE @TableName VARCHAR(255),
              @TableTemp VARCHAR(255),
              @Schema    VARCHAR(255),
              @TableId   INT

      SELECT @TableTemp = REPLACE(REPLACE(@Table, '[', ''), ']', '')

      SELECT @TableName = SUBSTRING(@TableTemp, CHARINDEX('.', @TableTemp) + 1, LEN(@TableTemp))
             , @Schema = SUBSTRING(@TableTemp, 0, CHARINDEX('.', @TableTemp))

      IF LEN(@Schema) = 0
        BEGIN
            IF @TableName = 'a_sp_BI_Options'
              SET @Schema = 'MoBatch'
            ELSE
              SET @Schema = 'dbo'
        END

      -- Get table ID to be used when selecting from sys.columns
      SELECT @TableId = t.Object_Id
      FROM   sys.Tables t
             INNER JOIN sys.schemas s
               ON s.schema_Id = t.schema_Id
      WHERE  t.Name = @TableName
             AND s.Name = @Schema

      IF @TableId IS NULL
        BEGIN
            -- If no such table then maybe this is a view
            SELECT @TableId = t.Object_Id
            FROM   sys.Views t
                   INNER JOIN sys.scHemAs s
                     ON s.scHema_Id = t.scHema_Id
            WHERE  t.Name = @TableName
                   AND s.Name = @Schema
        END

      SELECT @BatchType             BatchType
             , @BatchLevel          BatchLevel
             , @Table               [Table]
             , sc.[name]            [Column]
             , ( CASE
                   WHEN @AlwaysGetRename = 1 THEN sc.name
                   ELSE NULL
                 END )              [Rename_To]
             , sc.Column_Id * 10    [Sequence]
             , NULL                 [LookUp_SP]
             , NULL                 [Select_SP]
             , NULL                 [Validation_SP]
             , NULL                 [ToolTip_SP]
             , CAST(0 AS BIT)       [LocalFile]
             , CAST(0 AS BIT)       [LocalFolder]
             , CAST(0 AS BIT)       [Hide]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN 1
                        WHEN sc.[is_identity] = 1 THEN 1
                        ELSE 0
                      END ) AS BIT) [ReadOnly]
             , CAST(0 AS BIT)       [ReadOnly Existing]
             , CAST(0 AS BIT)       [Filter On]
             , CASE
                 WHEN sc.is_nullable = 0
                      AND sc.is_identity = 0
                      AND sc.is_computed = 0 THEN CAST(1 AS BIT)
                 ELSE CAST(0 AS BIT)
               END                  AS [Required]
             , CAST(CASE
                      WHEN sc.is_identity = 1 THEN 1
                      ELSE sc.is_nullable
                    END AS BIT)     [IsNullable]
             , CAST(0 AS BIT)       [Batch ID]
             , CAST(0 AS BIT)       [Line ID]
             , CAST(0 AS BIT)       [Distr ID]
             , CAST(0 AS BIT)       [Status Col]
             , CAST(0 AS BIT)       [ChangeTimeStamp]
             , NULL                 [Format]
             , 'NotSet'             [Alignment]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN CAST(1 AS BIT)
                        WHEN sc.[is_identity] = 1 THEN CAST(1 AS BIT)
                        ELSE CAST(0 AS BIT)
                      END ) AS BIT) [Computed]
             , t.name               [Datatype]
             , CASE
                 WHEN t.name IN ( 'nvarchar', 'ntext' ) THEN sc.max_length / 2
                 ELSE sc.max_length
               END                  [MaxLength]
             , NULL                 [NullValue]
      FROM   sys.Columns sc
             LEFT OUTER JOIN sys.types t
               ON t.user_type_id = sc.user_type_id
      WHERE  Object_Id = @TableId
             AND NOT EXISTS (SELECT 'x'
                             FROM   [MoBatch].bi_Columns bic
                             WHERE  bic.BatchType = @BatchType
                                    AND bic.[BatchLevel] = @BatchLevel
                                    AND bic.[Table] = @Table
                                    AND bic.[Column] = sc.Name COLLATE DATABASE_DEFAULT)
      UNION
      SELECT bic.BatchType COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[BatchLevel]
             , bic.[Table] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[Column] COLLATE SQL_Latin1_General_CP1_CI_AS
             , ( CASE
                   WHEN @AlwaysGetRename = 1 THEN Isnull(NULLIF(bic.[Rename To], ''), bic.[Column])
                   ELSE bic.[Rename To]
                 END ) COLLATE SQL_Latin1_General_CP1_CI_AS AS [Rename_To]
             , bic.[Sequence]
             , bic.[LookUp_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[Select_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[Validation_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[ToolTip_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[LocalFile]
             , bic.[LocalFolder]
             , bic.[Hide]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN 1
                        WHEN sc.[is_identity] = 1 THEN 1
                        WHEN sc.[is_Computed] = 1 THEN 1
                        ELSE bic.[ReadOnly]
                      END ) AS BIT)                         AS [ReadOnly]
             , [ReadOnly Existing]                          [ReadOnly Existing]
             , [Filter On]                                  AS [Filter On]
             , CASE
                 WHEN sc.is_nullable = 0
                      AND sc.is_identity = 0
                      AND sc.is_computed = 0 THEN CAST(1 AS BIT)
                 ELSE bic.[Required]
               END                                          AS [Required]
             , CAST(CASE
                      WHEN sc.is_identity = 1 THEN 1
                      ELSE sc.is_nullable
                    END AS BIT)                             [IsNullable]
             , bic.[Batch ID]
             , bic.[Line ID]
             , bic.[Distr ID]
             , bic.[Status Col]                                 [Status Col]
             , bic.[ChangeTimeStamp]                            [ChangeTimeStamp]
             , bic.[Format]
             , Isnull(bic.[Alignment], 'NotSet')                [Alignment]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN 1
                        WHEN sc.[is_identity] = 1 THEN 1
                        ELSE 0
                      END ) AS BIT)                         AS [Computed]
             , t.name COLLATE SQL_Latin1_General_CP1_CI_AS  AS [Datatype]
             , CASE
                 WHEN t.name IN ( 'nvarchar', 'ntext' ) THEN sc.max_length / 2
                 ELSE sc.max_length
               END                                          [MaxLength]
             , bic.[NullValue]
      FROM   [MoBatch].bi_Columns bic
             INNER JOIN sys.Columns sc
               ON sc.[object_id] = @TableId
                  AND sc.Name = bic.[Column] COLLATE DATABASE_DEFAULT
             LEFT OUTER JOIN sys.types t
               ON t.user_type_id = sc.user_type_id
      WHERE  bic.[BatchType] = @BatchType
             AND bic.[BatchLevel] = @BatchLevel
             AND bic.[Table] = @Table
      ORDER  BY batchtype
                , [Table]
                , [Sequence]
  END</commandtext>
      <comment>Correct select required for col config</comment>
    </command>
  </Version>
  <Version number="1.3.1.14">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Tables]
AS
  BEGIN
      SELECT ' ' AS [Name]
      UNION
      SELECT '[' + S.name + '].[' + T.Name + ']' AS [Name]
      FROM   sys.Tables T
             INNER JOIN sys.schemas S
               ON T.schema_id = S.schema_id
      WHERE  Substring(T.Name, 1, 3) &lt;&gt; 'BI_'
             AND T.Name &lt;&gt; 'sysdiagrams'
      UNION
      SELECT '[' + S.name + '].[' + V.Name + ']' AS [Name]
      FROM   sys.VIEWS V
             INNER JOIN sys.schemas S
               ON V.schema_id = S.schema_id
      ORDER  BY [Name]
  END</commandtext>
      <comment>Sort Available Table List</comment>
    </command>
  </Version>
  <Version number="1.3.1.18">
    <command>
      <commandtext>UPDATE [MoBatch].[BI_AppSettings] SET [Value] = 'MoBatch_1.0.0.mht' WHERE [Setting] = 'StandardHelpFile'</commandtext>
      <commandtext>UPDATE [MoBatch].[BI_AppSettings] SET [Value] = 'MoBatch_Sample_Custom.mht' WHERE [Setting] = 'CustomHelpFile'</commandtext>
      <comment>Change help from chm to mht</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Columns](@BatchType       VARCHAR(50),
                                                @BatchLevel      CHAR(1),
                                                @Table           VARCHAR(100),
                                                @AlwaysGetRename INT)
AS
  BEGIN
      -- If no table specified (because just entered form and user not yet selected
      -- from drop-down) then get the table name used for existing setup (if any)
      IF Ltrim(@Table) = ''
        BEGIN
            SELECT @Table = Max([Table])
            FROM   [MoBatch].bi_Columns bic
            WHERE  bic.BatchType = @BatchType
                   AND bic.[BatchLevel] = @BatchLevel
        END

      -- Separate tablename and schema
      DECLARE @TableName VARCHAR(255),
              @TableTemp VARCHAR(255),
              @Schema    VARCHAR(255),
              @TableId   INT

      SELECT @TableTemp = REPLACE(REPLACE(@Table, '[', ''), ']', '')

      SELECT @TableName = SUBSTRING(@TableTemp, CHARINDEX('.', @TableTemp) + 1, LEN(@TableTemp))
             , @Schema = SUBSTRING(@TableTemp, 0, CHARINDEX('.', @TableTemp))

      IF LEN(@Schema) = 0
        BEGIN
            IF @TableName = 'a_sp_BI_Options'
              SET @Schema = 'MoBatch'
            ELSE
              SET @Schema = 'dbo'
        END

      -- Get table ID to be used when selecting from sys.columns
      SELECT @TableId = t.Object_Id
      FROM   sys.Tables t
             INNER JOIN sys.schemas s
               ON s.schema_Id = t.schema_Id
      WHERE  t.Name = @TableName
             AND s.Name = @Schema

      IF @TableId IS NULL
        BEGIN
            -- If no such table then maybe this is a view
            SELECT @TableId = t.Object_Id
            FROM   sys.Views t
                   INNER JOIN sys.scHemAs s
                     ON s.scHema_Id = t.scHema_Id
            WHERE  t.Name = @TableName
                   AND s.Name = @Schema
        END

      SELECT @BatchType             BatchType
             , @BatchLevel          BatchLevel
             , @Table               [Table]
             , sc.[name]            [Column]
             , ( CASE
                   WHEN @AlwaysGetRename = 1 THEN sc.name
                   ELSE NULL
                 END )              [Rename_To]
             , sc.Column_Id * 10    [Sequence]
             , NULL                 [LookUp_SP]
             , NULL                 [Select_SP]
             , NULL                 [Validation_SP]
             , NULL                 [ToolTip_SP]
             , CAST(0 AS BIT)       [LocalFile]
             , CAST(0 AS BIT)       [LocalFolder]
             , CAST(0 AS BIT)       [Hide]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN 1
                        WHEN sc.[is_identity] = 1 THEN 1
                        ELSE 0
                      END ) AS BIT) [ReadOnly]
             , CAST(0 AS BIT)       [ReadOnly Existing]
             , CAST(0 AS BIT)       [Filter On]
             , CAST(0 AS BIT)		[Required]
             , CAST(CASE
                      WHEN sc.is_identity = 1 THEN 1
                      ELSE sc.is_nullable
                    END AS BIT)     [IsNullable]
             , CAST(0 AS BIT)       [Batch ID]
             , CAST(0 AS BIT)       [Line ID]
             , CAST(0 AS BIT)       [Distr ID]
             , CAST(0 AS BIT)       [Status Col]
             , CAST(0 AS BIT)       [ChangeTimeStamp]
             , NULL                 [Format]
             , 'NotSet'             [Alignment]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN CAST(1 AS BIT)
                        WHEN sc.[is_identity] = 1 THEN CAST(1 AS BIT)
                        ELSE CAST(0 AS BIT)
                      END ) AS BIT) [Computed]
             , t.name               [Datatype]
             , CASE
                 WHEN t.name IN ( 'nvarchar', 'ntext' ) THEN sc.max_length / 2
                 ELSE sc.max_length
               END                  [MaxLength]
             , NULL                 [NullValue]
      FROM   sys.Columns sc
             LEFT OUTER JOIN sys.types t
               ON t.user_type_id = sc.user_type_id
      WHERE  Object_Id = @TableId
             AND NOT EXISTS (SELECT 'x'
                             FROM   [MoBatch].bi_Columns bic
                             WHERE  bic.BatchType = @BatchType
                                    AND bic.[BatchLevel] = @BatchLevel
                                    AND bic.[Table] = @Table
                                    AND bic.[Column] = sc.Name COLLATE DATABASE_DEFAULT)
      UNION
      SELECT bic.BatchType COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[BatchLevel]
             , bic.[Table] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[Column] COLLATE SQL_Latin1_General_CP1_CI_AS
             , ( CASE
                   WHEN @AlwaysGetRename = 1 THEN Isnull(NULLIF(bic.[Rename To], ''), bic.[Column])
                   ELSE bic.[Rename To]
                 END ) COLLATE SQL_Latin1_General_CP1_CI_AS AS [Rename_To]
             , bic.[Sequence]
             , bic.[LookUp_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[Select_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[Validation_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[ToolTip_SP] COLLATE SQL_Latin1_General_CP1_CI_AS
             , bic.[LocalFile]
             , bic.[LocalFolder]
             , bic.[Hide]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN 1
                        WHEN sc.[is_identity] = 1 THEN 1
                        WHEN sc.[is_Computed] = 1 THEN 1
                        ELSE bic.[ReadOnly]
                      END ) AS BIT)                         AS [ReadOnly]
             , [ReadOnly Existing]                          [ReadOnly Existing]
             , [Filter On]                                  AS [Filter On]
             , bic.[Required]								AS [Required]
             , CAST(CASE
                      WHEN sc.is_identity = 1 THEN 1
                      ELSE sc.is_nullable
                    END AS BIT)                             [IsNullable]
             , bic.[Batch ID]
             , bic.[Line ID]
             , bic.[Distr ID]
             , bic.[Status Col]                                 [Status Col]
             , bic.[ChangeTimeStamp]                            [ChangeTimeStamp]
             , bic.[Format]
             , Isnull(bic.[Alignment], 'NotSet')                [Alignment]
             , CAST(( CASE
                        WHEN sc.[is_computed] = 1 THEN 1
                        WHEN sc.[is_identity] = 1 THEN 1
                        ELSE 0
                      END ) AS BIT)                         AS [Computed]
             , t.name COLLATE SQL_Latin1_General_CP1_CI_AS  AS [Datatype]
             , CASE
                 WHEN t.name IN ( 'nvarchar', 'ntext' ) THEN sc.max_length / 2
                 ELSE sc.max_length
               END                                          [MaxLength]
             , bic.[NullValue]
      FROM   [MoBatch].bi_Columns bic
             INNER JOIN sys.Columns sc
               ON sc.[object_id] = @TableId
                  AND sc.Name = bic.[Column] COLLATE DATABASE_DEFAULT
             LEFT OUTER JOIN sys.types t
               ON t.user_type_id = sc.user_type_id
      WHERE  bic.[BatchType] = @BatchType
             AND bic.[BatchLevel] = @BatchLevel
             AND bic.[Table] = @Table
      ORDER  BY batchtype
                , [Table]
                , [Sequence]
  END</commandtext>
      <comment>Amended required columns to default and allow override</comment>
    </command>
  </Version>
  <Version number="1.3.1.19">
    <command>
      <commandtext>IF NOT EXISTS (SELECT 'X' FROM MoBatch.BI_AppSettings WHERE [Setting] = 'DateInputFormat') BEGIN
	INSERT INTO MoBatch.BI_AppSettings
				([Setting],
				 [Description],
				 [Value],
				 [Sequence],
				 [DropDown])
	VALUES      ('DateInputFormat',
				 'Format to use when capturing dates',
				 'dd-MMM-yy',
				 1,
				 0)
END</commandtext>
      <comment>Cater for defaulting input date format</comment>
    </command>
  </Version>
  <Version number="1.3.1.20">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_RoleAccess
	DROP CONSTRAINT FK_BI_RoleAccess_BI_Access

ALTER TABLE MoBatch.BI_RoleAccess ADD CONSTRAINT
	FK_BI_RoleAccess_BI_Access FOREIGN KEY
	(
	AccessId
	) REFERENCES MoBatch.BI_Access
	(
	AccessId
	) ON UPDATE  NO ACTION 
	 ON DELETE  CASCADE</commandtext>
      <comment>Delete Access when deleting Role</comment>
    </command>
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypes_Delete](
  -- ===========================================================
  -- Author:        R. Blomstrand
  -- Create date: 23/09/2008
  -- Description:   Used by MoBatch to delete batch types
  -- ===========================================================
  @BatchType VARCHAR(255))
AS
  BEGIN
      SET NoCount OFF;

      BEGIN TRANSACTION;

      DELETE ra
      FROM   MoBatch.BI_RoleAccess ra
             INNER JOIN MoBatch.BI_Access a
               ON a.AccessId = ra.AccessId
                  AND a.AccessDescr LIKE @BatchType + ' % - %'

      DELETE MoBatch.BI_Access
      WHERE  AccessDescr LIKE @BatchType + ' % - %'

      DELETE r
      FROM   [MoBatch].[BI_Reports] r
             INNER JOIN [MoBatch].[BI_RPTCategories] rc
               ON rc.RptCategoryID = r.RptCategoryID
                  AND rc.BatchType = @BatchType
                  AND rc.BatchLevel = 'L'

      DELETE [MoBatch].[BI_RPTCategories]
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Columns
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Buttons
      WHERE  BatchType = @BatchType

      DELETE fa
      FROM   MoBatch.BI_FilterAssigned fa
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fa.FilterID
                  AND f.BatchType = @BatchType

      DELETE fc
      FROM   MoBatch.BI_FilterCriteria fc
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fc.FilterID
                  AND f.BatchType = @BatchType

      DELETE MoBatch.BI_Filters
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Layout
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Tables
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_BatchTypes
      WHERE  BatchType = @BatchType

      IF @@ERROR &gt; 0
        BEGIN
            RAISERROR ('Delete BI_BatchTypes Failed',16,1)

            ROLLBACK TRANSACTION

            RETURN 1
        END
      ELSE
        BEGIN
            COMMIT;
        END
  END</commandtext>
      <commandtext>CREATE PROCEDURE [MoBatch].[a_sp_BI_BatchLevel_Delete](
  -- ===========================================================
  -- Author:        R. Blomstrand
  -- Create date: 23/09/2008
  -- Description:   Used by MoBatch to delete batch types levels
  -- ===========================================================
  @BatchType  VARCHAR(255),
  @BatchLevel CHAR(1))
AS
  BEGIN
      SET NoCount OFF;

      BEGIN TRANSACTION;

	  -- Whether deleting Distribution, Lines or Header - Always remove Distribution
      DELETE ra
      FROM   MoBatch.BI_RoleAccess ra
             INNER JOIN MoBatch.BI_Access a
               ON a.AccessId = ra.AccessId
                  AND a.AccessDescr LIKE @BatchType + ' Distributions - %'

      DELETE MoBatch.BI_Access
      WHERE  AccessDescr LIKE @BatchType + ' Distributions - %'

      DELETE r
      FROM   [MoBatch].[BI_Reports] r
             INNER JOIN [MoBatch].[BI_RPTCategories] rc
               ON rc.RptCategoryID = r.RptCategoryID
                  AND rc.BatchType = @BatchType
                  AND rc.BatchLevel = 'D'

      DELETE [MoBatch].[BI_RPTCategories]
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Columns
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Buttons
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE fa
      FROM   MoBatch.BI_FilterAssigned fa
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fa.FilterID
                  AND f.BatchType = @BatchType
                  AND f.BatchLevel = 'D'

      DELETE fc
      FROM   MoBatch.BI_FilterCriteria fc
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fc.FilterID
                  AND f.BatchType = @BatchType
                  AND f.BatchLevel = 'D'

      DELETE MoBatch.BI_Filters
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Layout
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Tables
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

	  -- Whether deleting Lines or Header - Always remove Lines
      IF @BatchLevel IN ( 'H', 'L' )
        BEGIN
            DELETE ra
            FROM   MoBatch.BI_RoleAccess ra
                   INNER JOIN MoBatch.BI_Access a
                     ON a.AccessId = ra.AccessId
                        AND a.AccessDescr LIKE @BatchType + ' Lines - %'

            DELETE MoBatch.BI_Access
            WHERE  AccessDescr LIKE @BatchType + ' Lines - %'

            DELETE r
            FROM   [MoBatch].[BI_Reports] r
                   INNER JOIN [MoBatch].[BI_RPTCategories] rc
                     ON rc.RptCategoryID = r.RptCategoryID
                        AND rc.BatchType = @BatchType
                        AND rc.BatchLevel = 'L'

            DELETE [MoBatch].[BI_RPTCategories]
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Columns
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Buttons
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE fa
            FROM   MoBatch.BI_FilterAssigned fa
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fa.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'L'

            DELETE fc
            FROM   MoBatch.BI_FilterCriteria fc
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fc.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'L'

            DELETE MoBatch.BI_Filters
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Layout
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Tables
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'
        END

	  -- If deleting Header - Remove header an the entire batch
      IF @BatchLevel = 'H'
        BEGIN
            DELETE ra
            FROM   MoBatch.BI_RoleAccess ra
                   INNER JOIN MoBatch.BI_Access a
                     ON a.AccessId = ra.AccessId
                        AND a.AccessDescr LIKE @BatchType + ' - %'

            DELETE MoBatch.BI_Access
            WHERE  AccessDescr LIKE @BatchType + ' - %'

            DELETE r
            FROM   [MoBatch].[BI_Reports] r
                   INNER JOIN [MoBatch].[BI_RPTCategories] rc
                     ON rc.RptCategoryID = r.RptCategoryID
                        AND rc.BatchType = @BatchType
                        AND rc.BatchLevel = 'H'

            DELETE [MoBatch].[BI_RPTCategories]
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Columns
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Buttons
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE fa
            FROM   MoBatch.BI_FilterAssigned fa
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fa.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'H'

            DELETE fc
            FROM   MoBatch.BI_FilterCriteria fc
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fc.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'H'

            DELETE MoBatch.BI_Filters
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Layout
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Tables
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_BatchTypes
            WHERE  BatchType = @BatchType
        END

      IF @@ERROR &gt; 0
        BEGIN
            RAISERROR ('Delete BI_Batchlevel Failed',16,1)

            ROLLBACK TRANSACTION

            RETURN 1
        END
      ELSE
        BEGIN
            COMMIT;
        END
  END</commandtext>
      <comment>Comprehensive removal of batch type (and level)</comment>
    </command>
  </Version>
  <Version number="1.4.0.0">
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_RPTCategories_Select] @RptCategoryID VARCHAR(50),
                                                    @BatchReport   BIT,
                                                    @BatchType     VARCHAR(50),
                                                    @BatchLevel    CHAR(1)
AS
  BEGIN
      SET nocount ON

      SELECT [RptCategoryID]
             , [RptCategoryDescr]
             , [Sequence]
             , [BatchReport]
             , [BatchType]
             , [BatchLevel]
      FROM   [MoBatch].[BI_RPTCategories] WITH (NOLOCK)
      WHERE  ( @RptCategoryID IS NULL
                OR [RptCategoryID] = @RptCategoryID )
             AND ( @BatchReport IS NULL
                    OR [BatchReport] = @BatchReport )
             AND ( @BatchType IS NULL
                    OR [BatchType] = @BatchType )
             AND ( @BatchLevel IS NULL
                    OR [BatchLevel] = @BatchLevel )
      ORDER  BY [Sequence]
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Reports_Select] @ReportName    VARCHAR(100),
                                              @RptCategoryID VARCHAR(50)
AS
  BEGIN
      SET nocount ON

      SELECT [ReportName]
             , [RptCategoryID]
             , [ReportURL]
             , [Sequence]
      FROM   [MoBatch].[BI_Reports] WITH (NOLOCK)
      WHERE  ( [ReportName] = @ReportName
                OR @ReportName IS NULL )
             AND ( [RptCategoryID] = @RptCategoryID
                    OR @RptCategoryID IS NULL )
      ORDER  BY [Sequence]
  END</commandtext>
      <comment>Sort report categories and reports</comment>
    </command>
  </Version>
  <Version number="1.4.0.3">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Columns_Insert](
               @BatchType         VARCHAR(50),
               @BatchLevel        CHAR(1),
               @Table             VARCHAR(100),
               @Column            VARCHAR(100),
               @Rename_To         VARCHAR(100),
               @Sequence          INT,
               @Lookup_SP         VARCHAR(1024),
               @Select_SP         VARCHAR(1024),
               @Validation_SP     VARCHAR(1024),
               @ToolTip_SP        VARCHAR(1024),
               @LocalFile					BIT,
               @LocalFolder	   		BIT,
               @Hide              BIT,
               @ReadOnly          BIT,
               @ReadOnly_Existing BIT,
               @Filter_On         BIT,
               @Required          BIT,
               @Batch_ID          BIT,
               @Line_ID           BIT,
               @Distr_ID          BIT,
               @Status_Col        BIT,
               @ChangeTimeStamp   BIT,
               @Format            VARCHAR(50),
               @Alignment         VARCHAR(50),
               @Computed          BIT,
               @Datatype          VARCHAR(50),
               @IsNullable		    BIT,
               @NullValue         VARCHAR(50),
               @MaxLength         INT)
AS
  BEGIN
    SET NoCount  OFF;
            
    SELECT @Computed = Isnull(Is_Computed,0)
    FROM   sys.Columns c WITH (NOLOCK)
    WHERE  c.Object_Id = Object_id(@Table)
           AND Name = @Column

		IF @LocalFile = 1 BEGIN
				SET @LocalFolder = 0;
		END
		                                                                  
    UPDATE [MoBatch].[BI_Columns]
    SET    [Table] = @Table,
           [Rename To] = @Rename_To,
           [Sequence] = @Sequence,
           [LookUp_SP] = @LookUp_SP,
           [Select_SP] = @Select_SP,
           [Validation_SP] = @Validation_SP,
           [ToolTip_SP] = @ToolTip_SP,
           [LocalFile] = @LocalFile,
           [LocalFolder] = @LocalFolder,
           [Hide] = @Hide,
           [ReadOnly] = @ReadOnly,
           [ReadOnly Existing] = @ReadOnly_Existing,
           [Filter On] = @Filter_On,
           [Required] = @Required,
           [Batch ID] = @Batch_ID,
           [Line ID] = @Line_ID,
           [Distr ID] = @Distr_ID,
           [Status Col] = @Status_Col,
           [ChangeTimeStamp] = @ChangeTimeStamp,
           [Format] = @Format,
           [Alignment] = @Alignment,
           [Computed] = @Computed,
		   [NullValue] = @NullValue
    WHERE  [BatchType] = @BatchType
           AND [BatchLevel] = @BatchLevel
           AND [Column] = @Column
                                                                                     
    IF @@ROWCOUNT = 0
      BEGIN
        INSERT INTO [MoBatch].[BI_Columns]
                   (BatchType,
                    [BatchLevel],
                    [Table],
                    [Column],
                    [Rename To],
                    [Sequence],
                    [LookUp_SP],
                    [Select_SP],
                    [Validation_SP],
                    [ToolTip_SP],
                    [LocalFile],
                    [LocalFolder],
                    [Hide],
                    [ReadOnly],
                    [ReadOnly Existing],
                    [Filter On],
                    [Required],
                    [Batch ID],
                    [Line ID],
                    [Distr ID],
                    [Status Col],
                    [ChangeTimeStamp],
                    [Format],
                    [Alignment],
                    [Computed],
                    [NullValue])
        VALUES     (@BatchType,
                    @BatchLevel,
                    @Table,
                    @Column,
                    @Rename_To,
                    @Sequence,
                    @LookUp_SP,
                    @Select_SP,
                    @Validation_SP,
                    @ToolTip_SP,
                    @LocalFile,
                    @LocalFolder,
                    @Hide,
                    @ReadOnly,
                    @ReadOnly_Existing,
                    @Filter_On,
                    @Required,
                    @Batch_ID,
                    @Line_ID,
                    @Distr_ID,
                    @Status_Col,
                    @ChangeTimeStamp,
                    @Format,
                    @Alignment,
                    @Computed,
                    @NullValue)
      END
                           
    IF @@ERROR &gt; 0
      BEGIN
        RAISERROR ('Insert/update BI_Columns Failed',16,1) WITH LOG
        ROLLBACK TRANSACTION
        RETURN 1
      END
  END</commandtext>
      <comment>Correct NullValue not updating</comment>
    </command>
  </Version>
  <Version number="1.4.1.1">
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Buttons_Insert]
  @BatchType       VARCHAR(50),
  @BatchLevel      CHAR(1),
  @Sequence        INT,
  @ButtonLabel     VARCHAR(30),
  @ButtonSP        VARCHAR(1024),
  @ButtonImageFile VARCHAR(1024),
  @ButtonStatus    VARCHAR(50)
AS
  BEGIN
      SET NoCount ON
      SET xAct_Abort ON

      BEGIN TRAN

      ---- Override given Sequence. This ensures that Sequence will always be unique
      ---- for the batch type/level.
      --SELECT @Sequence = IsNull(MAX([Sequence]), 0) + 1
      --FROM   [MoBatch].[BI_Buttons]
      --WHERE  [BatchType] = @BatchType
      --       AND [BatchLevel] = @BatchLevel

      INSERT INTO [MoBatch].[BI_Buttons]
                  ([BatchType],
                   [BatchLevel],
                   [Sequence],
                   [ButtonLabel],
                   [ButtonSP],
                   [ButtonImageFile],
                   [ButtonStatus])
      SELECT @BatchType,
             @BatchLevel,
             @Sequence,
             @ButtonLabel,
             @ButtonSP,
             @ButtonImageFile,
             @ButtonStatus

      COMMIT
  END</commandtext>
      <comment>Special Button Sequence</comment>
    </command>
  </Version>
  <Version number="1.4.1.6">
    <command>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_Get_Tables]
AS
  BEGIN
      SELECT ' '   AS [Value]
             , ' ' AS [Text]
      UNION
      SELECT '[' + S.name + '].[' + T.Name + ']' AS [Value]
             , T.Name + ' [' + S.name + ']'      AS [Text]
      FROM   sys.Tables T
             INNER JOIN sys.schemas S
               ON T.schema_id = S.schema_id
      WHERE  Substring(T.Name, 1, 3) &lt;&gt; 'BI_'
             AND T.Name &lt;&gt; 'sysdiagrams'
      UNION
      SELECT '[' + S.name + '].[' + V.Name + ']' AS [Value]
             , V.Name + ' [' + S.name + ']'      AS [Text]
      FROM   sys.VIEWS V
             INNER JOIN sys.schemas S
               ON V.schema_id = S.schema_id
      ORDER  BY [Text]
  END</commandtext>
      <comment>Batch Screen Config Table Names</comment>
    </command>
  </Version>
  <Version number="1.4.2.0">
    <command>
      <commandtext>CREATE TABLE [MoBatch].[BI_AccessTree](
	[AccessId] [int] IDENTITY(1,1) NOT NULL,
	[AccessCode] [varchar](255) NOT NULL,
	[AccessDescr] [varchar](255) NULL,
	[AccessCat] [varchar](255) NULL,
	[AccessSeq] [int] NULL,
	[ParentId] [int] NULL,
 CONSTRAINT [PK_BI_AccessTree] PRIMARY KEY CLUSTERED 
(
	[AccessId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>CREATE TABLE [MoBatch].[BI_RoleAccessTree](
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[RoleId] [varchar](50) NOT NULL,
	[AccessId] [int] NOT NULL,
	[AccessGranted] [int] NULL,
 CONSTRAINT [PK_BI_RoleAccessTree] PRIMARY KEY CLUSTERED 
(
	[RowID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [MoBatch].[BI_RoleAccessTree]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_AccessTree] FOREIGN KEY([AccessId])
REFERENCES [MoBatch].[BI_AccessTree] ([AccessId])

ALTER TABLE [MoBatch].[BI_RoleAccessTree] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_AccessTree]

ALTER TABLE [MoBatch].[BI_RoleAccessTree]  WITH CHECK ADD  CONSTRAINT [FK_BI_RoleAccess_BI_RolesTree] FOREIGN KEY([RoleId])
REFERENCES [MoBatch].[BI_Roles] ([RoleId])

ALTER TABLE [MoBatch].[BI_RoleAccessTree] CHECK CONSTRAINT [FK_BI_RoleAccess_BI_RolesTree]</commandtext>
      <commandtext>CREATE TABLE [MoBatch].[BI_RoleAccessTree_Save](
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[TxHandle] [varchar](255) NOT NULL,
	[RoleId] [varchar](50) NOT NULL,
	[AccessId] [int] NOT NULL,
	[AccessGranted] [int] NULL,
 CONSTRAINT [PK_BI_RoleAccessTree_Save] PRIMARY KEY CLUSTERED 
(
	[RowID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]</commandtext>
      <commandtext>-- ====================================================================================================================
-- Author:		Robert Blomstrand
-- Create date: 01 April 2013
-- Description:	Called whenever changes are made to BI_Access entries - E.g. modifications to batch types, reports etc.
--              Existing Access items are deleted and then recreated according to current elements that exist and 
--              influence access. In order to remove access we have to remove RoleAccess (due to FK) so existing 
--              RoleAccess is stored in temp table before removing, and once new Access has been recreated then previous
--              RoleAccess is restored (i.e. same Role Access as previously).
-- ====================================================================================================================
ALTER PROC [MoBatch].[a_sp_BI_Setup_New_Access]
-- This stored procedure is used to re-create all access permutations
-- To run: EXEC MoBatch.[a_sp_BI_Setup_New_Access]
AS
  BEGIN
      SET nocount ON;
      SET xact_abort ON;

      BEGIN TRANSACTION;

      -----------------------------------------------------------------------------------------------------------
      -- Keep record of what was previously in BI_RoleAccessTree and then remove entries for FK to BI_Access_Tree
      -----------------------------------------------------------------------------------------------------------
      SELECT ra.[RowID]
             , ra.[RoleId]
             , ra.[AccessId]
             , a.[AccessCode]
			 , ra.[AccessGranted]
      INTO   #OldRoleAccess
      FROM   [MoBatch].[BI_RoleAccessTree] ra WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.[AccessId] = ra.[AccessId]

      DELETE [MoBatch].[BI_RoleAccessTree]

      -------------------------
      -- Delete existing access
      -------------------------
      DELETE [MoBatch].[BI_AccessTree]

      ------------------------------
      -- Create Root
      ------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~UserAccess'
             , 'Role Access'
             , 'TreeRoot'
             , 0
             , NULL

      ------------------------------
      -- Insert Standard Menu access
      ------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~menuBatchGrid'
             , 'Batch Grid Menu'
             , 'Menu Item'
             , 1
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~UserAccess'
      UNION ALL
      SELECT '~menuBatchEntry'
             , 'Old Batch Entry Menu'
             , 'Menu Item'
             , 2
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~UserAccess'
      UNION ALL
      SELECT '~menuReports'
             , 'Reports Menu'
             , 'Menu Item'
             , 3
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~UserAccess'
      UNION ALL
      SELECT '~menuConfiguration'
             , 'Configuration Menu'
             , 'Menu Item'
             , 4
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~UserAccess'

      -------------------------------
      -- Insert Special Access Header
      -------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~Special Access'
             , 'Special Access Options'
             , 'Special Access'
             , 99
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~UserAccess'

      ------------------------------
      -- Insert Special Access Items
      ------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~Data Mining'
             , 'Data Mining Access'
             , 'Special Access Item'
             , 1
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~Special Access'
      UNION ALL
      SELECT '~menuWizard'
             , 'Wizard Facility'
             , 'Special Access Item'
             , 99
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~Special Access'

      -------------------------------------------------
      -- Insert Data Mining Button Access per BatchType
      -------------------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT 'DM ' + q.[QueryCode] COLLATE sql_latin1_general_cp1_ci_as
             , 'Data Mining Query - ' + q.[QueryCode]
             , 'Special Access'
             , 10
             , a.AccessId
      FROM   [MoBatch].[BI_DM_Query] q WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] p WITH (NOLOCK)
               ON p.[AccessCode] = '~Data Mining'
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.[AccessCode] = '~Special Access'

      --------------------------------------
      -- Insert Configuration Menu Sub-Items
      --------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~menuAppSettings'
             , 'Configure Application Settings'
             , 'Sub-Menu Item'
             , 1
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuAccess'
             , 'Configure Access'
             , 'Sub-Menu Item'
             , 2
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuBatchCategories'
             , 'Configure Batch Categories'
             , 'Sub-Menu Item'
             , 3
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuBatchTypes'
             , 'Configure Batch Types'
             , 'Sub-Menu Item'
             , 4
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuBatchScreenSetup'
             , 'Configure Batch Screen Setup'
             , 'Sub-Menu Item'
             , 5
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuReportCategories'
             , 'Configure Report Categories'
             , 'Sub-Menu Item'
             , 6
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuReportItems'
             , 'Configure Report Items'
             , 'Sub-Menu Item'
             , 7
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuDataMining'
             , 'Configure Data Mining'
             , 'Sub-Menu Item'
             , 8
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'
      UNION ALL
      SELECT '~menuReleaseLocks'
             , 'Release Batch Locks'
             , 'Sub-Menu Item'
             , 9
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  a.[AccessCode] = '~menuConfiguration'

      ------------------------------------
      -- Insert Batch Types Update Acccess
      ------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~Batch Types Update'
             , 'Update existing Batch Types entries'
             , 'Sub-Menu Special Access'
             , 1
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  [AccessCode] = '~menuBatchTypes'

      ------------------------------------------
      -- Insert Batch Screen Setup Update Access
      ------------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT '~Batch Screen Setup Update'
             , 'Update existing Batch Screen Setup entries'
             , 'Sub-Menu Special Access'
             , 2
             , a.AccessId
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
      WHERE  [AccessCode] = '~menuBatchScreenSetup'

      -------------------------------
      -- Insert batch category access
      -------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT 'Batch Cat ' + bc.batchcatcd COLLATE sql_latin1_general_cp1_ci_as
             , 'Batch Category - ' + bc.batchcatdescr COLLATE sql_latin1_general_cp1_ci_as
             , 'Batch Category'
             , NULL
             , a.AccessId
      FROM   [MoBatch].bi_batchcategory bc WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.[AccessCode] = '~menuBatchGrid'
      WHERE  bc.batchcatcd &lt;&gt; 'UNUSED' /* Exclude unused batches category from access */
      ORDER  BY bc.BatchCatDescr

      -----------------------------------
      -- Insert Access for each BatchType
      -----------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT bt.batchtype
             , bt.batchtype + ' Screen'
             , 'Batch Types'
             , bt.Sequence
             , ISNULL(a.AccessId, a2.AccessId)
      FROM   MoBatch.BI_BatchTypes bt WITH (NOLOCK)
             LEFT OUTER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = 'Batch Cat ' + bt.BatchCatCd COLLATE sql_latin1_general_cp1_ci_as
             INNER JOIN [MoBatch].[BI_AccessTree] a2 WITH (NOLOCK)
               ON a2.[AccessCode] = '~menuBatchGrid'
      ORDER  BY bt.Sequence


-------------------------------------------
      -----------------------------------------------
      -- Insert batchtype access common to all levels
      -----------------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT t.batchtype + ( CASE
                               WHEN t.batchlevel = 'L'
                               THEN ' Lines'
                               WHEN t.batchlevel = 'D'
                               THEN ' Distributions'
                               ELSE ''
                             END ) + ' Add'
             , ( CASE
                   WHEN t.batchlevel = 'L'
                   THEN 'Lines'
                   WHEN t.batchlevel = 'D'
                   THEN 'Distributions'
                   ELSE 'Header'
                 END ) + ' - Add new entries'
             , 'BatchType Access'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 1
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      WHERE  ISNULL(t.PreventAdd, 0) &lt;&gt; 1
      UNION ALL
      SELECT batchtype + ( CASE
                             WHEN t.batchlevel = 'L'
                             THEN ' Lines'
                             WHEN t.batchlevel = 'D'
                             THEN ' Distributions'
                             ELSE ''
                           END ) + ' Delete'
             , ( CASE
                   WHEN t.batchlevel = 'L'
                   THEN 'Lines'
                   WHEN t.batchlevel = 'D'
                   THEN 'Distributions'
                   ELSE 'Header'
                 END ) + ' - Delete existing entries'
             , 'BatchType Access'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 2
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      WHERE  ISNULL(t.PreventDelete, 0) &lt;&gt; 1
      UNION ALL
      SELECT t.batchtype + ( CASE
                               WHEN batchlevel = 'L'
                               THEN ' Lines'
                               WHEN t.batchlevel = 'D'
                               THEN ' Distributions'
                               ELSE ''
                             END ) + ' Update'
             , ( CASE
                   WHEN batchlevel = 'L'
                   THEN 'Lines'
                   WHEN t.batchlevel = 'D'
                   THEN 'Distributions'
                   ELSE 'Header'
                 END ) + ' - Update existing entries'
             , 'BatchType Access'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 3
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      WHERE  ISNULL(t.PreventUpdate, 0) &lt;&gt; 1

      ----------------------------------------------------
      -- Insert Access applicable to header and lines only
      ----------------------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT t.batchtype + ' tsbOpen'
             , 'Header - Open Lines Level'
             , 'BatchType Access'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 4
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      WHERE  t.BatchLevel = 'H'
      UNION
      SELECT batchtype + ' Lines tsbOpen'
             , 'Lines - Open Distribution Level'
             , 'BatchType Access'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 5
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      WHERE  t.BatchLevel = 'L'

      ------------------------------
      -- Insert Action Button access
      ------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT b.batchtype + ( CASE
                               WHEN b.batchlevel = 'L'
                               THEN ' Lines'
                               WHEN b.batchlevel = 'D'
                               THEN ' Distributions'
                               ELSE ''
                             END ) + ' ActionButton ' + b.buttonlabel COLLATE sql_latin1_general_cp1_ci_as
             , ( CASE
                   WHEN b.batchlevel = 'L'
                   THEN 'Lines'
                   WHEN b.batchlevel = 'D'
                   THEN 'Distributions'
                   ELSE 'Header'
                 END ) + ' - Special Action Button ' + b.buttonlabel
             , 'Batch Type Button'
             , ( CASE b.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 6
             , a.AccessId
      FROM   MoBatch.BI_Buttons b WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = b.batchtype COLLATE sql_latin1_general_cp1_ci_as

      ------------------------------------------------------
      -- Insert batchtype button access common to all levels
      ------------------------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT t.batchtype + ( CASE
                               WHEN t.batchlevel = 'L'
                               THEN ' Lines'
                               WHEN t.batchlevel = 'D'
                               THEN ' Distributions'
                               ELSE ''
                             END ) + ' tsbCalculate'
             , ( CASE
                   WHEN t.batchlevel = 'L'
                   THEN 'Lines'
                   WHEN t.batchlevel = 'D'
                   THEN 'Distributions'
                   ELSE 'Header'
                 END ) + ' - Button Calculate'
             , 'BatchType Button'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 7
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      UNION ALL
      SELECT t.batchtype + ( CASE
                               WHEN t.batchlevel = 'L'
                               THEN ' Lines'
                               WHEN t.batchlevel = 'D'
                               THEN ' Distributions'
                               ELSE ''
                             END ) + ' tsbValidate'
             , ( CASE
                   WHEN t.batchlevel = 'L'
                   THEN 'Lines'
                   WHEN t.batchlevel = 'D'
                   THEN 'Distributions'
                   ELSE 'Header'
                 END ) + ' - Button Validate'
             , 'BatchType Button'
             , ( CASE t.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 8
             , a.AccessId
      FROM   MoBatch.BI_Tables t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as

      -----------------------------------------------------------
      -- Insert batchtype button access applicable to Header only
      -----------------------------------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT t.batchtype + ' tsbApprove'
             , 'Header - Button Approve'
             , 'Header Button'
             , 100 + 9
             , a.AccessId
      FROM   MoBatch.BI_BatchTypes t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as
      UNION ALL
      SELECT t.batchtype + ' tsbProcess'
             , 'Header - Button Process'
             , 'Header Button'
             , 100 + 10
             , a.AccessId
      FROM   MoBatch.BI_BatchTypes t WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = t.batchtype COLLATE sql_latin1_general_cp1_ci_as

      --------------------------------
      -- Insert report category access
      --------------------------------
      INSERT INTO [MoBatch].[BI_AccessTree]
                  ([AccessCode],
                   [AccessDescr],
                   [AccessCat],
                   [AccessSeq],
                   [ParentId])
      SELECT 'Rpt Cat ' + rc.rptcategoryid COLLATE sql_latin1_general_cp1_ci_as
             , ( CASE rc.batchlevel
                   WHEN 'H'
                   THEN 'Header - '
                   WHEN 'L'
                   THEN 'Lines - '
                   WHEN 'D'
                   THEN 'Distribution - '
                   ELSE ''
                 END ) + 'Report Category: ' + rc.rptcategorydescr COLLATE sql_latin1_general_cp1_ci_as
             , 'Report Category'
             , ( CASE rc.batchlevel
                   WHEN 'H'
                   THEN 100
                   WHEN 'L'
                   THEN 200
                   WHEN 'D'
                   THEN 300
                   ELSE 400
                 END ) + 11 + rc.Sequence
             , ISNULL(a.AccessId, a2.AccessId)
      FROM   MoBatch.bi_rptcategories rc WITH (NOLOCK)
             LEFT OUTER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.AccessCode = rc.batchtype COLLATE sql_latin1_general_cp1_ci_as
             INNER JOIN [MoBatch].[BI_AccessTree] a2 WITH (NOLOCK)
               ON a2.[AccessCode] = '~menuReports'

      ------------------------------------------------
      -- Re-enable constraint to allow deleting Access
      ------------------------------------------------
      INSERT INTO [MoBatch].[BI_RoleAccessTree]
                  ([RoleId],
                   [AccessId],
				   [AccessGranted])
      SELECT ra.[RoleId]
             , a.[AccessId]
			 , ra.AccessGranted
      FROM   #OldRoleAccess ra WITH (NOLOCK)
             INNER JOIN [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
               ON a.[AccessCode] = ra.[AccessCode]

      COMMIT;

      RAISERROR (N'[MoBatch].[BI_AccessTree]: Insert all access: 1.....Done!',10,1) WITH NOWAIT;
  END</commandtext>
      <commandtext>-- =====================================================================
-- Author:	Robert Blomstrand
-- Create date: 21/02/2013
-- Description:	Return access data to populate new Role Access Tree View
-- =====================================================================
ALTER PROCEDURE [MoBatch].[a_sp_BI_RoleAccess_Select]
  -- Exec MoBatch.[a_sp_BI_RoleAccess_Select] 'admin'
  -- Exec MoBatch.[a_sp_BI_RoleAccessTree] 'Clerk'
  @RoleId VARCHAR(255)
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;

      SELECT a.[AccessId]
             , ( CASE
                   WHEN a.[AccessCode] = '~UserAccess'
                   THEN 'Role access for ' + @RoleId
                   ELSE a.[AccessDescr]
                 END ) AS [AccessDescr]
             , a.[ParentId]
             , ( CASE
                   WHEN NULLIF(ra.AccessGranted, 2) IS NULL
                   THEN 0
                   ELSE 1
                 END ) AS [AccessGranted]
      FROM   [MoBatch].[BI_AccessTree] a WITH (NOLOCK)
             LEFT OUTER JOIN [MoBatch].[BI_RoleAccessTree] ra WITH (NOLOCK)
               ON ra.AccessId = a.AccessId
                  AND ra.RoleId = @RoleId
      WHERE  @RoleId &lt;&gt; ''
      ORDER  BY a.[ParentId]
                , a.[AccessSeq]
                , a.[AccessDescr]
  END</commandtext>
      <commandtext>-- ================================================================================================
-- Author:		Robert Blomstrand
-- Create date: 01 April 2013
-- Description:	Called by Access Configuration to save latest access configuration from Treeview
-- Notes:       Using method of interim table to best cater for proper transaction. Would have been
--              easier to handle this purely in .Net but attempting to handle as much as possible 
--              using SP's according to agreed practices.
-- Samples of execution:
--              Link Access ID 12 to Admin role into interim table:
--                  EXEC [MoBatch].[a_sp_BI_RoleAccess_Save] 'N', '20130401144200', 'Admin', 12, 1, ''
--              On completion of linking all Access to role, update RoleAccess from Interime table:
--                  EXEC [MoBatch].[a_sp_BI_RoleAccess_Save] 'Y', '20130401144200', 'Admin', NULL, NULL, ''
--              Copy all access granted to role Admin to role User:
--                  EXEC [MoBatch].[a_sp_BI_RoleAccess_Save] 'Y', '20130401144200', 'Clerk', NULL, NULL, 'Admin'
-- ================================================================================================
CREATE PROCEDURE [MoBatch].[a_sp_BI_RoleAccess_Save]
  -- Add the parameters for the stored procedure here
  @ReplaceAll     CHAR(1) = 'N',
  @TxHandle       VARCHAR(255) = '20130401144200',
  @RoleID         VARCHAR(50) = 'Admin',
  @AccessID       INT = 0,
  @AccessGranted  INT = 1,
  @CopyFromRoleID VARCHAR(50) = ''
AS
  BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;
      -- Prefix date/time with user to ensure uniqueness
      SET @TxHandle = SYSTEM_USER + @TxHandle

      DECLARE @ErrMsg      NVARCHAR(4000),
              @ErrSeverity INT;

      -- When no more entries remain to be saved then clear out old access for specified role, 
      -- insert all items from interim table, clear out interim table and commit 
      IF @CopyFromRoleID &lt;&gt; ''
        BEGIN
            BEGIN TRAN

            BEGIN TRY
                -- Clear out previous Role Access
                DELETE [MoBatch].[BI_RoleAccessTree]
                WHERE  RoleId = @RoleID

                -- Insert all RoleAccess from other @CopyFromRoleID
                INSERT INTO [MoBatch].[BI_RoleAccessTree]
                            ([RoleId],
                             [AccessId],
							 [AccessGranted])
                SELECT @RoleID
                       , [AccessId]
					   , [AccessGranted]
                FROM   [MoBatch].[BI_RoleAccessTree] WITH (NOLOCK)
                WHERE  RoleId = @CopyFromRoleID
            END TRY

            BEGIN CATCH
                SELECT @ErrMsg = ERROR_MESSAGE()
                       , @ErrSeverity = ERROR_SEVERITY()

                ROLLBACK TRANSACTION

                RAISERROR(@ErrMsg,@ErrSeverity,1)
            END CATCH

            COMMIT
        END
      ELSE IF @ReplaceAll = 'Y'
        BEGIN
            BEGIN TRAN

            BEGIN TRY
                -- Clear out previous Role Access
                DELETE [MoBatch].[BI_RoleAccessTree]
                WHERE  RoleId = @RoleID

                -- Insert all RoleAccess from interim table
                INSERT INTO [MoBatch].[BI_RoleAccessTree]
                            ([RoleId],
                             [AccessId],
							 [AccessGranted])
                SELECT [RoleId]
                       , [AccessId]
					   , [AccessGranted]
                FROM   [MoBatch].[BI_RoleAccessTree_Save] WITH (NOLOCK)
                WHERE  [TxHandle] = @TxHandle

                -- Get rid of interim table entries regardless of whether error or not
                DELETE [MoBatch].[BI_RoleAccessTree_Save]
                WHERE  [TxHandle] = @TxHandle
            END TRY

            BEGIN CATCH
                SELECT @ErrMsg = ERROR_MESSAGE()
                       , @ErrSeverity = ERROR_SEVERITY()

                ROLLBACK TRANSACTION

                -- Get rid of interim table entries regardless of whether error or not
                DELETE [MoBatch].[BI_RoleAccessTree_Save]
                WHERE  RoleId = @RoleID

                RAISERROR(@ErrMsg,@ErrSeverity,1)
            END CATCH

            COMMIT
        END
      ELSE
        BEGIN
            BEGIN TRAN

            BEGIN TRY
                INSERT INTO [MoBatch].[BI_RoleAccessTree_Save]
                            ([TxHandle],
                             [RoleId],
                             [AccessId],
							 [AccessGranted])
                VALUES      (@TxHandle,
                             @RoleID,
                             @AccessID,
							 @AccessGranted)
            END TRY

            BEGIN CATCH
                -- catch exception  
                SELECT @ErrMsg = ERROR_MESSAGE()
                       , @ErrSeverity = ERROR_SEVERITY()

                ROLLBACK TRANSACTION

                -- Get rid of interim table entries if error occurs
                DELETE [MoBatch].[BI_RoleAccessTree_Save]
                WHERE  [TxHandle] = @TxHandle

                RAISERROR(@ErrMsg,@ErrSeverity,1)
            END CATCH

            COMMIT
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Assign_Specific_Access](@BatchType VARCHAR(200),
                                                           @RoleId    VARCHAR(50))
AS
  -- EXEC [MoBatch].[a_sp_BI_Assign_Specific_Access] 'Invoices', 'Clerk'
  BEGIN
      -- Add access to role where this role did not have access previously
      INSERT INTO [MoBatch].[BI_RoleAccessTree]
                  ([AccessId],
                   [RoleId])
      SELECT a.accessid, @RoleId
      FROM   MoBatch.BI_AccessTree a WITH (nolock)
             LEFT OUTER JOIN MoBatch.BI_RoleAccessTree r WITH (nolock)
               ON r.accessid = a.accessid
                  AND r.roleid = @RoleId
      WHERE  a.AccessCode LIKE @BatchType + '%'
             AND r.accessid IS NULL
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_BatchLevel_Delete](
  -- ===========================================================
  -- Author:        R. Blomstrand
  -- Create date: 23/09/2008
  -- Description:   Used by MoBatch to delete batch types levels
  -- ===========================================================
  @BatchType  VARCHAR(255),
  @BatchLevel CHAR(1))
AS
  BEGIN
      SET NoCount OFF;

      BEGIN TRANSACTION;

	  -- Whether deleting Distribution, Lines or Header - Always remove Distribution
      DELETE ra
      FROM   MoBatch.BI_RoleAccessTree ra
             INNER JOIN MoBatch.BI_AccessTree a
               ON a.AccessId = ra.AccessId
                  AND a.AccessCode LIKE @BatchType + ' Distributions - %'

      DELETE MoBatch.BI_AccessTree
      WHERE  AccessCode LIKE @BatchType + ' Distributions - %'

      DELETE r
      FROM   [MoBatch].[BI_Reports] r
             INNER JOIN [MoBatch].[BI_RPTCategories] rc
               ON rc.RptCategoryID = r.RptCategoryID
                  AND rc.BatchType = @BatchType
                  AND rc.BatchLevel = 'D'

      DELETE [MoBatch].[BI_RPTCategories]
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Columns
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Buttons
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE fa
      FROM   MoBatch.BI_FilterAssigned fa
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fa.FilterID
                  AND f.BatchType = @BatchType
                  AND f.BatchLevel = 'D'

      DELETE fc
      FROM   MoBatch.BI_FilterCriteria fc
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fc.FilterID
                  AND f.BatchType = @BatchType
                  AND f.BatchLevel = 'D'

      DELETE MoBatch.BI_Filters
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Layout
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

      DELETE MoBatch.BI_Tables
      WHERE  BatchType = @BatchType
             AND BatchLevel = 'D'

	  -- Whether deleting Lines or Header - Always remove Lines
      IF @BatchLevel IN ( 'H', 'L' )
        BEGIN
            DELETE ra
            FROM   MoBatch.BI_RoleAccessTree ra
                   INNER JOIN MoBatch.BI_AccessTree a
                     ON a.AccessId = ra.AccessId
                        AND a.AccessCode LIKE @BatchType + ' Lines - %'

            DELETE MoBatch.BI_AccessTree
            WHERE  AccessCode LIKE @BatchType + ' Lines - %'

            DELETE r
            FROM   [MoBatch].[BI_Reports] r
                   INNER JOIN [MoBatch].[BI_RPTCategories] rc
                     ON rc.RptCategoryID = r.RptCategoryID
                        AND rc.BatchType = @BatchType
                        AND rc.BatchLevel = 'L'

            DELETE [MoBatch].[BI_RPTCategories]
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Columns
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Buttons
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE fa
            FROM   MoBatch.BI_FilterAssigned fa
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fa.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'L'

            DELETE fc
            FROM   MoBatch.BI_FilterCriteria fc
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fc.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'L'

            DELETE MoBatch.BI_Filters
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Layout
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'

            DELETE MoBatch.BI_Tables
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'L'
        END

	  -- If deleting Header - Remove header and the entire batch
      IF @BatchLevel = 'H'
        BEGIN
            DELETE ra
            FROM   MoBatch.BI_RoleAccessTree ra
                   INNER JOIN MoBatch.BI_AccessTree a
                     ON a.AccessId = ra.AccessId
                        AND a.AccessCode LIKE @BatchType + ' %'

            DELETE MoBatch.BI_AccessTree
            WHERE  AccessCode LIKE @BatchType + ' %'

            DELETE r
            FROM   [MoBatch].[BI_Reports] r
                   INNER JOIN [MoBatch].[BI_RPTCategories] rc
                     ON rc.RptCategoryID = r.RptCategoryID
                        AND rc.BatchType = @BatchType
                        AND rc.BatchLevel = 'H'

            DELETE [MoBatch].[BI_RPTCategories]
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Columns
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Buttons
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE fa
            FROM   MoBatch.BI_FilterAssigned fa
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fa.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'H'

            DELETE fc
            FROM   MoBatch.BI_FilterCriteria fc
                   INNER JOIN MoBatch.BI_Filters f
                     ON f.FilterID = fc.FilterID
                        AND f.BatchType = @BatchType
                        AND f.BatchLevel = 'H'

            DELETE MoBatch.BI_Filters
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Layout
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_Tables
            WHERE  BatchType = @BatchType
                   AND BatchLevel = 'H'

            DELETE MoBatch.BI_BatchTypes
            WHERE  BatchType = @BatchType
        END

      IF @@ERROR &gt; 0
        BEGIN
            RAISERROR ('Delete BI_Batchlevel Failed',16,1)

            ROLLBACK TRANSACTION

            RETURN 1
        END
      ELSE
        BEGIN
            COMMIT;
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_BatchTypes_Delete](
  -- ===========================================================
  -- Author:        R. Blomstrand
  -- Create date: 23/09/2008
  -- Description:   Used by MoBatch to delete batch types
  -- ===========================================================
  @BatchType VARCHAR(255))
AS
  BEGIN
      SET NoCount OFF;

      BEGIN TRANSACTION;

      DELETE ra
      FROM   MoBatch.BI_RoleAccessTree ra
             INNER JOIN MoBatch.BI_AccessTree a
               ON a.AccessId = ra.AccessId
                  AND a.AccessCode LIKE @BatchType + ' - %'

      DELETE MoBatch.BI_AccessTree
      WHERE  AccessCode LIKE @BatchType + ' - %'

      DELETE r
      FROM   [MoBatch].[BI_Reports] r
             INNER JOIN [MoBatch].[BI_RPTCategories] rc
               ON rc.RptCategoryID = r.RptCategoryID
                  AND rc.BatchType = @BatchType

      DELETE [MoBatch].[BI_RPTCategories]
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Columns
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Buttons
      WHERE  BatchType = @BatchType

      DELETE fa
      FROM   MoBatch.BI_FilterAssigned fa
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fa.FilterID
                  AND f.BatchType = @BatchType

      DELETE fc
      FROM   MoBatch.BI_FilterCriteria fc
             INNER JOIN MoBatch.BI_Filters f
               ON f.FilterID = fc.FilterID
                  AND f.BatchType = @BatchType

      DELETE MoBatch.BI_Filters
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Layout
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_Tables
      WHERE  BatchType = @BatchType

      DELETE MoBatch.BI_BatchTypes
      WHERE  BatchType = @BatchType

      IF @@ERROR &gt; 0
        BEGIN
            RAISERROR ('Delete BI_BatchTypes Failed',16,1)

            ROLLBACK TRANSACTION

            RETURN 1
        END
      ELSE
        BEGIN
            COMMIT;
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Check_Access] @AccessId        VARCHAR(255),
                                            @WindowsUserName VARCHAR(255)
-- To Execute:
-- EXEC [MoBatch].[a_sp_BI_Check_Access] 'menuConfiguration', 'Admin'
AS
  BEGIN
      SET nocount ON

      DECLARE @CountAccessUsers INT

      -- Initialize count of users who can get to security access screen
      SELECT @CountAccessUsers = 999

      -- Count users who can get to security access screen (both Configuration
      -- menu option and Access screen)
      IF @AccessId = 'menuConfiguration'
          OR @AccessId = 'menuAccess'
        BEGIN
            SELECT @CountAccessUsers = Count(*)
            FROM   bi_users u WITH (NOLOCK)
                   INNER JOIN bi_roleaccessTree ra WITH (NOLOCK)
                     ON ra.roleid = u.roleid
                   INNER JOIN BI_AccessTree at WITH (NOLOCK)
                     ON at.AccessId = ra.AccessId
                        AND at.AccessCode = '~menuConfiguration'

            IF @CountAccessUsers &gt; 0
              BEGIN
                  SELECT @CountAccessUsers = Count(*)
                  FROM   bi_users u WITH (NOLOCK)
                         INNER JOIN bi_roleaccessTree ra WITH (NOLOCK)
                           ON ra.roleid = u.roleid
                         INNER JOIN BI_AccessTree at WITH (NOLOCK)
                           ON at.AccessId = ra.AccessId
                              AND at.AccessCode = '~menuAccess'
              END
        END

      IF @CountAccessUsers = 0
        BEGIN
            -- If checking for access to Configuration menu option or to
            -- Access screen, and if no other users have access to both of
            -- these, then grant the user access to both of these.
            -- Purpose is to allow initial users access to this security
            -- screen until somebody has been set up as the administrator
            -- of this.
            SELECT 1 accessgranted
        END
      ELSE
        BEGIN
            -- Either not checking access to Configuration menu option / Access
            -- screen, or else other users have access to these.
            SELECT Count(*) accessgranted
            FROM   bi_users u WITH (NOLOCK)
                   INNER JOIN bi_roleaccessTree ra WITH (NOLOCK)
                     ON ra.roleid = u.roleid
                   INNER JOIN BI_AccessTree at WITH (NOLOCK)
                     ON at.AccessId = ra.AccessId
                        AND at.AccessCode = @AccessId
            WHERE  u.userid = @WindowsUserName
        END
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_CheckIfRunWizard]
AS
  BEGIN
      SET nocount ON

      -- Declare variables to use
      DECLARE @Message VARCHAR(1000)
      DECLARE @AccessExists CHAR
      DECLARE @BatchTypesExist CHAR

      -- Default values for variables
      SELECT @Message = ''
             , @AccessExists = 'N'
             , @BatchTypesExist = 'N'

      -- Check if any access granted
      IF EXISTS (SELECT *
                 FROM   bi_users u WITH (NOLOCK)
                        INNER JOIN BI_RoleAccessTree ra WITH (NOLOCK)
                          ON ra.roleid = u.roleid
                        INNER JOIN BI_AccessTree at WITH (NOLOCK)
                          ON at.AccessId = ra.AccessId
                             AND at.AccessCode IN ( '~menuConfiguration', '~menuAccess' ))
        BEGIN
            SELECT @AccessExists = 'Y'
        END

      -- Check if any batch types set up
      IF EXISTS (SELECT *
                 FROM   bi_batchtypes WITH (NOLOCK))
        BEGIN
            SELECT @BatchTypesExist = 'Y'
        END

      -- Set up error message
      IF @AccessExists = 'N'
        BEGIN
            IF @Message &lt;&gt; ''
              BEGIN
                  SELECT @Message = @Message + ' and no access has been granted'
              END
            ELSE
              BEGIN
                  SELECT @Message = @Message + 'No access has been granted'
              END
        END

      IF @BatchTypesExist = 'N'
        BEGIN
            IF @Message &lt;&gt; ''
              BEGIN
                  SELECT @Message = @Message + ' and no batch types have been set up'
              END
            ELSE
              BEGIN
                  SELECT @Message = @Message + 'No batch types have been set up'
              END
        END

      -- Return message (if any). If blank then Wizard is not required.
      SELECT check_message = @Message
  END</commandtext>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Access_Select] @AccessId VARCHAR(255)
AS
  BEGIN
      SET nocount ON

      SELECT [AccessId]
             , [AccessDescr]
      FROM   [MoBatch].[BI_AccessTree]
      WHERE  ( [AccessCode] = @AccessId
                OR @AccessId IS NULL )
      ORDER  BY [AccessDescr]
  END</commandtext>
      <commandtext>DELETE MoBatch.BI_RoleAccessTree

EXEC MoBatch.a_sp_BI_Setup_New_Access

INSERT INTO MoBatch.BI_RoleAccessTree
            (RoleId,
             AccessId,
			 AccessGranted)
SELECT ra.RoleId
       , at.AccessId
	   , 1
FROM   MoBatch.BI_RoleAccess ra WITH (NOLOCK)
       INNER JOIN MoBatch.BI_AccessTree at WITH (NOLOCK)
         ON REPLACE(at.AccessCode, '~', '') = ra.AccessId


select * from MoBatch.BI_RoleAccessTree</commandtext>
      <commandtext>IF EXISTS(SELECT *
          FROM   sys.procedures
          WHERE  NAME = 'a_sp_BI_RoleAccess_Delete')
  BEGIN
      DROP PROCEDURE [MoBatch].[a_sp_BI_RoleAccess_Delete]
  END</commandtext>
      <commandtext>IF EXISTS(SELECT *
          FROM   sys.procedures
          WHERE  NAME = 'a_sp_BI_RoleAccess_Insert')
  BEGIN
      DROP PROCEDURE [MoBatch].[a_sp_BI_RoleAccess_Insert]
  END</commandtext>
      <comment>Cater for new Access Method</comment>
    </command>
  </Version>
  <Version number="1.4.2.3">
    <command>
      <commandtext>ALTER PROC [MoBatch].[a_sp_BI_Check_Access] @AccessId        VARCHAR(255),
                                            @WindowsUserName VARCHAR(255)
-- To Execute:
-- EXEC [MoBatch].[a_sp_BI_Check_Access] '~menuConfiguration', 'Admin'
AS
  BEGIN
      SET nocount ON

      DECLARE @CountAccessUsers INT

      -- Initialize count of users who can get to security access screen
      SELECT @CountAccessUsers = 999

      -- Count users who can get to security access screen (both Configuration
      -- menu option and Access screen)
      IF @AccessId = '~menuConfiguration'
          OR @AccessId = '~menuAccess'
        BEGIN
            SELECT @CountAccessUsers = Count(*)
            FROM   bi_users u WITH (NOLOCK)
                   INNER JOIN bi_roleaccessTree ra WITH (NOLOCK)
                     ON ra.roleid = u.roleid
                   INNER JOIN BI_AccessTree at WITH (NOLOCK)
                     ON at.AccessId = ra.AccessId
                        AND at.AccessCode = '~menuConfiguration'

            IF @CountAccessUsers &gt; 0
              BEGIN
                  SELECT @CountAccessUsers = Count(*)
                  FROM   bi_users u WITH (NOLOCK)
                         INNER JOIN bi_roleaccessTree ra WITH (NOLOCK)
                           ON ra.roleid = u.roleid
                         INNER JOIN BI_AccessTree at WITH (NOLOCK)
                           ON at.AccessId = ra.AccessId
                              AND at.AccessCode = '~menuAccess'
              END
        END

      IF @CountAccessUsers = 0
        BEGIN
            -- If checking for access to Configuration menu option or to
            -- Access screen, and if no other users have access to both of
            -- these, then grant the user access to both of these.
            -- Purpose is to allow initial users access to this security
            -- screen until somebody has been set up as the administrator
            -- of this.
            SELECT 1 accessgranted
        END
      ELSE
        BEGIN
            -- Either not checking access to Configuration menu option / Access
            -- screen, or else other users have access to these.
            SELECT Count(*) accessgranted
            FROM   bi_users u WITH (NOLOCK)
                   INNER JOIN bi_roleaccessTree ra WITH (NOLOCK)
                     ON ra.roleid = u.roleid
                   INNER JOIN BI_AccessTree at WITH (NOLOCK)
                     ON at.AccessId = ra.AccessId
                        AND at.AccessCode = @AccessId
            WHERE  u.userid = @WindowsUserName
        END
  END</commandtext>
      <comment>Provide limited access when no access granted yet</comment>
    </command>
    <command>
      <commandtext>UPDATE [MoBatch].[BI_AppSettings] SET Value = 'dd/MM/yy' WHERE Setting = 'DateInputFormat' AND Value = 'DD/MM/YY'</commandtext>
      <comment>Correct default Input Date format</comment>
    </command>
  </Version>
  <Version number="1.4.2.7">
    <command>
      <commandtext>UPDATE [MoBatch].[BI_AppSettings] SET Value = 'dd/MM/yy' WHERE Setting = 'DateInputFormat' AND Value = 'dd-MMM-yy'</commandtext>
      <comment>Correct incorrect DateInputFormat setting displaying Gujarati date</comment>
    </command>
  </Version>
  <Version number="1.4.2.13">
    <command>
      <commandtext>ALTER TABLE MoBatch.BI_BatchTypes ADD
        ExpiryDate date NULL</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypes_Select](@LicensedOnly CHAR(1),
        @BatchCatCd   VARCHAR(10))
        AS
        BEGIN
        IF @LicensedOnly = 'Y'
        BEGIN
        SELECT [BatchType]
        , [BatchCatCd] = Isnull([BatchCatCd], '(None)')
        , [Sequence]
        , [License]
        , [ExpiryDate]
        , [CurrDate] = Getdate()
        FROM   [MoBatch].bi_BatchTypes
        WHERE  License IS NOT NULL
        AND ( @BatchCatCd IS NULL
        OR BatchCatcd = @BatchCatCd )
        ORDER  BY SEQUENCE
        END
        ELSE
        BEGIN
        SELECT [BatchType]
        , [BatchCatCd] = Isnull([BatchCatCd], '(None)')
        , [Sequence]
        , [License]
        , [ExpiryDate]
        , [CurrDate] = Getdate()
        FROM   [MoBatch].bi_BatchTypes
        WHERE  ( @BatchCatCd IS NULL
        OR BatchCatcd = @BatchCatCd )
        ORDER  BY SEQUENCE
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypes_Update](@BatchType  VARCHAR(255),
        @License    VARCHAR(255),
        @ExpiryDate VARCHAR(20),
        @Sequence   INT,
        @BatchCatCd VARCHAR(255))
        AS
        BEGIN
        SET nocount OFF;

        IF @BatchCatCd = '(None)'
        BEGIN
        SELECT @BatchCatCd = NULL
        END

        UPDATE [MoBatch].bi_batchtypes
        SET    license = @License,
        ExpiryDate = @ExpiryDate,
        SEQUENCE = @Sequence,
        batchcatcd = @BatchCatCd
        WHERE  batchtype = @BatchType

        IF @@ERROR &gt; 0
        BEGIN
        RAISERROR ('Update BI_BatchTypes Failed',16,1)

        ROLLBACK TRANSACTION

        RETURN 1
        END
        END</commandtext>
      <commandtext>ALTER PROCEDURE [MoBatch].[a_sp_BI_BatchTypes_Insert](@BatchType  VARCHAR(255),
        @License    VARCHAR(255),
        @ExpiryDate VARCHAR(20),
        @Sequence   INT,
        @BatchCatCd VARCHAR(255))
        AS
        BEGIN
        SET nocount OFF;

        IF @BatchCatCd = '(None)'
        BEGIN
        SELECT @BatchCatCd = NULL
        END

        INSERT INTO [MoBatch].[BI_BatchTypes]
        ([BatchType],
        [License],
        [ExpiryDate],
        [Sequence],
        [BatchCatCd])
        VALUES      (@BatchType,
        @License,
        @ExpiryDate,
        @Sequence,
        @BatchCatCd)

        IF @@ERROR &gt; 0
        BEGIN
        RAISERROR ('Insert BI_BatchTypes Failed',16,1)

        ROLLBACK TRANSACTION

        RETURN 1
        END
        END</commandtext>
      <comment>Reflect License Expiry Date</comment>
    </command>
  </Version>
  <Version number="1.4.2.14">
    <command>
      <commandtext>-- =============================================
-- Author:		Robert Blomstrand
-- Create date: 28/4/2014
-- Description:
-- =============================================
CREATE PROCEDURE [MoBatch].[a_sp_BI_LayoutDelete] 
	@BatchType  VARCHAR(255) = '',
        @BatchLevel CHAR(1) = '',
        @Key        VARCHAR(255) = ''
AS
BEGIN
        -- SET NOCOUNT ON added to prevent extra result sets from
        -- interfering with SELECT statements.
        SET NOCOUNT ON;

        DELETE [MoBatch].[BI_Layout]
        WHERE  [BatchType] = @BatchType
		AND [BatchLevel] = @BatchLevel
		AND [Key] = @Key
END</commandtext>
      <comment>Cater for deleting Grid/Dock Layout</comment>
    </command>
  </Version>
</DBUpdate>